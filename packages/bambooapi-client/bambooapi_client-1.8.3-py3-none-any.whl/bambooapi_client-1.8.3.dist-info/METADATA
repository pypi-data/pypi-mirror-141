Metadata-Version: 2.1
Name: bambooapi-client
Version: 1.8.3
Summary: Bamboo Flexibility API
Home-page: https://github.com/bambooenergy/mvp-api-client
Author: Damien Tavan
Author-email: dtavan@bambooenergy.tech
License: MIT
Keywords: OpenAPI,OpenAPI-Generator,Bamboo Flexibility API
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: python-dateutil (>=2.8.*)
Requires-Dist: urllib3 (>=1.26.*)
Requires-Dist: numpy (>=1.21.*)
Requires-Dist: pandas (>=1.3.*)

# Python client for Bamboo REST API

[![PyPI Version](https://img.shields.io/pypi/v/bambooapi-client.svg)](https://pypi.org/project/bambooapi-client/)
[![Python Versions](https://img.shields.io/pypi/pyversions/bambooapi-client.svg)](https://pypi.org/project/bambooapi-client/)


The Bamboo REST API provides access to flexibility assets managed by Bamboo Energy:

- Create and list flexibility sites & assets
- Post and get measurements for specific assets
- Obtain activations for specific assets

The sandboxed version of the API to be used for development & testing is available at: https://dev-sandbox.bambooenergy.tech/v1/docs

## Installation & Usage

### pip install

You can install the package directly using:

```sh
pip install bambooapi-client
```

Then import the package:

```python
import bambooapi_client
```

## Requirements.

- Python >= 3.8
- python_dateutil >= 2.8
- urllib3 >= 1.26
- numpy >= 1.21
- pandas >= 1.3

## Getting Started

First, import the `BambooAPIClient` class and initialize it with the API URL and the API bearer token that was assigned to you.

```python
from bambooapi_client import BambooAPIClient

bambooapi_url = 'https://dev-sandbox.bambooenergy.tech/v1'
bambooapi_token = 'your_token'

client = BambooAPIClient(url=bambooapi_url, token=bambooapi_token)
```

You can now access the **Sites API** and its methods

```python
sites_api = client.sites_api()
```

### Retrieving Site Metadata

You can then list all the sites related to your API user with the `list_sites` command

```python
sites_api.list_sites()
```

Given a site name, you can obtain a site ID and retrieve the site's detailed description

```python
site_id = sites_api.get_site_id('dummy_building_1')
sites_api.get_site(site_id)
```

Given a site ID, you can now retrieve information about a particular zone or device

```python
sites_api.get_thermal_zone(site_id, 'zone1')
sites_api.get_device(site_id, 'hvac1')
```

### Retrieving and pushing Site Measurements

Given a site ID you can also retrieve measurements for a specific period.

The period can be defined relative to current time using aliases such as: `-1mo`, `-1w`, `-1d`, `-4h`

```python
sites_api.read_device_measurements(site_id, 'meter', start='-1d', stop='-1h')
```

Or it can also be defined using timestamps in RFC3339 format `YYYY-MM-DDT00:00:00Z`

```python
sites_api.read_device_measurements(site_id, 'meter', start='2021-06-01', stop='2021-06-02')
sites_api.read_device_measurements(site_id, 'meter', start='2021-06-03T08:00', stop='2021-06-03T20:00')
```

On the other hand, you can also upload new measurements (or update existing measurements). For that, new measurements must first be converted to a `pandas` DataFrame. **1 or more data points can be uploaded at once**.

```python
_DATA_POINTS = [
    {
        'time': '2021-06-03T07:00:00+00:00',
        'power': 12.0,
        'quality': 1
    },
    {
        'time': '2021-06-03T07:15:00+00:00',
        'power': 15.0,
        'quality': 1
    }
]

new_data_points = pd.DataFrame.from_records(_DATA_POINTS, index='time')

sites_api.update_device_measurements(site_id, 'meter', new_data_points)
```

### Retrieving Activations (BETA)

You can test how activations would be retrieved with the following command.

```python
sites_api.read_device_activations(site_id, 'hvac1')
```

This feature is not fully operational yet, and the endpoint currently returns mock data only. However, the response format should remain the same.


# Change log for Bamboo API Client
All notable changes to this project will be documented in this file.

## 1.8.3 - 2022-03-09
- Update to bamboo backend v1.8.3

## 1.8.1 - 2022-03-03
- Add bambooapi_client.markets_api. GET/PUT market prices endpoints. 

## 1.7.2 - 2022-02-04
- Update microgrid devices models accordingly to Bamboo Backend v1.7.2. 
- Update `controllable` type to `str`in MeterFactory, LoadFactory, 
ShiftableLoadFactory, PVSystemFactory, EVCHargerFactory, BatteryFactory,
ThermalLoadFactory, ThermalComfortDeviceFactory, ThermalZoneFactory and 
ThermalZoneFactory.

## 1.7.1 - 2022-01-27
- Rename `temperature` to `temp`.

## 1.7.0 - 2022-01-25
- Add `frequency` argument (optional) to methods that return time series data.

## 1.6.4 -  2021-12-23
- Fix endpoints return `datetime` objects and `Enum`s instead of `str` instances.

## 1.6.3 -  2021-12-21
- Fix endpoints return DataFrames with DateTimeIndex

## 1.6.2 - 2021-12-20
- Make SOCs a float between 0 and 100
- Add `loads` as a new type of device

## 1.6.0 - 2021-10-11
- Added `KernelBaselineModelFactory`, `KNNBaselineModelFactory`, `BaselineModelFactory`
- Drop int support in `BaselineModel.training_set`

## 1.5.2 - 2021-09-27
- Refactored `bambooapi_client.testing.factory.sites_api.forecast_factory_from_datapoints` to `bambooapi_client.testing.factory.timeseries.timeseries_factory_from_datapoints`
- Refactored `bambooapi_client.testing.factory.sites_api.forecast_factory_from_dataframe` to `bambooapi_client.testing.factory.timeseries.timeseries_factory_from_dataframe`

## 1.5.1 - 2021-09-17
- Added `ThermalZoneSetpointsFactory`.
- Added read&update thermal zone setpoints endpoints in `SitesApi`.

## 1.5.0 - 2021-09-17
- Renamed `SitesApi.list_zones` to `SitesApi.list_thermal_zones`
- Renamed `SitesApi.get_zone` to `SitesApi.get_thermal_zone`
- Renamed `SitesApi.read_measurements` to `SitesApi.read_device_measurements`
- Renamed `SitesApi.update_measurements` to `SitesApi.update_device_measurements`
- Renamed `SitesApi.read_forecasts` to `SitesApi.read_device_baseline_forecasts`
- Renamed `SitesApi.update_forecasts` to `SitesApi.update_device_baseline_forecasts`
- Renamed `SitesApi.read_activations` to `SitesApi.read_device_activations`
- Renamed `SitesApi.read_baseline_model` to `SitesApi.read_device_baseline_model`
- Renamed `SitesApi.update_baseline_model` to `SitesApi.update_device_baseline_model`
- Renamed `SitesApi.read_flexibility_model` to `SitesApi.read_thermal_flexibility_model`
- Renamed `SitesApi.update_flexibility_model` to `SitesApi.update_thermal_flexibility_model`
- Updated `SitesApi.update_device_flexibility_forecast` to accept a DataFrame
- Added read&update flexibility forecast endpoints in `SitesApi` for devices and thermal zones

## 1.4.1 - 2021-09-08
- Added `Tariffs` CRUD endpoints
- Added endpoints to store & retrieve flexibility model parameters
- Split `DataPoint` model into `SitesDataPoint` and `WeatherDataPoint` models
- Added missing fields to `WeatherDataPoint` schema: `dewpoint`, `humidity`, `pressure` and `wind_speed`

## 1.3.0 - 2021-08-11
- Added `elevation` to Site & Weather Station schemas
- Added type hinting to all public methods

## 1.2.1 - 2021-08-05
- Added Mock API client for testing with factories

## 1.2.0 - 2021-07-27
- News fields in Sites schema: `country_code`, `timezone`, `latitude` & `longitude`
- Modified `list_sites` to return a simpler schema
- Renamed all `asset_name` arguments to `device_name`
- Added input data validation rules for all data models
- Added all variables in [mapping format](https://bambooenergy.atlassian.net/wiki/spaces/BMD/pages/175472655/Mapping+Format) to DataPoint schema
- Updated battery schema, removing the redundant `max_power` and `min_power` variables
- **BUGFIX**: Decreased min length for device names to 2 characters

## 1.1.5 - 2021-06-22
- Modify setup and requirements to make package compatible with Python 3.5 and up
- Update requirements in README and add dynamic version badges

## 1.1.3 - 2021-06-11
- Restrict exception catching to "NotFoundException" (HTTP 404) in get methods

## 1.1.2 - 2021-06-11
- Updated client based con v1.1.2 of openapi definition for Bamboo API

## 1.1.1 - 2021-06-04
- Updated README with usage instructions

## 1.1.0 - 2021-06-03
- Updated client based con latest openapi definition for Bamboo API
- Renamed `find` method to `get`: `find_site` becomes `get_site`, etc...
- In GET methods, catch `NotFound` API errors (HTTP 404) and return None instead of raising an error
- Added `get_site_id_by_name` method to obtain site ID given a site name
- Added `get_station_id_by_name` method to obtain weather station ID given a station name
- Renamed `read_load_model` to `read_baseline_model` and `update_load_model` to `update_baseline_model`
- Added missing `horizon` parameter in `update_forecasts` method

## 1.0.0 - 2021-05-27
- Initial release


