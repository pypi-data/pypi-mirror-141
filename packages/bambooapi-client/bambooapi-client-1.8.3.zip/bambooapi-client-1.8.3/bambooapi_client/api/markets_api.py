"""
    Bamboo Flexibility API

     This API provides access to flexibility assets managed by Bamboo Energy: - Create and list flexibility sites & assets - Obtain activations for specific assets - Post and get measurements for specific assets   # noqa: E501

    The version of the OpenAPI document: 1.8.3
    Contact: development@bambooenergy.tech
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bambooapi_client.api_client import ApiClient, Endpoint as _Endpoint
from bambooapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bambooapi_client.model.http400_bad_request import HTTP400BadRequest
from bambooapi_client.model.http401_unauthorized import HTTP401Unauthorized
from bambooapi_client.model.http403_forbidden import HTTP403Forbidden
from bambooapi_client.model.http404_not_found import HTTP404NotFound
from bambooapi_client.model.http_validation_error import HTTPValidationError
from bambooapi_client.model.market import Market
from bambooapi_client.model.market_create import MarketCreate
from bambooapi_client.model.market_list_item import MarketListItem
from bambooapi_client.model.market_price import MarketPrice
from bambooapi_client.model.market_update import MarketUpdate


class MarketsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_market_endpoint = _Endpoint(
            settings={
                'response_type': (Market,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets',
                'operation_id': 'create_market',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_create',
                ],
                'required': [
                    'market_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_create':
                        (MarketCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'market_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_market_endpoint = _Endpoint(
            settings={
                'response_type': (Market,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/{market_id}',
                'operation_id': 'delete_market',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                ],
                'required': [
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                },
                'location_map': {
                    'market_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_market_endpoint = _Endpoint(
            settings={
                'response_type': (Market,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/{market_id}',
                'operation_id': 'get_market',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                ],
                'required': [
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                },
                'location_map': {
                    'market_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_market_prices_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/{market_id}/prices/',
                'operation_id': 'get_market_prices',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                    'start_date',
                    'end_date',
                    'units',
                ],
                'required': [
                    'market_id',
                    'start_date',
                    'end_date',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'units':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                    'start_date': 'start_date',
                    'end_date': 'end_date',
                    'units': 'units',
                },
                'location_map': {
                    'market_id': 'path',
                    'start_date': 'query',
                    'end_date': 'query',
                    'units': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.insert_market_prices_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/{market_id}/prices/',
                'operation_id': 'insert_market_prices',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                    'market_price',
                    'ramping',
                ],
                'required': [
                    'market_id',
                    'market_price',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                    'market_price':
                        ([MarketPrice],),
                    'ramping':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                    'ramping': 'ramping',
                },
                'location_map': {
                    'market_id': 'path',
                    'market_price': 'body',
                    'ramping': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.list_markets_endpoint = _Endpoint(
            settings={
                'response_type': ([MarketListItem],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets',
                'operation_id': 'list_markets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_market_endpoint = _Endpoint(
            settings={
                'response_type': (Market,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/{market_id}',
                'operation_id': 'update_market',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                    'market_update',
                ],
                'required': [
                    'market_id',
                    'market_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                    'market_update':
                        (MarketUpdate,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                },
                'location_map': {
                    'market_id': 'path',
                    'market_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_market(
        self,
        market_create,
        **kwargs
    ):
        """Create a Market  # noqa: E501

        Create a Market with all the information:  - **market_name**: A unique name for the market - **market_type**: Type of market. - **country_code**: ISO_3166-1 or ISO_3166-2:ES country code in which the   market operates. - **min_bid_size**: Minimum power (in kW) to offer in a ramp up bid, ramp   down bid or the sum of both. - **product_resolution**: Time (in hours) that a unit has to offer is   flexibility. - **payment mechanism**: Payment mechanism. - **notification_time**: [Only for flexibility markets] Maximum reaction   time (in hours) of the flexibility source. - **symmetry_ratio**: [Only for flexibility markets] Ratio between ramp up   bid offer and ramp down bid offer in symmetrical markets.   In other words, symmetry_ratio = (ramp_up bid) / (ramp_down bid).   Set value to null if the market is not symmetrical. - **capacity_payment**: [Only for flexibility market] If True, we are be   paid just to be available to offer flexibility. - **max_activations**: [Only for flexibility market] Maximum number of   activations. Set value to null if there's no limit in the number of   activations. - **delivery_duration**: [Only for flexibility market] Maximum time (in   hours) an activation lasts. Set null value if there's no time limit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_market(market_create, async_req=True)
        >>> result = thread.get()

        Args:
            market_create (MarketCreate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Market
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['market_create'] = \
            market_create
        return self.create_market_endpoint.call_with_http_info(**kwargs)

    def delete_market(
        self,
        market_id,
        **kwargs
    ):
        """Delete a Market  # noqa: E501

        Delete a Market.  **WARNING!: Market deletion is PERMANENT!** (no way to recover deleted Market)  **WARNING!: Deleting a Market does not delete the associated time series prices!**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_market(market_id, async_req=True)
        >>> result = thread.get()

        Args:
            market_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Market
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['market_id'] = \
            market_id
        return self.delete_market_endpoint.call_with_http_info(**kwargs)

    def get_market(
        self,
        market_id,
        **kwargs
    ):
        """Info about a specific Market  # noqa: E501

        Info about a specific Market.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_market(market_id, async_req=True)
        >>> result = thread.get()

        Args:
            market_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Market
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['market_id'] = \
            market_id
        return self.get_market_endpoint.call_with_http_info(**kwargs)

    def get_market_prices(
        self,
        market_id,
        start_date,
        end_date,
        **kwargs
    ):
        """Get market prices  # noqa: E501

        Get market prices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_market_prices(market_id, start_date, end_date, async_req=True)
        >>> result = thread.get()

        Args:
            market_id (int):
            start_date (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\"
            end_date (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\"

        Keyword Args:
            units (bool, date, datetime, dict, float, int, list, str, none_type): If **MW**, return energy market prices in **€/MWh** and capacity prices in **€/MW**. If **KW**, return energy market prices in **€/KWh** and capacity prices in **€/KW**.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['market_id'] = \
            market_id
        kwargs['start_date'] = \
            start_date
        kwargs['end_date'] = \
            end_date
        return self.get_market_prices_endpoint.call_with_http_info(**kwargs)

    def insert_market_prices(
        self,
        market_id,
        market_price,
        **kwargs
    ):
        """Insert market prices  # noqa: E501

        Insert market prices time series.  Energy price units must be €/MWh. Capacity price units must be €/MW.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_market_prices(market_id, market_price, async_req=True)
        >>> result = thread.get()

        Args:
            market_id (int):
            market_price ([MarketPrice]):

        Keyword Args:
            ramping (bool, date, datetime, dict, float, int, list, str, none_type): Set to None for energy market price series and capacity pricemarket series. Set to any value for flexibility market price series.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['market_id'] = \
            market_id
        kwargs['market_price'] = \
            market_price
        return self.insert_market_prices_endpoint.call_with_http_info(**kwargs)

    def list_markets(
        self,
        **kwargs
    ):
        """List all Markets  # noqa: E501

        List all Markets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_markets(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [MarketListItem]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_markets_endpoint.call_with_http_info(**kwargs)

    def update_market(
        self,
        market_id,
        market_update,
        **kwargs
    ):
        """Update an existing Market  # noqa: E501

        Update information about a Market.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_market(market_id, market_update, async_req=True)
        >>> result = thread.get()

        Args:
            market_id (int):
            market_update (MarketUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Market
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['market_id'] = \
            market_id
        kwargs['market_update'] = \
            market_update
        return self.update_market_endpoint.call_with_http_info(**kwargs)

