{"version":3,"sources":["style.module.scss","SendSettings.tsx","index.tsx"],"names":["module","exports","SendSettings","props","render","className","styles","poCheckboxLabel","poCheckbox","type","defaultChecked","state","onChange","_onChange","disabled","onFocus","_onFocus","onBlur","_onBlur","poCheckboxSpan","_sendMessageTo","window","parent","chrome","webview","console","log","msgObject","action","data","args","json","JSON","stringify","postMessage","_setStateNow","status","setState","prevState","isChecked","_autoUpdate","ms","setTimeout","msg","event","check","target","checked","isFocused","initialState","delay","this","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,gBAAkB,+BAA+B,eAAiB,8BAA8B,WAAa,4B,4KC0BzHC,E,kDAEJ,WAAmBC,GAAwB,IAAD,uBACxC,cAAMA,IAyBDC,OAAS,WACd,OACE,2BAAOC,UAAWC,IAAOC,iBACvB,2BACEF,UAAWC,IAAOE,WAClBC,KAAK,WACLC,eAAgB,EAAKC,MAAMD,eAC3BE,SAAU,EAAKC,UACfC,SAAU,EAAKX,MAAMW,SACrBC,QAAS,EAAKC,SACdC,OAAQ,EAAKC,UACf,0BAAMb,UAAWC,IAAOa,gBAAxB,mBArCoC,EA4ClCC,eAAiB,WACvB,GAAmC,oBAAxBC,OAAOC,OAAOC,OAAuB,CAC9C,GAA2C,oBAAhCF,OAAOC,OAAOC,OAAOC,QAG9B,OADAC,QAAQC,IAAI,2CACL,EAAKf,MAGd,IAAIgB,EAAY,CACdC,OAAQ,mBACRC,KAAM,EAAK1B,MAAM2B,KAAX,MAGJC,EAAOC,KAAKC,UAAUN,GAE1B,OADAN,OAAOC,OAAOC,OAAOC,QAAQU,YAAYH,GAClCJ,EAKP,OADAF,QAAQC,IAAI,0CACL,EAAKf,OAhE0B,EAoElCwB,aAAe,SAACR,EACtBS,GACA,EAAKC,UACH,SAACC,GAAD,mBAAC,eACIA,GADL,IAEET,KAAMF,EAAUE,KAChBU,UAAWH,OAGfX,QAAQC,IAAI,2CA7E4B,EAgFlCc,YAAc,SAACC,GACrBC,YAAW,WACT,IAAIC,EAAM,EAAKvB,iBAEf,EAAKe,aAAaQ,GAAK,GACvBlB,QAAQC,IAAI,uCACXe,IAtFqC,EAiGlC5B,UAAY,SAAC+B,GACnB,IAAIC,EAAQD,EAAME,OAAOC,QACzB,EAAKV,SAAS,CAACE,UAAWM,KAnGc,EAsGlC7B,SAAW,WACjB,EAAKqB,SAAS,CAAEW,WAAW,KAvGa,EA0GlC9B,QAAU,WAChB,EAAKmB,SAAS,CAAEW,WAAW,KAvG3B,IAAMnB,EAAO,EAAK1B,MAAM2B,KAAX,KACPpB,EAAiB,EAAKP,MAAM2B,KAAX,eAGjBmB,EAAe,CACnBpB,KAAMA,EACNnB,eAAgBA,EAChB6B,YAAW7B,EACXwC,MANY,EAAK/C,MAAM2B,KAAX,OAN0B,OAexC,EAAKnB,MAAL,eACKsC,GAIDvC,GAEF,EAAKU,iBAtBiC,E,sDAyF1C,WACM+B,KAAKxC,MAAM4B,WACbY,KAAKxC,MAAMkB,MAAQsB,KAAKhD,MAAM2B,KAAX,MAEnBqB,KAAKX,YAAYW,KAAKxC,MAAMuC,W,GA/FPE,KAiHZC,cAAwBnD,GCxIvCoD,IAASlD,OACP,kBAAC,IAAMmD,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ddfac3eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"poCheckboxLabel\":\"style_poCheckboxLabel__2IHB4\",\"poCheckboxSpan\":\"style_poCheckboxSpan__ltXcy\",\"poCheckbox\":\"style_poCheckbox__3Q56z\"};","import {\n  ComponentProps,\n  withStreamlitConnection,\n  StreamlitComponentBase,\n  Streamlit,\n} from 'streamlit-component-lib'\nimport React, { \n  ReactNode } from 'react'\n\nimport styles from './style.module.scss';\n\ninterface State {\n  action: string\n  defaultChecked: boolean\n  data: string\n  delay: number\n  isFocused: boolean\n  isChecked: boolean\n}\n\ndeclare global {\n  interface Window {\n    chrome: any\n    genPollinationToken: any\n  }\n}\n\nclass SendSettings extends StreamlitComponentBase<State> {\n\n  public constructor(props: ComponentProps) {\n    super(props)\n\n    // Values from user input\n    const data = this.props.args['data'] as string\n    const defaultChecked = this.props.args['defaultChecked'] as boolean\n    const delay = this.props.args['delay'] as number\n\n    const initialState = {\n      data: data,\n      defaultChecked: defaultChecked,\n      isChecked: defaultChecked ? true : false,\n      delay: delay\n    } as State\n\n    this.state = {\n      ...initialState\n    };\n    \n    // Send message to DotNet\n    if (defaultChecked)\n    {\n      this._sendMessageTo();\n    }\n  }\n\n  public render = (): ReactNode => {\n    return (\n      <label className={styles.poCheckboxLabel}>\n        <input \n          className={styles.poCheckbox}\n          type='checkbox' \n          defaultChecked={this.state.defaultChecked} \n          onChange={this._onChange} \n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}/>\n        <span className={styles.poCheckboxSpan}>\n          Send Settings\n        </span>\n      </label>\n    )\n  }\n\n  private _sendMessageTo = (): State => {\n    if (typeof window.parent.chrome != 'undefined') {\n      if (typeof window.parent.chrome.webview == 'undefined')\n      {\n        console.log('[POLLINATION-DEBUG]: webview not found.');\n        return this.state;\n      }\n      \n      var msgObject = {\n        action: 'SetModelSettings',\n        data: this.props.args['data']\n      } as State;\n\n      var json = JSON.stringify(msgObject);\n      window.parent.chrome.webview.postMessage(json);\n      return msgObject;\n    }\n    else\n    {\n      console.log('[POLLINATION-DEBUG]: chrome not found.');\n      return this.state;\n    }\n  }\n\n  private _setStateNow = (msgObject: State, \n    status: boolean): void =>{\n    this.setState(\n      (prevState) => ({ \n        ...prevState, \n        data: msgObject.data,\n        isChecked: status\n      })\n    );\n    console.log('[POLLINATION-DEBUG]: JSON string sent.');\n  }\n\n  private _autoUpdate = (ms: number) : void => {\n    setTimeout(() => {\n      let msg = this._sendMessageTo();\n      // Save data inside the state\n      this._setStateNow(msg, true);\n      console.log('[POLLINATION-DEBUG]: auto-update.');\n    }, ms);\n  }\n\n  componentDidUpdate() {\n    if (this.state.isChecked && \n      this.state.data != this.props.args['data'])\n    {\n      this._autoUpdate(this.state.delay);\n    }\n  }\n\n  private _onChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    let check = event.target.checked;\n    this.setState({isChecked: check})\n  }\n\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\nexport default withStreamlitConnection(SendSettings)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport SendSettings from \"./SendSettings\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <SendSettings />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}