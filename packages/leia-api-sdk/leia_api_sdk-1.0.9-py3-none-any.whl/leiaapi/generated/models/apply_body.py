# coding: utf-8

"""
    LEIA RESTful API for AI

    Leia API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@leia.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplyBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_processing': 'bool',
        'callback_headers': 'object',
        'callback_url': 'str',
        'execute_after_id': 'str',
        'format_type': 'FormatTypes',
        'model_params': 'object',
        'page_range': 'str',
        'tag': 'str'
    }

    attribute_map = {
        'block_processing': 'block_processing',
        'callback_headers': 'callback_headers',
        'callback_url': 'callback_url',
        'execute_after_id': 'execute_after_id',
        'format_type': 'format_type',
        'model_params': 'model_params',
        'page_range': 'page_range',
        'tag': 'tag'
    }

    def __init__(self, block_processing=None, callback_headers=None, callback_url=None, execute_after_id=None, format_type=None, model_params=None, page_range=None, tag=None):  # noqa: E501
        """ApplyBody - a model defined in Swagger"""  # noqa: E501
        self._block_processing = None
        self._callback_headers = None
        self._callback_url = None
        self._execute_after_id = None
        self._format_type = None
        self._model_params = None
        self._page_range = None
        self._tag = None
        self.discriminator = None
        if block_processing is not None:
            self.block_processing = block_processing
        if callback_headers is not None:
            self.callback_headers = callback_headers
        if callback_url is not None:
            self.callback_url = callback_url
        if execute_after_id is not None:
            self.execute_after_id = execute_after_id
        if format_type is not None:
            self.format_type = format_type
        if model_params is not None:
            self.model_params = model_params
        if page_range is not None:
            self.page_range = page_range
        if tag is not None:
            self.tag = tag

    @property
    def block_processing(self):
        """Gets the block_processing of this ApplyBody.  # noqa: E501


        :return: The block_processing of this ApplyBody.  # noqa: E501
        :rtype: bool
        """
        return self._block_processing

    @block_processing.setter
    def block_processing(self, block_processing):
        """Sets the block_processing of this ApplyBody.


        :param block_processing: The block_processing of this ApplyBody.  # noqa: E501
        :type: bool
        """

        self._block_processing = block_processing

    @property
    def callback_headers(self):
        """Gets the callback_headers of this ApplyBody.  # noqa: E501


        :return: The callback_headers of this ApplyBody.  # noqa: E501
        :rtype: object
        """
        return self._callback_headers

    @callback_headers.setter
    def callback_headers(self, callback_headers):
        """Sets the callback_headers of this ApplyBody.


        :param callback_headers: The callback_headers of this ApplyBody.  # noqa: E501
        :type: object
        """

        self._callback_headers = callback_headers

    @property
    def callback_url(self):
        """Gets the callback_url of this ApplyBody.  # noqa: E501


        :return: The callback_url of this ApplyBody.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this ApplyBody.


        :param callback_url: The callback_url of this ApplyBody.  # noqa: E501
        :type: str
        """

        self._callback_url = callback_url

    @property
    def execute_after_id(self):
        """Gets the execute_after_id of this ApplyBody.  # noqa: E501


        :return: The execute_after_id of this ApplyBody.  # noqa: E501
        :rtype: str
        """
        return self._execute_after_id

    @execute_after_id.setter
    def execute_after_id(self, execute_after_id):
        """Sets the execute_after_id of this ApplyBody.


        :param execute_after_id: The execute_after_id of this ApplyBody.  # noqa: E501
        :type: str
        """

        self._execute_after_id = execute_after_id

    @property
    def format_type(self):
        """Gets the format_type of this ApplyBody.  # noqa: E501


        :return: The format_type of this ApplyBody.  # noqa: E501
        :rtype: FormatTypes
        """
        return self._format_type

    @format_type.setter
    def format_type(self, format_type):
        """Sets the format_type of this ApplyBody.


        :param format_type: The format_type of this ApplyBody.  # noqa: E501
        :type: FormatTypes
        """

        self._format_type = format_type

    @property
    def model_params(self):
        """Gets the model_params of this ApplyBody.  # noqa: E501


        :return: The model_params of this ApplyBody.  # noqa: E501
        :rtype: object
        """
        return self._model_params

    @model_params.setter
    def model_params(self, model_params):
        """Sets the model_params of this ApplyBody.


        :param model_params: The model_params of this ApplyBody.  # noqa: E501
        :type: object
        """

        self._model_params = model_params

    @property
    def page_range(self):
        """Gets the page_range of this ApplyBody.  # noqa: E501


        :return: The page_range of this ApplyBody.  # noqa: E501
        :rtype: str
        """
        return self._page_range

    @page_range.setter
    def page_range(self, page_range):
        """Sets the page_range of this ApplyBody.


        :param page_range: The page_range of this ApplyBody.  # noqa: E501
        :type: str
        """

        self._page_range = page_range

    @property
    def tag(self):
        """Gets the tag of this ApplyBody.  # noqa: E501


        :return: The tag of this ApplyBody.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ApplyBody.


        :param tag: The tag of this ApplyBody.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplyBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplyBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
