# coding: utf-8

"""
    LEIA RESTful API for AI

    Leia API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@leia.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransformBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_processing': 'bool',
        'callback_headers': 'object',
        'callback_url': 'str',
        'execute_after_id': 'str',
        'input_tag': 'str',
        'output_tag': 'str',
        'page_range': 'str',
        'transform_params': 'object'
    }

    attribute_map = {
        'block_processing': 'block_processing',
        'callback_headers': 'callback_headers',
        'callback_url': 'callback_url',
        'execute_after_id': 'execute_after_id',
        'input_tag': 'input_tag',
        'output_tag': 'output_tag',
        'page_range': 'page_range',
        'transform_params': 'transform_params'
    }

    def __init__(self, block_processing=None, callback_headers=None, callback_url=None, execute_after_id=None, input_tag=None, output_tag=None, page_range=None, transform_params=None):  # noqa: E501
        """TransformBody - a model defined in Swagger"""  # noqa: E501
        self._block_processing = None
        self._callback_headers = None
        self._callback_url = None
        self._execute_after_id = None
        self._input_tag = None
        self._output_tag = None
        self._page_range = None
        self._transform_params = None
        self.discriminator = None
        if block_processing is not None:
            self.block_processing = block_processing
        if callback_headers is not None:
            self.callback_headers = callback_headers
        if callback_url is not None:
            self.callback_url = callback_url
        if execute_after_id is not None:
            self.execute_after_id = execute_after_id
        if input_tag is not None:
            self.input_tag = input_tag
        if output_tag is not None:
            self.output_tag = output_tag
        if page_range is not None:
            self.page_range = page_range
        if transform_params is not None:
            self.transform_params = transform_params

    @property
    def block_processing(self):
        """Gets the block_processing of this TransformBody.  # noqa: E501


        :return: The block_processing of this TransformBody.  # noqa: E501
        :rtype: bool
        """
        return self._block_processing

    @block_processing.setter
    def block_processing(self, block_processing):
        """Sets the block_processing of this TransformBody.


        :param block_processing: The block_processing of this TransformBody.  # noqa: E501
        :type: bool
        """

        self._block_processing = block_processing

    @property
    def callback_headers(self):
        """Gets the callback_headers of this TransformBody.  # noqa: E501


        :return: The callback_headers of this TransformBody.  # noqa: E501
        :rtype: object
        """
        return self._callback_headers

    @callback_headers.setter
    def callback_headers(self, callback_headers):
        """Sets the callback_headers of this TransformBody.


        :param callback_headers: The callback_headers of this TransformBody.  # noqa: E501
        :type: object
        """

        self._callback_headers = callback_headers

    @property
    def callback_url(self):
        """Gets the callback_url of this TransformBody.  # noqa: E501


        :return: The callback_url of this TransformBody.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this TransformBody.


        :param callback_url: The callback_url of this TransformBody.  # noqa: E501
        :type: str
        """

        self._callback_url = callback_url

    @property
    def execute_after_id(self):
        """Gets the execute_after_id of this TransformBody.  # noqa: E501


        :return: The execute_after_id of this TransformBody.  # noqa: E501
        :rtype: str
        """
        return self._execute_after_id

    @execute_after_id.setter
    def execute_after_id(self, execute_after_id):
        """Sets the execute_after_id of this TransformBody.


        :param execute_after_id: The execute_after_id of this TransformBody.  # noqa: E501
        :type: str
        """

        self._execute_after_id = execute_after_id

    @property
    def input_tag(self):
        """Gets the input_tag of this TransformBody.  # noqa: E501


        :return: The input_tag of this TransformBody.  # noqa: E501
        :rtype: str
        """
        return self._input_tag

    @input_tag.setter
    def input_tag(self, input_tag):
        """Sets the input_tag of this TransformBody.


        :param input_tag: The input_tag of this TransformBody.  # noqa: E501
        :type: str
        """

        self._input_tag = input_tag

    @property
    def output_tag(self):
        """Gets the output_tag of this TransformBody.  # noqa: E501


        :return: The output_tag of this TransformBody.  # noqa: E501
        :rtype: str
        """
        return self._output_tag

    @output_tag.setter
    def output_tag(self, output_tag):
        """Sets the output_tag of this TransformBody.


        :param output_tag: The output_tag of this TransformBody.  # noqa: E501
        :type: str
        """

        self._output_tag = output_tag

    @property
    def page_range(self):
        """Gets the page_range of this TransformBody.  # noqa: E501


        :return: The page_range of this TransformBody.  # noqa: E501
        :rtype: str
        """
        return self._page_range

    @page_range.setter
    def page_range(self, page_range):
        """Sets the page_range of this TransformBody.


        :param page_range: The page_range of this TransformBody.  # noqa: E501
        :type: str
        """

        self._page_range = page_range

    @property
    def transform_params(self):
        """Gets the transform_params of this TransformBody.  # noqa: E501


        :return: The transform_params of this TransformBody.  # noqa: E501
        :rtype: object
        """
        return self._transform_params

    @transform_params.setter
    def transform_params(self, transform_params):
        """Sets the transform_params of this TransformBody.


        :param transform_params: The transform_params of this TransformBody.  # noqa: E501
        :type: object
        """

        self._transform_params = transform_params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransformBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransformBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
