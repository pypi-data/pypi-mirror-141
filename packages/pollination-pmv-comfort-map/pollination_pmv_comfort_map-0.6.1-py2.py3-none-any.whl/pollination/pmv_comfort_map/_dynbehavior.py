from pollination_dsl.dag import Inputs, DAG, task
from dataclasses import dataclass
from typing import Dict, List

from pollination.ladybug_comfort.map import IrradianceContribMap


@dataclass
class DynamicBehaviorEntryPoint(DAG):
    """Entry point for dynamic aperture behavior."""

    result_sql = Inputs.file(
        description='A SQLite file that was generated by EnergyPlus and contains '
        'window transmittance results.',
        extensions=['sql', 'db', 'sqlite']
    )

    direct_specular = Inputs.file(
        description='An .ill containing the direct irradiance for the '
        'specular version of the aperture group.',
        extensions=['ill', 'irr']
    )

    indirect_specular = Inputs.file(
        description='An .ill containing indirect irradiance for the '
        'specular version of the aperture group.',
        extensions=['ill', 'irr']
    )

    ref_specular = Inputs.file(
        description='An .ill containing ground-reflected irradiance for the '
        'specular version of the aperture group.', extensions=['ill', 'irr']
    )

    indirect_diffuse = Inputs.file(
        description='An .ill containing indirect irradiance for the '
        'diffuse version of the aperture group.',
        extensions=['ill', 'irr']
    )

    ref_diffuse = Inputs.file(
        description='An .ill containing ground-reflected irradiance for the '
        'diffuse version of the aperture group.', extensions=['ill', 'irr']
    )

    sun_up_hours = Inputs.file(
        description='A sun-up-hours.txt file output by Radiance and aligns with the '
        'input irradiance files.'
    )

    aperture_id = Inputs.str(
        description='Text string for the identifier of the aperture associated '
        'with the irradiance.'
    )

    grid_name = Inputs.str(
        description='Sensor grid file name (used to name the final result files).'
    )

    @task(template=IrradianceContribMap)
    def create_irradiance_contrib_map(
        self,
        result_sql=result_sql,
        direct_specular=direct_specular,
        indirect_specular=indirect_specular,
        ref_specular=ref_specular,
        indirect_diffuse=indirect_diffuse,
        ref_diffuse=ref_diffuse,
        sun_up_hours=sun_up_hours,
        aperture_id=aperture_id,
        name=grid_name
    ) -> List[Dict]:
        return [
            {
                'from': IrradianceContribMap()._outputs.result_folder,
                'to': 'dynamic/final/{{self.name}}/{{self.aperture_id}}'
            }
        ]
