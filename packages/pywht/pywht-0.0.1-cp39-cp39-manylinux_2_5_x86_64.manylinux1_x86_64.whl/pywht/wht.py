
# python wrapper for package github.com/rudderlabs/wht-core-lib/wht within overall package pywht
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg -vm=python3 -output=out -name=pywht github.com/rudderlabs/wht-core-lib/wht

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from pywht import _pywht
from pywht import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from pywht import wht
# and then refer to everything using wht. prefix
# packages imported by this package listed below:

from pywht import sources
from pywht import base
from pywht import features
from pywht import identity



# ---- Types ---

# Python type for slice []wht.ResourceDeclSpec
class Slice_wht_ResourceDeclSpec(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pywht.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pywht.IncRef(self.handle)
		else:
			self.handle = _pywht.Slice_wht_ResourceDeclSpec_CTor()
			_pywht.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_wht_ResourceDeclSpec.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_pywht.DecRef(self.handle)
	def __str__(self):
		s = 'wht.Slice_wht_ResourceDeclSpec len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'wht.Slice_wht_ResourceDeclSpec([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _pywht.Slice_wht_ResourceDeclSpec_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _pywht.Slice_wht_ResourceDeclSpec_len(self.handle)
				return Slice_wht_ResourceDeclSpec(handle=_pywht.Slice_wht_ResourceDeclSpec_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return ResourceDeclSpec(handle=_pywht.Slice_wht_ResourceDeclSpec_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_pywht.Slice_wht_ResourceDeclSpec_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_wht_ResourceDeclSpec.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _pywht.Slice_wht_ResourceDeclSpec_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_pywht.Slice_wht_ResourceDeclSpec_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct wht.ResourceFileSpec
class ResourceFileSpec(go.GoClass):
	"""Any YAML file in project directory, except the project file itself, is parsed with this struct.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pywht.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pywht.IncRef(self.handle)
		else:
			self.handle = _pywht.wht_ResourceFileSpec_CTor()
			_pywht.IncRef(self.handle)
			if  0 < len(args):
				self.Resources = args[0]
			if "Resources" in kwargs:
				self.Resources = kwargs["Resources"]
	def __del__(self):
		_pywht.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'wht.ResourceFileSpec{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'wht.ResourceFileSpec ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Resources(self):
		return Slice_wht_ResourceDeclSpec(handle=_pywht.wht_ResourceFileSpec_Resources_Get(self.handle))
	@Resources.setter
	def Resources(self, value):
		if isinstance(value, go.GoClass):
			_pywht.wht_ResourceFileSpec_Resources_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))

# Python type for struct wht.WhtProject
class WhtProject(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pywht.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pywht.IncRef(self.handle)
		else:
			self.handle = _pywht.wht_WhtProject_CTor()
			_pywht.IncRef(self.handle)
	def __del__(self):
		_pywht.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'wht.WhtProject{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'wht.WhtProject ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Compile(self, goRun=False):
		"""Compile() 
		
		Method that runs various models.
		"""
		_pywht.wht_WhtProject_Compile(self.handle, goRun)

# Python type for struct wht.ModeRefBuildSpec
class ModeRefBuildSpec(go.GoClass):
	"""Reference to any model is indicated by this struct.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pywht.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pywht.IncRef(self.handle)
		else:
			self.handle = _pywht.wht_ModeRefBuildSpec_CTor()
			_pywht.IncRef(self.handle)
	def __del__(self):
		_pywht.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'wht.ModeRefBuildSpec{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'wht.ModeRefBuildSpec ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'

# Python type for struct wht.ProjectFileSpec
class ProjectFileSpec(go.GoClass):
	"""Project File YAML is parsed with this struct.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pywht.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pywht.IncRef(self.handle)
		else:
			self.handle = _pywht.wht_ProjectFileSpec_CTor()
			_pywht.IncRef(self.handle)
	def __del__(self):
		_pywht.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'wht.ProjectFileSpec{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'wht.ProjectFileSpec ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'

# Python type for struct wht.ResourceDeclSpec
class ResourceDeclSpec(go.GoClass):
	"""Any single resource is parsed via this struct.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pywht.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pywht.IncRef(self.handle)
		else:
			self.handle = _pywht.wht_ResourceDeclSpec_CTor()
			_pywht.IncRef(self.handle)
			if  0 < len(args):
				self.ResourceType = args[0]
			if "ResourceType" in kwargs:
				self.ResourceType = kwargs["ResourceType"]
	def __del__(self):
		_pywht.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'wht.ResourceDeclSpec{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'wht.ResourceDeclSpec ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def ResourceType(self):
		return _pywht.wht_ResourceDeclSpec_ResourceType_Get(self.handle)
	@ResourceType.setter
	def ResourceType(self, value):
		if isinstance(value, go.GoClass):
			_pywht.wht_ResourceDeclSpec_ResourceType_Set(self.handle, value.handle)
		else:
			_pywht.wht_ResourceDeclSpec_ResourceType_Set(self.handle, value)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def LoadProject(projectFolder):
	"""LoadProject(str projectFolder) object
	
	Method to load the WHT Project.
	"""
	return WhtProject(handle=_pywht.wht_LoadProject(projectFolder))


# ---- Functions ---


