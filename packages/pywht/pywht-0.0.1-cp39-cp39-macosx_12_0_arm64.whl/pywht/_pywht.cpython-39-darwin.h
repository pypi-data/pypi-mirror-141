/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/rudderlabs/wht-core-lib/pywht */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "pywht.go"





// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void GoPyInit();

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
extern void DecRef(long long int handle);

// IncRef increments the reference count for the specified handle.
extern void IncRef(long long int handle);

// NumHandles returns the number of handles currently in use.
extern GoInt NumHandles();

// --- wrapping slice: []bool ---
extern long long int Slice_bool_CTor();
extern GoInt Slice_bool_len(long long int handle);
extern char Slice_bool_elem(long long int handle, GoInt _idx);
extern long long int Slice_bool_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_bool_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_bool_append(long long int handle, char _vl);

// --- wrapping slice: []byte ---
extern long long int Slice_byte_CTor();
extern GoInt Slice_byte_len(long long int handle);
extern char Slice_byte_elem(long long int handle, GoInt _idx);
extern long long int Slice_byte_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_byte_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_byte_append(long long int handle, char _vl);

// --- wrapping slice: []float32 ---
extern long long int Slice_float32_CTor();
extern GoInt Slice_float32_len(long long int handle);
extern float Slice_float32_elem(long long int handle, GoInt _idx);
extern long long int Slice_float32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float32_set(long long int handle, GoInt _idx, float _vl);
extern void Slice_float32_append(long long int handle, float _vl);

// --- wrapping slice: []float64 ---
extern long long int Slice_float64_CTor();
extern GoInt Slice_float64_len(long long int handle);
extern double Slice_float64_elem(long long int handle, GoInt _idx);
extern long long int Slice_float64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float64_set(long long int handle, GoInt _idx, double _vl);
extern void Slice_float64_append(long long int handle, double _vl);

// --- wrapping slice: []int ---
extern long long int Slice_int_CTor();
extern GoInt Slice_int_len(long long int handle);
extern long long int Slice_int_elem(long long int handle, GoInt _idx);
extern long long int Slice_int_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int_append(long long int handle, long long int _vl);

// --- wrapping slice: []int16 ---
extern long long int Slice_int16_CTor();
extern GoInt Slice_int16_len(long long int handle);
extern short Slice_int16_elem(long long int handle, GoInt _idx);
extern long long int Slice_int16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int16_set(long long int handle, GoInt _idx, short _vl);
extern void Slice_int16_append(long long int handle, short _vl);

// --- wrapping slice: []int32 ---
extern long long int Slice_int32_CTor();
extern GoInt Slice_int32_len(long long int handle);
extern long int Slice_int32_elem(long long int handle, GoInt _idx);
extern long long int Slice_int32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int32_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_int32_append(long long int handle, long int _vl);

// --- wrapping slice: []int64 ---
extern long long int Slice_int64_CTor();
extern GoInt Slice_int64_len(long long int handle);
extern long long int Slice_int64_elem(long long int handle, GoInt _idx);
extern long long int Slice_int64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int64_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int64_append(long long int handle, long long int _vl);

// --- wrapping slice: []int8 ---
extern long long int Slice_int8_CTor();
extern GoInt Slice_int8_len(long long int handle);
extern char Slice_int8_elem(long long int handle, GoInt _idx);
extern long long int Slice_int8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int8_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_int8_append(long long int handle, char _vl);

// --- wrapping slice: []rune ---
extern long long int Slice_rune_CTor();
extern GoInt Slice_rune_len(long long int handle);
extern long int Slice_rune_elem(long long int handle, GoInt _idx);
extern long long int Slice_rune_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_rune_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_rune_append(long long int handle, long int _vl);

// --- wrapping slice: []string ---
extern long long int Slice_string_CTor();
extern GoInt Slice_string_len(long long int handle);
extern char* Slice_string_elem(long long int handle, GoInt _idx);
extern long long int Slice_string_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_string_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_string_append(long long int handle, char* _vl);

// --- wrapping slice: []uint ---
extern long long int Slice_uint_CTor();
extern GoInt Slice_uint_len(long long int handle);
extern long long unsigned int Slice_uint_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint16 ---
extern long long int Slice_uint16_CTor();
extern GoInt Slice_uint16_len(long long int handle);
extern unsigned short Slice_uint16_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint16_set(long long int handle, GoInt _idx, unsigned short _vl);
extern void Slice_uint16_append(long long int handle, unsigned short _vl);

// --- wrapping slice: []uint32 ---
extern long long int Slice_uint32_CTor();
extern GoInt Slice_uint32_len(long long int handle);
extern long unsigned int Slice_uint32_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint32_set(long long int handle, GoInt _idx, long unsigned int _vl);
extern void Slice_uint32_append(long long int handle, long unsigned int _vl);

// --- wrapping slice: []uint64 ---
extern long long int Slice_uint64_CTor();
extern GoInt Slice_uint64_len(long long int handle);
extern long long unsigned int Slice_uint64_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint64_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint64_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint8 ---
extern long long int Slice_uint8_CTor();
extern GoInt Slice_uint8_len(long long int handle);
extern unsigned char Slice_uint8_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint8_set(long long int handle, GoInt _idx, unsigned char _vl);
extern void Slice_uint8_append(long long int handle, unsigned char _vl);

// --- wrapping slice: []wht.ResourceDeclSpec ---
extern long long int Slice_wht_ResourceDeclSpec_CTor();
extern GoInt Slice_wht_ResourceDeclSpec_len(long long int handle);
extern long long int Slice_wht_ResourceDeclSpec_elem(long long int handle, GoInt _idx);
extern long long int Slice_wht_ResourceDeclSpec_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_wht_ResourceDeclSpec_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_wht_ResourceDeclSpec_append(long long int handle, long long int _vl);

// --- wrapping struct: wht.ResourceFileSpec ---
extern long long int wht_ResourceFileSpec_CTor();
extern long long int wht_ResourceFileSpec_Resources_Get(long long int handle);
extern void wht_ResourceFileSpec_Resources_Set(long long int handle, long long int val);

// --- wrapping struct: wht.WhtProject ---
extern long long int wht_WhtProject_CTor();
extern void wht_WhtProject_Compile(long long int _handle, char goRun);

// --- wrapping struct: wht.ModeRefBuildSpec ---
extern long long int wht_ModeRefBuildSpec_CTor();

// --- wrapping struct: wht.ProjectFileSpec ---
extern long long int wht_ProjectFileSpec_CTor();

// --- wrapping struct: wht.ResourceDeclSpec ---
extern long long int wht_ResourceDeclSpec_CTor();
extern char* wht_ResourceDeclSpec_ResourceType_Get(long long int handle);
extern void wht_ResourceDeclSpec_ResourceType_Set(long long int handle, char* val);
extern long long int wht_LoadProject(char* projectFolder);

// --- wrapping slice: []base.WhtModel ---
extern long long int Slice_base_WhtModel_CTor();
extern GoInt Slice_base_WhtModel_len(long long int handle);
extern long long int Slice_base_WhtModel_elem(long long int handle, GoInt _idx);
extern long long int Slice_base_WhtModel_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_base_WhtModel_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_base_WhtModel_append(long long int handle, long long int _vl);
extern char* base_IWhtModel_Compile(long long int _handle, long long int whtContext);
extern long long int base_IWhtModel_GetInputs(long long int _handle);
extern char* base_IWhtModel_GetSql(long long int _handle);
extern long long int base_IWhtModel_Run(long long int _handle, long long int whtContext, long long int seqNo);

// --- wrapping struct: base.WhtBuildSpec ---
extern long long int base_WhtBuildSpec_CTor();

// --- wrapping struct: base.WhtContext ---
extern long long int base_WhtContext_CTor();

// --- wrapping struct: base.WhtMaterial ---
extern long long int base_WhtMaterial_CTor();
extern long long int base_WhtMaterial_Model_Get(long long int handle);
extern void base_WhtMaterial_Model_Set(long long int handle, long long int val);
extern char* base_WhtMaterial_Name_Get(long long int handle);
extern void base_WhtMaterial_Name_Set(long long int handle, char* val);
extern long long int base_WhtMaterial_IWhtContext_Get(long long int handle);
extern void base_WhtMaterial_IWhtContext_Set(long long int handle, long long int val);
extern long long int base_WhtMaterial_SeqNo_Get(long long int handle);
extern void base_WhtMaterial_SeqNo_Set(long long int handle, long long int val);

// --- wrapping struct: base.WhtModel ---
extern long long int base_WhtModel_CTor();

// --- wrapping struct: base.WhtModelRef ---
extern long long int base_WhtModelRef_CTor();

// --- wrapping struct: base.BaseWhtModel ---
extern long long int base_BaseWhtModel_CTor();

// --- wrapping struct: base.SqlTemplate ---
extern long long int base_SqlTemplate_CTor();
extern long long int base_SqlTemplate_Options_Get(long long int handle);
extern void base_SqlTemplate_Options_Set(long long int handle, long long int val);

// --- wrapping slice: []features.FeatureIdentifierDeclaration ---
extern long long int Slice_features_FeatureIdentifierDeclaration_CTor();
extern GoInt Slice_features_FeatureIdentifierDeclaration_len(long long int handle);
extern long long int Slice_features_FeatureIdentifierDeclaration_elem(long long int handle, GoInt _idx);
extern long long int Slice_features_FeatureIdentifierDeclaration_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_features_FeatureIdentifierDeclaration_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_features_FeatureIdentifierDeclaration_append(long long int handle, long long int _vl);

// --- wrapping slice: []identity.IdEdgeSignal ---
extern long long int Slice_identity_IdEdgeSignal_CTor();
extern GoInt Slice_identity_IdEdgeSignal_len(long long int handle);
extern long long int Slice_identity_IdEdgeSignal_elem(long long int handle, GoInt _idx);
extern long long int Slice_identity_IdEdgeSignal_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_identity_IdEdgeSignal_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_identity_IdEdgeSignal_append(long long int handle, long long int _vl);

// --- wrapping slice: []identity.IdStitchingModelInput ---
extern long long int Slice_identity_IdStitchingModelInput_CTor();
extern GoInt Slice_identity_IdStitchingModelInput_len(long long int handle);
extern long long int Slice_identity_IdStitchingModelInput_elem(long long int handle, GoInt _idx);
extern long long int Slice_identity_IdStitchingModelInput_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_identity_IdStitchingModelInput_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_identity_IdStitchingModelInput_append(long long int handle, long long int _vl);

// --- wrapping struct: features.FeatureVarDeclaration ---
extern long long int features_FeatureVarDeclaration_CTor();
extern char* features_FeatureVarDeclaration_Feature_Get(long long int handle);
extern void features_FeatureVarDeclaration_Feature_Set(long long int handle, char* val);
extern char* features_FeatureVarDeclaration_Description_Get(long long int handle);
extern void features_FeatureVarDeclaration_Description_Set(long long int handle, char* val);
extern char* features_FeatureVarDeclaration_Value_Get(long long int handle);
extern void features_FeatureVarDeclaration_Value_Set(long long int handle, char* val);

// --- wrapping struct: features.MacroDeclaration ---
extern long long int features_MacroDeclaration_CTor();
extern char* features_MacroDeclaration_Macro_Get(long long int handle);
extern void features_MacroDeclaration_Macro_Set(long long int handle, char* val);
extern char* features_MacroDeclaration_Description_Get(long long int handle);
extern void features_MacroDeclaration_Description_Set(long long int handle, char* val);
extern char* features_MacroDeclaration_Value_Get(long long int handle);
extern void features_MacroDeclaration_Value_Set(long long int handle, char* val);

// --- wrapping struct: features.TableVarDeclaration ---
extern long long int features_TableVarDeclaration_CTor();
extern char* features_TableVarDeclaration_TableVar_Get(long long int handle);
extern void features_TableVarDeclaration_TableVar_Set(long long int handle, char* val);
extern char* features_TableVarDeclaration_Description_Get(long long int handle);
extern void features_TableVarDeclaration_Description_Set(long long int handle, char* val);
extern char* features_TableVarDeclaration_Filter_Get(long long int handle);
extern void features_TableVarDeclaration_Filter_Set(long long int handle, char* val);
extern char* features_TableVarDeclaration_Value_Get(long long int handle);
extern void features_TableVarDeclaration_Value_Set(long long int handle, char* val);

// --- wrapping struct: features.EntityFeaturesModel ---
extern long long int features_EntityFeaturesModel_CTor();
extern long long int features_EntityFeaturesModel_Inputs_Get(long long int handle);
extern void features_EntityFeaturesModel_Inputs_Set(long long int handle, long long int val);
extern long long int features_EntityFeaturesModel_IdStitcher_Get(long long int handle);
extern void features_EntityFeaturesModel_IdStitcher_Set(long long int handle, long long int val);
extern void features_EntityFeaturesModel_Compile(long long int _handle, long long int whtContext, char goRun);

// --- wrapping struct: features.FeatureIdentifierDeclaration ---
extern long long int features_FeatureIdentifierDeclaration_CTor();

// --- wrapping struct: features.FeatureTableBuildSpec ---
extern long long int features_FeatureTableBuildSpec_CTor();
extern long long int features_FeatureTableBuildSpec_Features_Get(long long int handle);
extern void features_FeatureTableBuildSpec_Features_Set(long long int handle, long long int val);

// --- wrapping struct: identity.IdEdgeSignal ---
extern long long int identity_IdEdgeSignal_CTor();
extern long long int identity_IdEdgeSignal_ModelRef_Get(long long int handle);
extern void identity_IdEdgeSignal_ModelRef_Set(long long int handle, long long int val);
extern char* identity_IdEdgeSignal_IdSql1_Get(long long int handle);
extern void identity_IdEdgeSignal_IdSql1_Set(long long int handle, char* val);
extern char* identity_IdEdgeSignal_IdSql2_Get(long long int handle);
extern void identity_IdEdgeSignal_IdSql2_Set(long long int handle, char* val);

// --- wrapping struct: identity.IdStitchingBuildSpec ---
extern long long int identity_IdStitchingBuildSpec_CTor();

// --- wrapping struct: identity.IdStitchingModel ---
extern long long int identity_IdStitchingModel_CTor();
extern long long int identity_IdStitchingModel_Inputs_Get(long long int handle);
extern void identity_IdStitchingModel_Inputs_Set(long long int handle, long long int val);
extern long long int identity_IdStitchingModel_IdEdgeSignals_Get(long long int handle);
extern void identity_IdStitchingModel_IdEdgeSignals_Set(long long int handle, long long int val);

// --- wrapping struct: identity.IdStitchingModelInput ---
extern long long int identity_IdStitchingModelInput_CTor();
extern long long int identity_IdStitchingModelInput_Model_Get(long long int handle);
extern void identity_IdStitchingModelInput_Model_Set(long long int handle, long long int val);
extern char* identity_IdStitchingModelInput_IdSql_Get(long long int handle);
extern void identity_IdStitchingModelInput_IdSql_Set(long long int handle, char* val);

// --- wrapping struct: sources.ModelRefBuildSpec ---
extern long long int sources_ModelRefBuildSpec_CTor();

// --- wrapping struct: sources.ModelSourceBuildSpec ---
extern long long int sources_ModelSourceBuildSpec_CTor();

#ifdef __cplusplus
}
#endif
