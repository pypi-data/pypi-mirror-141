"""
WhtContext is passed in model.Compile and model.Run methods.
To start with, we use WhtProject itself. Later, we may make less imprecise and send only what is needed.

"""
# python wrapper for package github.com/rudderlabs/wht-core-lib/wht/base within overall package pywht
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg -vm=python3 -output=out -name=pywht github.com/rudderlabs/wht-core-lib/wht

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from pywht import _pywht
from pywht import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from pywht import base
# and then refer to everything using base. prefix
# packages imported by this package listed below:




# ---- Types ---

# Python type for slice []base.WhtModel
class Slice_base_WhtModel(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pywht.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pywht.IncRef(self.handle)
		else:
			self.handle = _pywht.Slice_base_WhtModel_CTor()
			_pywht.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_base_WhtModel.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_pywht.DecRef(self.handle)
	def __str__(self):
		s = 'base.Slice_base_WhtModel len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'base.Slice_base_WhtModel([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _pywht.Slice_base_WhtModel_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _pywht.Slice_base_WhtModel_len(self.handle)
				return Slice_base_WhtModel(handle=_pywht.Slice_base_WhtModel_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return WhtModel(handle=_pywht.Slice_base_WhtModel_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_pywht.Slice_base_WhtModel_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_base_WhtModel.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = _pywht.Slice_base_WhtModel_elem(self.handle, self.index)
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_pywht.Slice_base_WhtModel_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---

# Python type for interface base.IWhtBuildSpec
class IWhtBuildSpec(go.GoClass):
	"""All resource build specs comply with this interface.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pywht.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pywht.IncRef(self.handle)
		else:
			self.handle = 0

# Python type for interface base.IWhtModel
class IWhtModel(go.GoClass):
	"""A model is a table or a view that we may create in the warehouse.\nAll models conform to the IWhtModel interface.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pywht.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pywht.IncRef(self.handle)
		else:
			self.handle = 0
	def Compile(self, whtContext):
		"""Compile(object whtContext) str"""
		return _pywht.base_IWhtModel_Compile(self.handle, whtContext.handle)
	def GetInputs(self):
		"""GetInputs() []object, str"""
		return Slice_base_WhtModel(handle=_pywht.base_IWhtModel_GetInputs(self.handle))
	def GetSql(self):
		"""GetSql() str, str"""
		return _pywht.base_IWhtModel_GetSql(self.handle)
	def Run(self, whtContext, seqNo):
		"""Run(object whtContext, int seqNo) object, str"""
		return WhtMaterial(handle=_pywht.base_IWhtModel_Run(self.handle, whtContext.handle, seqNo))


# ---- Structs ---

# Python type for struct base.WhtBuildSpec
class WhtBuildSpec(go.GoClass):
	"""This struct acts as the base struct of all resource build specs.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pywht.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pywht.IncRef(self.handle)
		else:
			self.handle = _pywht.base_WhtBuildSpec_CTor()
			_pywht.IncRef(self.handle)
	def __del__(self):
		_pywht.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'base.WhtBuildSpec{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'base.WhtBuildSpec ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'

# Python type for struct base.WhtContext
class WhtContext(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pywht.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pywht.IncRef(self.handle)
		else:
			self.handle = _pywht.base_WhtContext_CTor()
			_pywht.IncRef(self.handle)
	def __del__(self):
		_pywht.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'base.WhtContext{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'base.WhtContext ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'

# Python type for struct base.WhtMaterial
class WhtMaterial(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pywht.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pywht.IncRef(self.handle)
		else:
			self.handle = _pywht.base_WhtMaterial_CTor()
			_pywht.IncRef(self.handle)
			if  0 < len(args):
				self.Model = args[0]
			if "Model" in kwargs:
				self.Model = kwargs["Model"]
			if  1 < len(args):
				self.Name = args[1]
			if "Name" in kwargs:
				self.Name = kwargs["Name"]
			if  2 < len(args):
				self.IWhtContext = args[2]
			if "IWhtContext" in kwargs:
				self.IWhtContext = kwargs["IWhtContext"]
			if  3 < len(args):
				self.SeqNo = args[3]
			if "SeqNo" in kwargs:
				self.SeqNo = kwargs["SeqNo"]
	def __del__(self):
		_pywht.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'base.WhtMaterial{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'base.WhtMaterial ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Model(self):
		return IWhtModel(handle=_pywht.base_WhtMaterial_Model_Get(self.handle))
	@Model.setter
	def Model(self, value):
		if isinstance(value, go.GoClass):
			_pywht.base_WhtMaterial_Model_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def Name(self):
		return _pywht.base_WhtMaterial_Name_Get(self.handle)
	@Name.setter
	def Name(self, value):
		if isinstance(value, go.GoClass):
			_pywht.base_WhtMaterial_Name_Set(self.handle, value.handle)
		else:
			_pywht.base_WhtMaterial_Name_Set(self.handle, value)
	@property
	def IWhtContext(self):
		return go.context_Context(handle=_pywht.base_WhtMaterial_IWhtContext_Get(self.handle))
	@IWhtContext.setter
	def IWhtContext(self, value):
		if isinstance(value, go.GoClass):
			_pywht.base_WhtMaterial_IWhtContext_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def SeqNo(self):
		return _pywht.base_WhtMaterial_SeqNo_Get(self.handle)
	@SeqNo.setter
	def SeqNo(self, value):
		if isinstance(value, go.GoClass):
			_pywht.base_WhtMaterial_SeqNo_Set(self.handle, value.handle)
		else:
			_pywht.base_WhtMaterial_SeqNo_Set(self.handle, value)

# Python type for struct base.WhtModel
class WhtModel(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pywht.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pywht.IncRef(self.handle)
		else:
			self.handle = _pywht.base_WhtModel_CTor()
			_pywht.IncRef(self.handle)
	def __del__(self):
		_pywht.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'base.WhtModel{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'base.WhtModel ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'

# Python type for struct base.WhtModelRef
class WhtModelRef(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pywht.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pywht.IncRef(self.handle)
		else:
			self.handle = _pywht.base_WhtModelRef_CTor()
			_pywht.IncRef(self.handle)
	def __del__(self):
		_pywht.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'base.WhtModelRef{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'base.WhtModelRef ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'

# Python type for struct base.BaseWhtModel
class BaseWhtModel(go.GoClass):
	"""Base class to all WHT models.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pywht.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pywht.IncRef(self.handle)
		else:
			self.handle = _pywht.base_BaseWhtModel_CTor()
			_pywht.IncRef(self.handle)
	def __del__(self):
		_pywht.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'base.BaseWhtModel{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'base.BaseWhtModel ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'

# Python type for struct base.SqlTemplate
class SqlTemplate(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_pywht.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_pywht.IncRef(self.handle)
		else:
			self.handle = _pywht.base_SqlTemplate_CTor()
			_pywht.IncRef(self.handle)
			if  13 < len(args):
				self.Options = args[13]
			if "Options" in kwargs:
				self.Options = kwargs["Options"]
	def __del__(self):
		_pywht.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'base.SqlTemplate{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'base.SqlTemplate ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Options(self):
		return go.Ptr_pongo2_Options(handle=_pywht.base_SqlTemplate_Options_Get(self.handle))
	@Options.setter
	def Options(self, value):
		if isinstance(value, go.GoClass):
			_pywht.base_SqlTemplate_Options_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---


