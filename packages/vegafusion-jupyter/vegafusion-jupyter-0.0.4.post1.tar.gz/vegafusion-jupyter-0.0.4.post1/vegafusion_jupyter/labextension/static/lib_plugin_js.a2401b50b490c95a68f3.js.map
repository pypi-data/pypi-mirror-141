{"version":3,"file":"lib_plugin_js.a2401b50b490c95a68f3.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AAC+D;AACrB;AACc;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yEAAsB;AACrC;AACA;AACA;AACA;AACA;AACA,iEAAe,aAAa,EAAC;AAC7B;AACA;AACA;AACA;AACA;AACA,cAAc,iDAAW;AACzB,iBAAiB,oDAAc;AAC/B,iBAAiB,oCAAa;AAC9B,KAAK;AACL;AACA;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAO,CAAC,uCAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACuE;AACf;AACjD,8BAA8B,iEAAc;AACnD;AACA,6CAA6C,uBAAuB,ygBAAygB;AAC7kB;AACA;AACA,4DAA4D,EAAE,6EAA0B;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,+BAA+B,iDAAW;AAC1C,uCAAuC,oDAAc;AACrD,8CAA8C;AAC9C,8BAA8B,iDAAW,EAAE;AAC3C,sCAAsC,oDAAc;AAC7C,6BAA6B,gEAAa;AACjD;AACA,gBAAgB,kBAAkB,QAAQ,iQAA0B;AACpE;AACA,gBAAgB,UAAU,QAAQ,8NAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://vegafusion-jupyter/./lib/plugin.js","webpack://vegafusion-jupyter/./lib/version.js","webpack://vegafusion-jupyter/./lib/widget.js"],"sourcesContent":["/*\n * VegaFusion\n * Copyright (C) 2022 Jon Mease\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public\n * License along with this program.\n * If not, see http://www.gnu.org/licenses/.\n */\nimport { IJupyterWidgetRegistry } from '@jupyter-widgets/base';\nimport * as widgetExports from './widget';\nimport { MODULE_NAME, MODULE_VERSION } from './version';\nconst EXTENSION_ID = 'vegafusion-jupyter:plugin';\n/**\n * The example plugin.\n */\nconst examplePlugin = {\n    id: EXTENSION_ID,\n    requires: [IJupyterWidgetRegistry],\n    activate: activateWidgetExtension,\n    autoStart: true,\n};\n// the \"as unknown as ...\" typecast above is solely to support JupyterLab 1\n// and 2 in the same codebase and should be removed when we migrate to Lumino.\nexport default examplePlugin;\n/**\n * Activate the widget extension.\n */\nfunction activateWidgetExtension(app, registry) {\n    registry.registerWidget({\n        name: MODULE_NAME,\n        version: MODULE_VERSION,\n        exports: widgetExports,\n    });\n}\n//# sourceMappingURL=plugin.js.map","/*\n * VegaFusion\n * Copyright (C) 2022 Jon Mease\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public\n * License along with this program.\n * If not, see http://www.gnu.org/licenses/.\n */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst data = require('../package.json');\n/**\n * The _model_module_version/_view_module_version this package implements.\n *\n * The html widget manager assumes that this is the same as the npm package\n * version number.\n */\nexport const MODULE_VERSION = data.version;\n/*\n * The current package name.\n */\nexport const MODULE_NAME = data.name;\n//# sourceMappingURL=version.js.map","/*\n * VegaFusion\n * Copyright (C) 2022 Jon Mease\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public\n * License along with this program.\n * If not, see http://www.gnu.org/licenses/.\n */\n// -----------------------------------------------------------\n// Dropdown menu implementation is based heavily on vega-embed\n// (https://github.com/vega/vega-embed) which is released\n// under the BSD-3-Clause License: https://github.com/vega/vega-embed/blob/next/LICENSE\nimport { DOMWidgetModel, DOMWidgetView, } from '@jupyter-widgets/base';\nimport { MODULE_NAME, MODULE_VERSION } from './version';\nexport class VegaFusionModel extends DOMWidgetModel {\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: VegaFusionModel.model_name, _model_module: VegaFusionModel.model_module, _model_module_version: VegaFusionModel.model_module_version, _view_name: VegaFusionModel.view_name, _view_module: VegaFusionModel.view_module, _view_module_version: VegaFusionModel.view_module_version, spec: null, full_vega_spec: null, client_vega_spec: null, server_vega_spec: null, vegafusion_handle: null, verbose: null, debounce_wait: 30, debounce_max_wait: 60, download_source_link: null, _request_msg: null, _response_msg: null });\n    }\n}\nVegaFusionModel.serializers = Object.assign(Object.assign({}, DOMWidgetModel.serializers), { \n    // Add any extra serializers here\n    _request_msg: {\n        serialize: (value) => {\n            if (value.buffer) {\n                return new DataView(value.buffer.slice(0));\n            }\n            else {\n                return null;\n            }\n        },\n    } });\nVegaFusionModel.model_name = 'VegaFusionModel';\nVegaFusionModel.model_module = MODULE_NAME;\nVegaFusionModel.model_module_version = MODULE_VERSION;\nVegaFusionModel.view_name = 'VegaFusionView'; // Set to null if no view\nVegaFusionModel.view_module = MODULE_NAME; // Set to null if no view\nVegaFusionModel.view_module_version = MODULE_VERSION;\nexport class VegaFusionView extends DOMWidgetView {\n    async render() {\n        const { embedVegaFusion } = await import(\"vegafusion-embed\");\n        this.embedVegaFusion = embedVegaFusion;\n        const { compile } = await import(\"vega-lite\");\n        this.vegalite_compile = compile;\n        this.value_changed();\n        this.model.on('change:spec', this.value_changed, this);\n        this.model.on('change:verbose', this.value_changed, this);\n        this.model.on('change:debounce_wait', this.value_changed, this);\n        this.model.on('change:debounce_max_wait', this.value_changed, this);\n        this.model.on('change:download_source_link', this.value_changed, this);\n        this.model.on('change:_response_msg', () => {\n            const msgBytes = this.model.get(\"_response_msg\");\n            if (msgBytes !== null) {\n                if (this.model.get(\"verbose\")) {\n                    console.log(\"VegaFusion(js): Received response\");\n                    console.log(msgBytes.buffer);\n                }\n                const bytes = new Uint8Array(msgBytes.buffer);\n                this.vegafusion_handle.receive(bytes);\n            }\n        });\n    }\n    value_changed() {\n        let spec = this.model.get('spec');\n        if (spec !== null) {\n            let parsed = JSON.parse(spec);\n            let vega_spec_json;\n            if (parsed[\"$schema\"].endsWith(\"schema/vega/v5.json\")) {\n                vega_spec_json = spec;\n            }\n            else {\n                // Assume we have a Vega-Lite spec, compile to vega\n                let vega_spec = this.vegalite_compile(parsed);\n                vega_spec_json = JSON.stringify(vega_spec.spec);\n            }\n            let config = {\n                verbose: this.model.get(\"verbose\") || false,\n                debounce_wait: this.model.get(\"debounce_wait\") || 30,\n                debounce_max_wait: this.model.get(\"debounce_max_wait\"),\n                download_source_link: this.model.get('download_source_link')\n            };\n            // this.vegafusion_handle = this.embedVegaFusion(\n            this.vegafusion_handle = this.embedVegaFusion(this.el, vega_spec_json, (request) => {\n                if (this.model.get(\"verbose\")) {\n                    console.log(\"VegaFusion(js): Send request\");\n                }\n                this.model.set(\"_request_msg\", new DataView(request.buffer));\n                this.touch();\n                this.model.set(\"_request_msg\", {});\n            }, config);\n            // Update vega spec properties\n            this.model.set('full_vega_spec', vega_spec_json);\n            this.model.set('client_vega_spec', this.vegafusion_handle.client_spec_json());\n            this.model.set('server_vega_spec', this.vegafusion_handle.server_spec_json());\n            this.model.set('comm_plan', this.vegafusion_handle.comm_plan_json());\n            this.touch();\n        }\n    }\n}\n//# sourceMappingURL=widget.js.map"],"names":[],"sourceRoot":""}