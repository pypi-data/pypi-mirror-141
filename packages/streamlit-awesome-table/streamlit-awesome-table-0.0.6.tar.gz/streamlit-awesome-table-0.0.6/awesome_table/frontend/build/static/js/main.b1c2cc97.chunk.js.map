{"version":3,"sources":["AwesomeTable.tsx","index.tsx"],"names":["AwesomeTable","state","selected_row","render","data","JSON","parse","props","args","columns","console","log","theme","className","map","column","show","scope","label","ICONBUTTON","display","color","cursor","padding","ICONBUTTON_DISABLED","IMAGE","height","dtype","switchcase","name","href","target","rel","style","icon","src","alt","onClick","onClicked","setState","prevState","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"wQAeMA,E,4MACGC,MAAQ,CAAEC,aAAc,I,EAExBC,OAAS,WAGd,IAAMC,EAAOC,KAAKC,MAAM,EAAKC,MAAMC,KAAX,MAClBC,EAAU,EAAKF,MAAMC,KAAX,QAChBE,QAAQC,IAAIF,GAKM,EAAKF,MAAfK,MAGR,OACE,yBAAKC,UAAU,oBACb,2BAAOA,UAAU,mCACf,+BACGJ,EAAQK,KAAI,SAACC,GAEZ,GADAL,QAAQC,IAAII,GACTA,EAAOC,KACR,OAAO,wBAAIC,MAAM,OAAOF,EAAOG,WAIrC,+BACGd,EAAKA,KAAKU,KAAI,SAACV,GACd,IAAMe,EAAa,CACjBC,QAAS,eACT,YAAa,UACbC,MAAO,UACPC,OAAQ,UACR,cAAe,OACfC,QAAS,eAGLC,EAAsB,CAC1BJ,QAAS,eACT,YAAa,UACbC,MAAO,UACPC,OAAQ,UACR,cAAe,OACfC,QAAS,eAGLE,EAAQ,CACZC,OAAQ,IAEV,OACE,4BACGjB,EAAQK,KAAI,SAACC,GACZ,GAAIA,EAAOC,KAAM,CACf,GAAqB,WAAjBD,EAAOY,MACT,OAAIZ,EAAOa,WACF,4BAAKb,EAAOa,WAAWxB,EAAKW,EAAOc,QAEnC,4BAAKzB,EAAKW,EAAOc,OAG5B,GAAqB,eAAjBd,EAAOY,MACT,OAAQvB,EAAKW,EAAOc,OACI,KAAtBzB,EAAKW,EAAOc,MAQZ,wBAAIhB,UAAU,4BACZ,uBACEiB,KAAM1B,EAAKW,EAAOc,MAClBE,OAAO,SACPC,IAAI,uBAEJ,uBAAGC,MAAOd,EAAYN,UAAWE,EAAOmB,SAb5C,wBAAIrB,UAAU,4BACZ,uBACEoB,MAAOT,EACPX,UAAWE,EAAOmB,QAcnB,GAAqB,aAAjBnB,EAAOY,MAChB,OAAQvB,EAAKW,EAAOc,OACI,KAAtBzB,EAAKW,EAAOc,MAQZ,wBAAIhB,UAAU,4BACZ,uBACEiB,KAAM1B,EAAKW,EAAOc,MAClBE,OAAO,SACPC,IAAI,uBAEJ,uBACEC,MAAOd,EACPN,UAAU,mCAfhB,wBAAIA,UAAU,4BACZ,uBACEoB,MAAOT,EACPX,UAAU,kCAiBX,GAAqB,SAAjBE,EAAOY,MAChB,OAAQvB,EAAKW,EAAOc,OACI,KAAtBzB,EAAKW,EAAOc,MAQZ,wBAAIhB,UAAU,4BACZ,uBACEiB,KAAM1B,EAAKW,EAAOc,MAClBE,OAAO,SACPC,IAAI,uBAEJ,uBACEC,MAAOd,EACPN,UAAU,uCAfhB,wBAAIA,UAAU,4BACZ,uBACEoB,MAAOT,EACPX,UAAU,sCAiBX,GAAqB,UAAjBE,EAAOY,MAChB,OAAQvB,EAAKW,EAAOc,OACI,KAAtBzB,EAAKW,EAAOc,MAGZ,wBAAIhB,UAAU,4BACZ,yBACEoB,MAAOR,EACPU,IAAK/B,EAAKW,EAAOc,MACjBO,IAAKrB,EAAOc,QANhB,wBAAIhB,UAAU,6BAUX,GAAqB,cAAjBE,EAAOY,MAAuB,CACvC,IAAMO,EACH9B,EAAKW,EAAOmB,OAA+B,KAAtB9B,EAAKW,EAAOmB,MAE9B9B,EAAKW,EAAOmB,MADZ,kBAEN,OACE,wBAAIrB,UAAU,4BACZ,uBACEoB,MAAOd,EACPN,UAAWqB,EACXG,QAAS,kBAAM,EAAKC,UAAUlC,OAKtC,OAAO,gCAvGV,wB,EAmHTkC,UAAY,SAAClC,GACnB,EAAKmC,UACH,SAACC,GAAD,MAAgB,CAAEtC,aAAcE,MAChC,kBAAMqC,IAAUC,kBAAkB,EAAKzC,MAAMC,kB,yBA1KxByC,KAoLZC,cAAwB5C,G,YC7LvC6C,IAAS1C,OACP,kBAAC,IAAM2C,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.b1c2cc97.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  selected_row: any\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass AwesomeTable extends StreamlitComponentBase<State> {\n  public state = { selected_row: {} }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const data = JSON.parse(this.props.args[\"data\"])\n    const columns = this.props.args[\"columns\"]\n    console.log(columns)\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    return (\n      <div className=\"table-responsive\">\n        <table className=\"table table-striped table-hover\">\n          <thead>\n            {columns.map((column: any) => {\n              console.log(column)\n              if(column.show){\n                return <th scope=\"col\">{column.label}</th>\n              }\n            })}\n          </thead>\n          <tbody>\n            {data.data.map((data: any) => {\n              const ICONBUTTON = {\n                display: \"inline-block\",\n                \"font-size\": \"1.25rem\",\n                color: \"#212529\",\n                cursor: \"pointer\",\n                \"user-select\": \"none\",\n                padding: \"0.5rem 1rem\",\n              }\n\n              const ICONBUTTON_DISABLED = {\n                display: \"inline-block\",\n                \"font-size\": \"1.25rem\",\n                color: \"#dddddd\",\n                cursor: \"default\",\n                \"user-select\": \"none\",\n                padding: \"0.5rem 1rem\",\n              }\n\n              const IMAGE = {\n                height: 50,\n              }\n              return (\n                <tr>\n                  {columns.map((column: any) => {\n                    if (column.show) {\n                      if (column.dtype === \"STRING\") {\n                        if (column.switchcase) {\n                          return <td>{column.switchcase[data[column.name]]}</td>\n                        }else{\n                          return <td>{data[column.name]}</td>\n                        }\n                      }\n                      if (column.dtype === \"ICONBUTTON\") {\n                        return !data[column.name] ||\n                          data[column.name] === \"\" ? (\n                          <td className=\"align-middle text-center\">\n                            <i\n                              style={ICONBUTTON_DISABLED}\n                              className={column.icon}\n                            ></i>\n                          </td>\n                        ) : (\n                          <td className=\"align-middle text-center\">\n                            <a\n                              href={data[column.name]}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                            >\n                              <i style={ICONBUTTON} className={column.icon}></i>\n                            </a>\n                          </td>\n                        )\n                      } else if (column.dtype === \"DOWNLOAD\") {\n                        return !data[column.name] ||\n                          data[column.name] === \"\" ? (\n                          <td className=\"align-middle text-center\">\n                            <i\n                              style={ICONBUTTON_DISABLED}\n                              className=\"fa-solid fa-cloud-arrow-down\"\n                            ></i>\n                          </td>\n                        ) : (\n                          <td className=\"align-middle text-center\">\n                            <a\n                              href={data[column.name]}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                            >\n                              <i\n                                style={ICONBUTTON}\n                                className=\"fa-solid fa-cloud-arrow-down\"\n                              ></i>\n                            </a>\n                          </td>\n                        )\n                      } else if (column.dtype === \"LINK\") {\n                        return !data[column.name] ||\n                          data[column.name] === \"\" ? (\n                          <td className=\"align-middle text-center\">\n                            <i\n                              style={ICONBUTTON_DISABLED}\n                              className=\"fa-solid fa-up-right-from-square\"\n                            ></i>\n                          </td>\n                        ) : (\n                          <td className=\"align-middle text-center\">\n                            <a\n                              href={data[column.name]}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                            >\n                              <i\n                                style={ICONBUTTON}\n                                className=\"fa-solid fa-up-right-from-square\"\n                              ></i>\n                            </a>\n                          </td>\n                        )\n                      } else if (column.dtype === \"IMAGE\") {\n                        return !data[column.name] ||\n                          data[column.name] === \"\" ? (\n                          <td className=\"align-middle text-center\"></td>\n                        ) : (\n                          <td className=\"align-middle text-center\">\n                            <img\n                              style={IMAGE}\n                              src={data[column.name]}\n                              alt={column.name}\n                            />\n                          </td>\n                        )\n                      } else if (column.dtype === \"SET_STATE\") {\n                        const icon =\n                          !data[column.icon] || data[column.icon] === \"\"\n                            ? \"fa-solid fa-eye\"\n                            : data[column.icon]\n                        return (\n                          <td className=\"align-middle text-center\">\n                            <i\n                              style={ICONBUTTON}\n                              className={icon}\n                              onClick={() => this.onClicked(data)}\n                            ></i>\n                          </td>\n                        )\n                      }\n                      return <td></td>\n                    }\n                  }, this)}\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  private onClicked = (data: any): void => {\n    this.setState(\n      (prevState) => ({ selected_row: data }),\n      () => Streamlit.setComponentValue(this.state.selected_row)\n    )\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(AwesomeTable)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AwesomeTable from \"./AwesomeTable\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport '@fortawesome/fontawesome-free/css/all.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <AwesomeTable />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}