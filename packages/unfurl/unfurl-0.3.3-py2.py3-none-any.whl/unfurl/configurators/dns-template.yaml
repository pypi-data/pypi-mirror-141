# Copyright (c) 2020 Adam Souzis
# SPDX-License-Identifier: MIT
tosca_definitions_version: tosca_simple_unfurl_1_0_0

decorators:
  unfurl.nodes.DNSZone::parent_zone:
      relationship:
         type: unfurl.relationships.DNSRecords
         properties:
           records:
             q:
              eval:
                if: $zone
                # XXX should only select NS records not all ''
                then: "{{ {subdomain.split('.')[0] : zone['']} }}"
                else: {}
              vars:
                subdomain:
                  eval: .source::name
                zone:
                  eval: .source::zone

node_types:
  unfurl.nodes.DNSZone:
    derived_from: tosca.nodes.Root
    properties:
      name:
        description: DNS name of the zone (end with .)
        type: string
      provider:
        description: OctoDNS provider configuration
        type: map
      records:
        description: DNS records to add to the zone
        type: map
        default: {}
      exclusive:
        description: Zone exclusively managed by this instance (removes unrecognized records)
        type: boolean
        default: false
      default_ttl:
        type: integer
        default: 300
    attributes:
      zone:
        description: The records found in the zone
        type: map
      managed_records:
        description: The records in the zone that are managed by this instance
        type: map
        required: false
    capabilities:
        resolve:
           type: unfurl.capabilities.DNSZone
    requirements:
        - parent_zone:
           capability: unfurl.capabilities.DNSZone
           occurrences: [0, 1] # it isn't always required

    interfaces:
      defaults:
        implementation:
          className: unfurl.configurators.dns.DNSConfigurator
      Standard:
        operations:
          delete:
          configure:
      Install:
        operations:
          check:

capability_types:

  unfurl.capabilities.DNSZone:
    derived_from: tosca.capabilities.Root

relationship_types:
  unfurl.relationships.DNSRecords:
    derived_from: tosca.relationships.Root
    valid_target_types: [unfurl.capabilities.DNSZone]
    properties:
      records:
        type: map
