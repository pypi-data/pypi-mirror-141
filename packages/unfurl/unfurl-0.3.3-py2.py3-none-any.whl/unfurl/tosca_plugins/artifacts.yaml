# Copyright (c) 2020 Adam Souzis
# SPDX-License-Identifier: MIT
tosca_definitions_version: tosca_simple_unfurl_1_0_0
metadata:
  template_name: Common artifacts for executing operations
  template_author: onecommons.org
  template_version: 1.0.0

repositories:
  asdf:
    url: https://github.com/asdf-vm/asdf.git#v0.8.0

artifact_types:
  artifact.AsdfTool:
    derived_from: unfurl.artifacts.ShellExecutable
    properties:
      version:
        type: string
    interfaces:
      defaults:
        # XXX get_dir only works on localhost
        # asdf uninstall helm 3.6.3
        # INFO     unfurl.task:shell.py:187 shell task return code: 2, stderr: /bin/sh: -c: line 1: syntax error: unexpected end of file
        implementation: |
          if ! [ -x "$(command -v asdf)" ]; then
            ASDF_REPO={{ "asdf" | get_dir }}
            export ASDF_DATA_DIR="${ASDF_DATA_DIR:-$ASDF_REPO}"
            source $ASDF_REPO/asdf.sh
          fi
          asdf plugin add {{SELF.file}}
          asdf {%if task.operation == 'delete' %}uninstall{%else%}install{%endif%} {{SELF.file}} {{SELF.version}}
        inputs:
           # set this .tool-versions is written to the project root
            cwd: '{{ "project" | get_dir }}'
            keeplines: true
            # asdf.sh requires bash
            shell: '{{ "bash" | which }}'
      Standard:
        configure:
        delete:

  artifact.PythonPackage:
    derived_from: tosca.artifacts.Root
    interfaces:
      Install:
        check: unfurl.configurators.PythonPackageCheckConfigurator
      Standard:
        create: pipenv --bare install {{SELF.file}}
        delete: pipenv --bare remove {{SELF.file}}

  # XXX update TerraformConfigurator to read from artifact
  # unfurl.artifacts.TerraformModule:
  #   derived_from: unfurl.artifacts.HasConfigurator
  #   interfaces:
  #     className:
  #       type: string
  #       default: unfurl.configurators.terraform.TerraformConfigurator

node_types:
  unfurl.nodes.Installer.Terraform:
    derived_from: unfurl.nodes.Installer
    properties:
      main:
        type: string
        default:
          eval:
            get_dir: spec.home
    interfaces:
      defaults:
        implementation:
          className: unfurl.configurators.terraform.TerraformConfigurator
        inputs:
           main: { get_property: [SELF, main] }
      Standard:
        operations:
          delete:
          configure:
            inputs:
              resultTemplate: |
                {%if outputs | default("") %}
                # merge all outputs into attributes
                attributes:
                  <<: {{ outputs | mapValue | to_json }}
                {% endif %}

      Install:
        operations:
          check:

topology_template:
  node_templates:
    configurator-artifacts:
      type: unfurl.nodes.LocalRepository
      directives:
        - default # we need this so that this node template is imported
      artifacts:
        terraform:
          type: artifact.AsdfTool
          file: terraform
          properties:
            version: 1.1.4

        gcloud:
          type: artifact.AsdfTool
          file: gcloud
          properties:
            version: 368.0.0
