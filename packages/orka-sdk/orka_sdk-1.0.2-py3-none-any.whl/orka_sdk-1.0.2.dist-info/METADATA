Metadata-Version: 2.1
Name: orka-sdk
Version: 1.0.2
Summary: Control Orka clusters and the macOS VMs they run.
Home-page: https://github.com/jeff-vincent/orka-python-sdk
Author: Jeff Vincent
Author-email: jeff.d.vincent@gmail.com
License: MIT
Platform: UNKNOWN
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: attrs (==21.4.0)
Requires-Dist: bcrypt (==3.2.0)
Requires-Dist: cachetools (==4.2.4)
Requires-Dist: certifi (==2021.10.8)
Requires-Dist: cffi (==1.15.0)
Requires-Dist: charset-normalizer (==2.0.9)
Requires-Dist: cryptography (==36.0.0)
Requires-Dist: google-auth (==2.3.3)
Requires-Dist: idna (==3.3)
Requires-Dist: importlib-metadata (==4.10.1)
Requires-Dist: iniconfig (==1.1.1)
Requires-Dist: Jinja2 (==3.0.3)
Requires-Dist: kubernetes (==21.7.0)
Requires-Dist: MarkupSafe (==2.0.1)
Requires-Dist: mock (==4.0.3)
Requires-Dist: oauthlib (==3.1.1)
Requires-Dist: packaging (==21.3)
Requires-Dist: paramiko (==2.8.1)
Requires-Dist: pluggy (==1.0.0)
Requires-Dist: py (==1.11.0)
Requires-Dist: pyasn1 (==0.4.8)
Requires-Dist: pyasn1-modules (==0.2.8)
Requires-Dist: pycparser (==2.21)
Requires-Dist: PyNaCl (==1.4.0)
Requires-Dist: pyparsing (==3.0.7)
Requires-Dist: pytest (==6.2.5)
Requires-Dist: python-dateutil (==2.8.2)
Requires-Dist: PyYAML (==6.0)
Requires-Dist: requests (==2.26.0)
Requires-Dist: requests-oauthlib (==1.3.0)
Requires-Dist: rsa (==4.8)
Requires-Dist: six (==1.16.0)
Requires-Dist: toml (==0.10.2)
Requires-Dist: typing-extensions (==4.0.1)
Requires-Dist: urllib3 (==1.26.7)
Requires-Dist: websocket-client (==1.2.3)
Requires-Dist: zipp (==3.7.0)

# orka-python-sdk

An SDK for interacting with Orka clusters and the macOS VMs they run.

#### Contents
 - [Orka](#define-and-create-a-vm)
 - [k8s](#deploy-a-k8s-service)
 - [GitHub Actions](#integrations-with-orka)


### Define and create a VM

```
from orka_sdk import OrkaSDK

orka = OrkaSDK()
orka.login(
	user='user@email.com', 
	password='password',
	license_key='license-key')

# Define a VM
vm_data = {
	'vm_name': 'fake-name',
	'orka_base_image': 'new-image.img',
	'core_count': '3',
	'vcpu_count': '3'
}

# Create a VM
r = orka.create_vm(vm_data)    # r is an instance of the class Result
if r.success:
	vm = r.data    # vm is an instance of the class VM
else:
	print(r.errors)

that_one_vms_id = vm.id
```

### Upload a file to a deployed VM
```
local_path = '/home/jeffdvincent/orka-python-sdk/example.py'
dest_path = '/Users/admin/example.py'

r = vm.upload(local_path, dest_path)

if r.success:
	r = vm.exec(f'cat {dest_path}')
	print(r.data['stdout'])
```

### Print the name of all VMs in the system
```
r = orka.list_session_vms()
if r.success:
	for vm in r.data:
		print(vm.name)
```
### Save a deployed VM's state as an Image
```
r = orka.save_vm_as_image('new-image.img', vm)
```
### Execute a remote command on a deployed VM
```
cmd = 'export TEST_VALUE=success'
r = vm.exec(cmd)
```

### Commit current state of deployed VM to base image and clean up
```
orka.commit_vm_state_to_base_image(vm)
orka.purge_vm(vm)
```


### Iterate over all VMs in system and execute a remote command on each
```
r = orka.list_system_vms()
if r.success:
	for vm in r.data:
		r = vm.exec('printenv')
else:
	print(r.errors)
```

### Get VM by id
```
r = orka.get_vm_by_id(that_one_vms_id)
if r.success:
	vm = r.data
	print(vm.id)

```

### Deploy a k8s service 
```
orka.k8s.create_service('<path_to_yaml_definition>')
```

### Delete a k8s deployment
```
orka.k8s.delete_deployment('<deployment_name>')
```

## Integrations with Orka
- Ephemeral [GitHub Actions](https://github.com/jeff-vincent/orka-python-sdk/blob/main/gha_example.py) self-hosted runners that live in Orka can be easily orchestrated with the `GHAController` class when paired with [these `agent` resources](https://github.com/jeff-vincent/orka-actions-connect).



