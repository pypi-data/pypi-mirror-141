# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class ConquestApiConfigTuningConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gateway_establish_connection_timeout_ms': 'int',
        'max_data_set_size': 'int',
        'max_data_set_size_for_map_objects': 'int'
    }

    attribute_map = {
        'gateway_establish_connection_timeout_ms': 'gateway_establish_connection_timeout_ms',
        'max_data_set_size': 'max_data_set_size',
        'max_data_set_size_for_map_objects': 'max_data_set_size_for_map_objects'
    }

    def __init__(self, gateway_establish_connection_timeout_ms=None, max_data_set_size=None, max_data_set_size_for_map_objects=None, _configuration=None):  # noqa: E501
        """ConquestApiConfigTuningConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._gateway_establish_connection_timeout_ms = None
        self._max_data_set_size = None
        self._max_data_set_size_for_map_objects = None
        self.discriminator = None

        if gateway_establish_connection_timeout_ms is not None:
            self.gateway_establish_connection_timeout_ms = gateway_establish_connection_timeout_ms
        if max_data_set_size is not None:
            self.max_data_set_size = max_data_set_size
        if max_data_set_size_for_map_objects is not None:
            self.max_data_set_size_for_map_objects = max_data_set_size_for_map_objects

    @property
    def gateway_establish_connection_timeout_ms(self):
        """Gets the gateway_establish_connection_timeout_ms of this ConquestApiConfigTuningConfiguration.  # noqa: E501


        :return: The gateway_establish_connection_timeout_ms of this ConquestApiConfigTuningConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._gateway_establish_connection_timeout_ms

    @gateway_establish_connection_timeout_ms.setter
    def gateway_establish_connection_timeout_ms(self, gateway_establish_connection_timeout_ms):
        """Sets the gateway_establish_connection_timeout_ms of this ConquestApiConfigTuningConfiguration.


        :param gateway_establish_connection_timeout_ms: The gateway_establish_connection_timeout_ms of this ConquestApiConfigTuningConfiguration.  # noqa: E501
        :type: int
        """

        self._gateway_establish_connection_timeout_ms = gateway_establish_connection_timeout_ms

    @property
    def max_data_set_size(self):
        """Gets the max_data_set_size of this ConquestApiConfigTuningConfiguration.  # noqa: E501


        :return: The max_data_set_size of this ConquestApiConfigTuningConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_data_set_size

    @max_data_set_size.setter
    def max_data_set_size(self, max_data_set_size):
        """Sets the max_data_set_size of this ConquestApiConfigTuningConfiguration.


        :param max_data_set_size: The max_data_set_size of this ConquestApiConfigTuningConfiguration.  # noqa: E501
        :type: int
        """

        self._max_data_set_size = max_data_set_size

    @property
    def max_data_set_size_for_map_objects(self):
        """Gets the max_data_set_size_for_map_objects of this ConquestApiConfigTuningConfiguration.  # noqa: E501

        maxDataSetSizeForMapObjects: (default = 10000, max = 10000)   request responses must reliably fit within 4mb. 10000 is suitable for this case.   Reduce this value if you experience problems with request timeouts or cancellations.  # noqa: E501

        :return: The max_data_set_size_for_map_objects of this ConquestApiConfigTuningConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_data_set_size_for_map_objects

    @max_data_set_size_for_map_objects.setter
    def max_data_set_size_for_map_objects(self, max_data_set_size_for_map_objects):
        """Sets the max_data_set_size_for_map_objects of this ConquestApiConfigTuningConfiguration.

        maxDataSetSizeForMapObjects: (default = 10000, max = 10000)   request responses must reliably fit within 4mb. 10000 is suitable for this case.   Reduce this value if you experience problems with request timeouts or cancellations.  # noqa: E501

        :param max_data_set_size_for_map_objects: The max_data_set_size_for_map_objects of this ConquestApiConfigTuningConfiguration.  # noqa: E501
        :type: int
        """

        self._max_data_set_size_for_map_objects = max_data_set_size_for_map_objects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiConfigTuningConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiConfigTuningConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConquestApiConfigTuningConfiguration):
            return True

        return self.to_dict() != other.to_dict()
