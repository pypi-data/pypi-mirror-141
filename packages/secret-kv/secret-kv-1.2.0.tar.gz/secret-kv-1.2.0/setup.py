# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['secret_kv', 'secret_kv.config']

package_data = \
{'': ['*']}

install_requires = \
['argcomplete>=2.0.0,<3.0.0',
 'colorama>=0.4.4,<0.5.0',
 'jq>=1.2.2,<2.0.0',
 'keyring>=23.5.0,<24.0.0',
 'sqlcipher3>=0.4.5,<0.5.0']

entry_points = \
{'console_scripts': ['secret-kv = secret_kv.__main__:run']}

setup_kwargs = {
    'name': 'secret-kv',
    'version': '1.2.0',
    'description': 'Project-local secret key/value storage protected by a single passphrase stored in keyring',
    'long_description': 'secret-kv: Project-local secret key/value storage\n=================================================\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Latest release](https://img.shields.io/github/v/release/sammck/secret-kv.svg?style=flat-square&color=b44e88)](https://github.com/sammck/secret-kv/releases)\n\nA tool and API for managing local secrets for a project.\n\nTable of contents\n-----------------\n\n* [Introduction](#introduction)\n* [Installation](#installation)\n* [Usage](#usage)\n  * [Command line](#command-line)\n  * [API](api)\n* [Known issues and limitations](#known-issues-and-limitations)\n* [Getting help](#getting-help)\n* [Contributing](#contributing)\n* [License](#license)\n* [Authors and history](#authors-and-history)\n\n\nIntroduction\n------------\n\nPython package `secret-kv` provides a command-line tool as well as a runtime API for managing and accessing a database of secret key/value\npairs that are scoped to a particular project, directory, etc. The entire database is encrypted using a single passphrase that is maintained\nin a system keychain.\n\nSome key features of secret-kv:\n\n* Built on [sqlcipher](https://www.zetetic.net/sqlcipher/), an encrypted extension of [sqlite](https://www.sqlite.org/index.html) that\n  applies 256-bit AES encryption to a single-file database, using a single passphrase.\n* Uses [keyring](https://pypi.org/project/keyring/) to maintain the passphrase for a given database, and optionally to store a\n  default passphrase to be used for newly create databases.\n* Maintains separation of secrets and the key/value namespace between different projects,\n  including passphrases stored in [keyring](https://pypi.org/project/keyring/).\n* An entire project\'s secrets can be destroyed simply by deleting its database (and a single keyring secret)\n* Allows a project to access its private secrets with minimal configuration.\n* Finds a project\'s secret store from any subdirectory within the project.\n* Supports full validated JSON values.\n* Supports binary values.\n* Allows metadata to be attached to key/value pairs in the form of tag-name/value pairs\n* Key enumeration\n* database export/import/merge (not yet implemented)\n* A rich command-line tool:\n  * JSON-formatted results available for all data retrieval operations\n  * Optional colored output\n  * bash tab-completion available\n  * Optional raw (unquoted) results for string and binary data\n\n\nInstallation\n------------\n\n### Prerequisites\n\n**Python**: Python 3.7+ is required. See your OS documentation for instructions.\n\n**sqlcipher**: `secret-kv`` depends on [sqlcipher](https://www.zetetic.net/sqlcipher/), which is available in many OS distributions. On\nubuntu/debian, it can be installed with:\n\n```bash\nsudo apt-get install sqlcipher\n```\n\n### From PyPi\n\nThe current released version of `secret-kv` can be installed with \n\n```bash\npip3 install secret-kv\n```\n\n### From GitHub\n\n[Poetry](https://python-poetry.org/docs/master/#installing-with-the-official-installer) is required; it can be installed with:\n\n```bash\ncurl -sSL https://install.python-poetry.org | python3 -\n```\n\nClone the repository and install secret-kv into a private virtualenv with:\n\n```bash\ncd <parent-folder>\ngit clone https://github.com/sammck/secret-kv.git\ncd secret-kv\npoetry install\n```\n\nYou can then launch a bash shell with the virtualenv activated using:\n\n```bash\npoetry shell\n```\n\n\nUsage\n=====\n\nCommand Line\n------------\n\nThere is a single command tool `secret-kv` that is installed with the package.\n\n### Setting a default database passphrase\n\nThe first time you use `secret-kv` (as an OS user), you may want to set a default passphrase\nto be used for creation of new databases. This passphrase will be securely stored in\n[keyring](https://pypi.org/project/keyring/) under service="python/secret-kv", username="default-db-passphrase":\n\n```bash\nsecret-kv -p \'<default-passphrase>\' set-default-passphrase\n```\n\nThe default passphrase is only used during creation of new databases; it has no effect on existing databases.\nIt is global to the user who sets it (i.e., global to the user\'s\n[keyring](https://pypi.org/project/keyring/)). It is shared across all installations of `secret-kv` for the\nuser.\n\nIf a default passphrase is not set, it will be necessary to supply a passphrase each time a new database is created.\n\n### Initializing a project\'s secret key/value store.\n\nCreating and initializing a secret key/value store for a given project is simple. To create a store with the\ndefault passphrase (see [above](#setting-a-default-passphrase)):\n\n```bash\nsecret-kv create-store <project-root-dir>\n```\n\nOr, to explicitly set a passphrase for the new store:\n\n```bash\nsecret-kv -p \'<my-passphrase>\' create-store <project-root-dir>\n```\n\nA new directory `<project-root-dir>/.secret-kv/` will be created that contains the encrypted database and configuration information. The\nnew store\'s passphrase is securely stored in the user\'s [keyring](https://pypi.org/project/keyring/), so generally the passphrase\nwill not need to be provided again for the life of the project.\n\n> NOTE: The newly created `<project-root-dir>/.secret-kv/` directory includes an encrypted binary database file. While its\n> contents are unreadable without the store\'s passphrase, binary files of this type are not particularly friendly to source control\n> systems (e.g., Git). It is recommended for most applications that `.secret-kv/` be added to `.gitignore` to prevent\n> checking the secret store into your Git repo.\n\n> NOTE: The store\'s passphrase will be stored in [keyring](https://pypi.org/project/keyring/) under service="python/secret-kv",\n> with the keyring username set to a hash of the store\'s pathname. This prevents stores created in different directories\n> from colliding in their use of [keyring](https://pypi.org/project/keyring/), but it means that if you move your store\n> to a different directory, or rename a parent directory of the store, then you will have to reinitialize the\n> store\'s passphrase before the store can be used again. For this reason, and because the keyring might be erased,\n> it is important to maintain a record of the passphrase if the contents of the store are irreplaceable.\n\n### Setting a secret value\n\nTo set a simple string value:\n\n```bash\ncd <any-dir-under-project-root-dir>\nsecret-kv set <key> "<string-value>"\n```\n\nTo set a JSON value (including bare int, float, bool, null, and quoted strings):\n\n```bash\ncd <any-dir-under-project-root-dir>\nsecret-kv set --json <key> \'<json-text>\'\nsecret-kv set --json <key> -i <json-filename>\n<my-json-generating-cmd> | secret-kv set --json --stdin <key>\n```\n\nTo set a binary value:\n\n```bash\ncd <any-dir-under-project-root-dir>\nsecret-kv set --binary --stdin <key> -i <my-binary-filename>\n```\n\n### Getting a secret value\n\nTo get a value as parseable JSON (including bare int, float, bool, null, quoted strings, dicts, and lists):\n\n```bash\ncd <any-dir-under-project-root-dir>\nsecret-kv get <key>\nsecret-kv get <key> | jq <jq-query-expression>\n```\n> NOTE: The default representation here is what `secret-kv` calls *xjson*. For simple json values, it is generally\n> identical to the JSON that was originally set. This is always true as long as the original JSON did not contain\n> any dicts with a property name that began with one or more \'@\' characters followed by "kv_type". If such a property\n> did exist in the original JSOn, the property name will be prefixed with an additional \'@\' character in the\n> default output format. This allows for disambiguation between simple JSON and richer types that can be embedded\n> in the store (in particular, binary values). If it is essential that you get the same JSON out as you put in, even\n> in this unusual edge case, and\n> you know that the value does not include any extended types (e.g., binary values), you can provide a `--simple-json`\n> option to the `get` command--in this case, you will get back exactly what you put in, but an error will be returned if any extended\n> types are present in the value.\n\n> NOTE: Values that were set with `--binary` or `--base64` options will appear as: \n> ```json\n> { "@kv_type": "binary", "data": "<base64-encoded-binary-data>" }\n> ```\n\nTo get a string or binary value back in its raw, unquoted, non-JSON form:\n\n```bash\ncd <any-dir-under-project-root-dir>\nMY_SECRET="$(secret-kv -r get <key-for-string-secret>)"\nsecret-kv -r get <key-for-binary-secret> > <my-binary-file>\n```\n\nUsing the `-r` option for values that are not simple strings or binary values has no effect.\n\n### Deleting a secret value\n\nTo delete a secret value from the store:\n\n```bash\ncd <any-dir-under-project-root-dir>\nsecret-kv del <key>\n```\n\n### Deleting the store\n\nTo delete the entire store, the containing `.secret-kv/` directory, and the [keyring](https://pypi.org/project/keyring/) entry\nfor the store:\n\n```bash\ncd <any-dir-under-project-root-dir>\nsecret-kv delete-store\n```\n\n### Clearing the store\n\nTo remove all secrets from the store and restore it to its newly initialized state, without deleting the store\nor changing the passphrase:\n\n```bash\ncd <any-dir-under-project-root-dir>\nsecret-kv clear-store\n```\n\n### Enumerating keys\n\nTo get a JSON list of all keys in the store:\n\n```bash\ncd <any-dir-under-project-root-dir>\nsecret-kv keys\n```\n\n\nAPI\n---\n\nTBD\n\nKnown issues and limitations\n----------------------------\n\n* Import/export are not yet supported.\n\nGetting help\n------------\n\nPlease report any problems/issues [here](https://github.com/sammck/secret-kv/issues).\n\nContributing\n------------\n\nPull requests welcome.\n\nLicense\n-------\n\nsecret-kv is distributed under the terms of the [MIT License](https://opensource.org/licenses/MIT).  The license applies to this file and other files in the [GitHub repository](http://github.com/sammck/secret-kv) hosting this file.\n\nAuthors and history\n---------------------------\n\nThe author of secret-kv is [Sam McKelvie](https://github.com/sammck).\n',
    'author': 'Sam McKelvie',
    'author_email': 'dev@mckelvie.org',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/sammck/secret-kv',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
