# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _gstlearn
else:
    import _gstlearn

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class IClonable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_IClonable

# Register IClonable in _gstlearn:
_gstlearn.IClonable_swigregister(IClonable)

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _gstlearn.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _gstlearn.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _gstlearn.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _gstlearn.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _gstlearn.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _gstlearn.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _gstlearn.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _gstlearn.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _gstlearn.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _gstlearn.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _gstlearn.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _gstlearn.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _gstlearn.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _gstlearn.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _gstlearn.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _gstlearn.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _gstlearn:
_gstlearn.SwigPyIterator_swigregister(SwigPyIterator)

class VectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorDouble___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _gstlearn.VectorDouble___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _gstlearn.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _gstlearn.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _gstlearn.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _gstlearn.VectorDouble_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _gstlearn.VectorDouble_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorDouble_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _gstlearn.VectorDouble_size(self)

    def swap(self, v: "VectorDouble") -> "void":
        return _gstlearn.VectorDouble_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _gstlearn.VectorDouble_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _gstlearn.VectorDouble_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _gstlearn.VectorDouble_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _gstlearn.VectorDouble_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorDouble_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _gstlearn.VectorDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _gstlearn.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorDouble_swiginit(self, _gstlearn.new_VectorDouble(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _gstlearn.VectorDouble_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _gstlearn.VectorDouble_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _gstlearn.VectorDouble_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _gstlearn.VectorDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorDouble_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _gstlearn.VectorDouble_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _gstlearn.VectorDouble_capacity(self)

    def __repr__(self) -> "std::string":
        return _gstlearn.VectorDouble___repr__(self)
    __swig_destroy__ = _gstlearn.delete_VectorDouble

# Register VectorDouble in _gstlearn:
_gstlearn.VectorDouble_swigregister(VectorDouble)

class VectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorInt___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _gstlearn.VectorInt___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _gstlearn.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _gstlearn.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _gstlearn.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorInt___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _gstlearn.VectorInt_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _gstlearn.VectorInt_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorInt_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _gstlearn.VectorInt_size(self)

    def swap(self, v: "VectorInt") -> "void":
        return _gstlearn.VectorInt_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _gstlearn.VectorInt_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _gstlearn.VectorInt_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _gstlearn.VectorInt_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _gstlearn.VectorInt_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorInt_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _gstlearn.VectorInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorInt_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _gstlearn.VectorInt_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorInt_swiginit(self, _gstlearn.new_VectorInt(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _gstlearn.VectorInt_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _gstlearn.VectorInt_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _gstlearn.VectorInt_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _gstlearn.VectorInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorInt_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _gstlearn.VectorInt_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _gstlearn.VectorInt_capacity(self)

    def __repr__(self) -> "std::string":
        return _gstlearn.VectorInt___repr__(self)
    __swig_destroy__ = _gstlearn.delete_VectorInt

# Register VectorInt in _gstlearn:
_gstlearn.VectorInt_swigregister(VectorInt)

class VectorString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorString___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorString___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _gstlearn.VectorString___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _gstlearn.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorString___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _gstlearn.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorString___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _gstlearn.VectorString___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorString___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _gstlearn.VectorString_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _gstlearn.VectorString_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorString_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _gstlearn.VectorString_size(self)

    def swap(self, v: "VectorString") -> "void":
        return _gstlearn.VectorString_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _gstlearn.VectorString_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _gstlearn.VectorString_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _gstlearn.VectorString_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _gstlearn.VectorString_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorString_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _gstlearn.VectorString_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorString_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _gstlearn.VectorString_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorString_swiginit(self, _gstlearn.new_VectorString(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _gstlearn.VectorString_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _gstlearn.VectorString_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _gstlearn.VectorString_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _gstlearn.VectorString_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorString_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorString_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _gstlearn.VectorString_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _gstlearn.VectorString_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorString

# Register VectorString in _gstlearn:
_gstlearn.VectorString_swigregister(VectorString)

class VectorBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorBool___bool__(self)

    def __len__(self) -> "std::vector< bool >::size_type":
        return _gstlearn.VectorBool___len__(self)

    def __getslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "std::vector< bool,std::allocator< bool > > *":
        return _gstlearn.VectorBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "void":
        return _gstlearn.VectorBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< bool >::value_type":
        return _gstlearn.VectorBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorBool___setitem__(self, *args)

    def pop(self) -> "std::vector< bool >::value_type":
        return _gstlearn.VectorBool_pop(self)

    def append(self, x: "std::vector< bool >::value_type") -> "void":
        return _gstlearn.VectorBool_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorBool_empty(self)

    def size(self) -> "std::vector< bool >::size_type":
        return _gstlearn.VectorBool_size(self)

    def swap(self, v: "VectorBool") -> "void":
        return _gstlearn.VectorBool_swap(self, v)

    def begin(self) -> "std::vector< bool >::iterator":
        return _gstlearn.VectorBool_begin(self)

    def end(self) -> "std::vector< bool >::iterator":
        return _gstlearn.VectorBool_end(self)

    def rbegin(self) -> "std::vector< bool >::reverse_iterator":
        return _gstlearn.VectorBool_rbegin(self)

    def rend(self) -> "std::vector< bool >::reverse_iterator":
        return _gstlearn.VectorBool_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorBool_clear(self)

    def get_allocator(self) -> "std::vector< bool >::allocator_type":
        return _gstlearn.VectorBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorBool_pop_back(self)

    def erase(self, *args) -> "std::vector< bool >::iterator":
        return _gstlearn.VectorBool_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorBool_swiginit(self, _gstlearn.new_VectorBool(*args))

    def push_back(self, x: "std::vector< bool >::value_type") -> "void":
        return _gstlearn.VectorBool_push_back(self, x)

    def front(self) -> "std::vector< bool >::value_type":
        return _gstlearn.VectorBool_front(self)

    def back(self) -> "std::vector< bool >::value_type":
        return _gstlearn.VectorBool_back(self)

    def assign(self, n: "std::vector< bool >::size_type", x: "std::vector< bool >::value_type") -> "void":
        return _gstlearn.VectorBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorBool_insert(self, *args)

    def reserve(self, n: "std::vector< bool >::size_type") -> "void":
        return _gstlearn.VectorBool_reserve(self, n)

    def capacity(self) -> "std::vector< bool >::size_type":
        return _gstlearn.VectorBool_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorBool

# Register VectorBool in _gstlearn:
_gstlearn.VectorBool_swigregister(VectorBool)

class VectorUChar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorUChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorUChar___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorUChar___bool__(self)

    def __len__(self) -> "std::vector< unsigned char >::size_type":
        return _gstlearn.VectorUChar___len__(self)

    def __getslice__(self, i: "std::vector< unsigned char >::difference_type", j: "std::vector< unsigned char >::difference_type") -> "std::vector< unsigned char,std::allocator< unsigned char > > *":
        return _gstlearn.VectorUChar___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorUChar___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< unsigned char >::difference_type", j: "std::vector< unsigned char >::difference_type") -> "void":
        return _gstlearn.VectorUChar___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorUChar___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned char >::value_type const &":
        return _gstlearn.VectorUChar___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorUChar___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned char >::value_type":
        return _gstlearn.VectorUChar_pop(self)

    def append(self, x: "std::vector< unsigned char >::value_type const &") -> "void":
        return _gstlearn.VectorUChar_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorUChar_empty(self)

    def size(self) -> "std::vector< unsigned char >::size_type":
        return _gstlearn.VectorUChar_size(self)

    def swap(self, v: "VectorUChar") -> "void":
        return _gstlearn.VectorUChar_swap(self, v)

    def begin(self) -> "std::vector< unsigned char >::iterator":
        return _gstlearn.VectorUChar_begin(self)

    def end(self) -> "std::vector< unsigned char >::iterator":
        return _gstlearn.VectorUChar_end(self)

    def rbegin(self) -> "std::vector< unsigned char >::reverse_iterator":
        return _gstlearn.VectorUChar_rbegin(self)

    def rend(self) -> "std::vector< unsigned char >::reverse_iterator":
        return _gstlearn.VectorUChar_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorUChar_clear(self)

    def get_allocator(self) -> "std::vector< unsigned char >::allocator_type":
        return _gstlearn.VectorUChar_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorUChar_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned char >::iterator":
        return _gstlearn.VectorUChar_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorUChar_swiginit(self, _gstlearn.new_VectorUChar(*args))

    def push_back(self, x: "std::vector< unsigned char >::value_type const &") -> "void":
        return _gstlearn.VectorUChar_push_back(self, x)

    def front(self) -> "std::vector< unsigned char >::value_type const &":
        return _gstlearn.VectorUChar_front(self)

    def back(self) -> "std::vector< unsigned char >::value_type const &":
        return _gstlearn.VectorUChar_back(self)

    def assign(self, n: "std::vector< unsigned char >::size_type", x: "std::vector< unsigned char >::value_type const &") -> "void":
        return _gstlearn.VectorUChar_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorUChar_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorUChar_insert(self, *args)

    def reserve(self, n: "std::vector< unsigned char >::size_type") -> "void":
        return _gstlearn.VectorUChar_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned char >::size_type":
        return _gstlearn.VectorUChar_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorUChar

# Register VectorUChar in _gstlearn:
_gstlearn.VectorUChar_swigregister(VectorUChar)

class VectorVectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorVectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorVectorInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorVectorInt___bool__(self)

    def __len__(self) -> "std::vector< std::vector< int > >::size_type":
        return _gstlearn.VectorVectorInt___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< int > >::difference_type", j: "std::vector< std::vector< int > >::difference_type") -> "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *":
        return _gstlearn.VectorVectorInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorVectorInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< int > >::difference_type", j: "std::vector< std::vector< int > >::difference_type") -> "void":
        return _gstlearn.VectorVectorInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorVectorInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< int > >::value_type const &":
        return _gstlearn.VectorVectorInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorVectorInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< int > >::value_type":
        return _gstlearn.VectorVectorInt_pop(self)

    def append(self, x: "VectorInt") -> "void":
        return _gstlearn.VectorVectorInt_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorVectorInt_empty(self)

    def size(self) -> "std::vector< std::vector< int > >::size_type":
        return _gstlearn.VectorVectorInt_size(self)

    def swap(self, v: "VectorVectorInt") -> "void":
        return _gstlearn.VectorVectorInt_swap(self, v)

    def begin(self) -> "std::vector< std::vector< int > >::iterator":
        return _gstlearn.VectorVectorInt_begin(self)

    def end(self) -> "std::vector< std::vector< int > >::iterator":
        return _gstlearn.VectorVectorInt_end(self)

    def rbegin(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _gstlearn.VectorVectorInt_rbegin(self)

    def rend(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _gstlearn.VectorVectorInt_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorVectorInt_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< int > >::allocator_type":
        return _gstlearn.VectorVectorInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorVectorInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< int > >::iterator":
        return _gstlearn.VectorVectorInt_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorVectorInt_swiginit(self, _gstlearn.new_VectorVectorInt(*args))

    def push_back(self, x: "VectorInt") -> "void":
        return _gstlearn.VectorVectorInt_push_back(self, x)

    def front(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _gstlearn.VectorVectorInt_front(self)

    def back(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _gstlearn.VectorVectorInt_back(self)

    def assign(self, n: "std::vector< std::vector< int > >::size_type", x: "VectorInt") -> "void":
        return _gstlearn.VectorVectorInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorVectorInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorVectorInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< int > >::size_type") -> "void":
        return _gstlearn.VectorVectorInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< int > >::size_type":
        return _gstlearn.VectorVectorInt_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorVectorInt

# Register VectorVectorInt in _gstlearn:
_gstlearn.VectorVectorInt_swigregister(VectorVectorInt)

class VectorVectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorVectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorVectorDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorVectorDouble___bool__(self)

    def __len__(self) -> "std::vector< std::vector< double > >::size_type":
        return _gstlearn.VectorVectorDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
        return _gstlearn.VectorVectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorVectorDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "void":
        return _gstlearn.VectorVectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorVectorDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
        return _gstlearn.VectorVectorDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorVectorDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< double > >::value_type":
        return _gstlearn.VectorVectorDouble_pop(self)

    def append(self, x: "VectorDouble") -> "void":
        return _gstlearn.VectorVectorDouble_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorVectorDouble_empty(self)

    def size(self) -> "std::vector< std::vector< double > >::size_type":
        return _gstlearn.VectorVectorDouble_size(self)

    def swap(self, v: "VectorVectorDouble") -> "void":
        return _gstlearn.VectorVectorDouble_swap(self, v)

    def begin(self) -> "std::vector< std::vector< double > >::iterator":
        return _gstlearn.VectorVectorDouble_begin(self)

    def end(self) -> "std::vector< std::vector< double > >::iterator":
        return _gstlearn.VectorVectorDouble_end(self)

    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _gstlearn.VectorVectorDouble_rbegin(self)

    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _gstlearn.VectorVectorDouble_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorVectorDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
        return _gstlearn.VectorVectorDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorVectorDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
        return _gstlearn.VectorVectorDouble_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorVectorDouble_swiginit(self, _gstlearn.new_VectorVectorDouble(*args))

    def push_back(self, x: "VectorDouble") -> "void":
        return _gstlearn.VectorVectorDouble_push_back(self, x)

    def front(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _gstlearn.VectorVectorDouble_front(self)

    def back(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _gstlearn.VectorVectorDouble_back(self)

    def assign(self, n: "std::vector< std::vector< double > >::size_type", x: "VectorDouble") -> "void":
        return _gstlearn.VectorVectorDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorVectorDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorVectorDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< double > >::size_type") -> "void":
        return _gstlearn.VectorVectorDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< double > >::size_type":
        return _gstlearn.VectorVectorDouble_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorVectorDouble

# Register VectorVectorDouble in _gstlearn:
_gstlearn.VectorVectorDouble_swigregister(VectorVectorDouble)

class VectorEnumCovs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorEnumCovs_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorEnumCovs___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorEnumCovs___bool__(self)

    def __len__(self) -> "std::vector< ECov >::size_type":
        return _gstlearn.VectorEnumCovs___len__(self)

    def __getslice__(self, i: "std::vector< ECov >::difference_type", j: "std::vector< ECov >::difference_type") -> "std::vector< ECov,std::allocator< ECov > > *":
        return _gstlearn.VectorEnumCovs___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorEnumCovs___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< ECov >::difference_type", j: "std::vector< ECov >::difference_type") -> "void":
        return _gstlearn.VectorEnumCovs___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorEnumCovs___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< ECov >::value_type const &":
        return _gstlearn.VectorEnumCovs___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorEnumCovs___setitem__(self, *args)

    def pop(self) -> "std::vector< ECov >::value_type":
        return _gstlearn.VectorEnumCovs_pop(self)

    def append(self, x: "ECov") -> "void":
        return _gstlearn.VectorEnumCovs_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorEnumCovs_empty(self)

    def size(self) -> "std::vector< ECov >::size_type":
        return _gstlearn.VectorEnumCovs_size(self)

    def swap(self, v: "VectorEnumCovs") -> "void":
        return _gstlearn.VectorEnumCovs_swap(self, v)

    def begin(self) -> "std::vector< ECov >::iterator":
        return _gstlearn.VectorEnumCovs_begin(self)

    def end(self) -> "std::vector< ECov >::iterator":
        return _gstlearn.VectorEnumCovs_end(self)

    def rbegin(self) -> "std::vector< ECov >::reverse_iterator":
        return _gstlearn.VectorEnumCovs_rbegin(self)

    def rend(self) -> "std::vector< ECov >::reverse_iterator":
        return _gstlearn.VectorEnumCovs_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorEnumCovs_clear(self)

    def get_allocator(self) -> "std::vector< ECov >::allocator_type":
        return _gstlearn.VectorEnumCovs_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorEnumCovs_pop_back(self)

    def erase(self, *args) -> "std::vector< ECov >::iterator":
        return _gstlearn.VectorEnumCovs_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorEnumCovs_swiginit(self, _gstlearn.new_VectorEnumCovs(*args))

    def push_back(self, x: "ECov") -> "void":
        return _gstlearn.VectorEnumCovs_push_back(self, x)

    def front(self) -> "std::vector< ECov >::value_type const &":
        return _gstlearn.VectorEnumCovs_front(self)

    def back(self) -> "std::vector< ECov >::value_type const &":
        return _gstlearn.VectorEnumCovs_back(self)

    def assign(self, n: "std::vector< ECov >::size_type", x: "ECov") -> "void":
        return _gstlearn.VectorEnumCovs_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorEnumCovs_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorEnumCovs_insert(self, *args)

    def reserve(self, n: "std::vector< ECov >::size_type") -> "void":
        return _gstlearn.VectorEnumCovs_reserve(self, n)

    def capacity(self) -> "std::vector< ECov >::size_type":
        return _gstlearn.VectorEnumCovs_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorEnumCovs

# Register VectorEnumCovs in _gstlearn:
_gstlearn.VectorEnumCovs_swigregister(VectorEnumCovs)

class VectorCTable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorCTable_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorCTable___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorCTable___bool__(self)

    def __len__(self) -> "std::vector< CTable * >::size_type":
        return _gstlearn.VectorCTable___len__(self)

    def __getslice__(self, i: "std::vector< CTable * >::difference_type", j: "std::vector< CTable * >::difference_type") -> "std::vector< CTable *,std::allocator< CTable * > > *":
        return _gstlearn.VectorCTable___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorCTable___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< CTable * >::difference_type", j: "std::vector< CTable * >::difference_type") -> "void":
        return _gstlearn.VectorCTable___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorCTable___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< CTable * >::value_type":
        return _gstlearn.VectorCTable___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorCTable___setitem__(self, *args)

    def pop(self) -> "std::vector< CTable * >::value_type":
        return _gstlearn.VectorCTable_pop(self)

    def append(self, x: "CTable") -> "void":
        return _gstlearn.VectorCTable_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorCTable_empty(self)

    def size(self) -> "std::vector< CTable * >::size_type":
        return _gstlearn.VectorCTable_size(self)

    def swap(self, v: "VectorCTable") -> "void":
        return _gstlearn.VectorCTable_swap(self, v)

    def begin(self) -> "std::vector< CTable * >::iterator":
        return _gstlearn.VectorCTable_begin(self)

    def end(self) -> "std::vector< CTable * >::iterator":
        return _gstlearn.VectorCTable_end(self)

    def rbegin(self) -> "std::vector< CTable * >::reverse_iterator":
        return _gstlearn.VectorCTable_rbegin(self)

    def rend(self) -> "std::vector< CTable * >::reverse_iterator":
        return _gstlearn.VectorCTable_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorCTable_clear(self)

    def get_allocator(self) -> "std::vector< CTable * >::allocator_type":
        return _gstlearn.VectorCTable_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorCTable_pop_back(self)

    def erase(self, *args) -> "std::vector< CTable * >::iterator":
        return _gstlearn.VectorCTable_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorCTable_swiginit(self, _gstlearn.new_VectorCTable(*args))

    def push_back(self, x: "CTable") -> "void":
        return _gstlearn.VectorCTable_push_back(self, x)

    def front(self) -> "std::vector< CTable * >::value_type":
        return _gstlearn.VectorCTable_front(self)

    def back(self) -> "std::vector< CTable * >::value_type":
        return _gstlearn.VectorCTable_back(self)

    def assign(self, n: "std::vector< CTable * >::size_type", x: "CTable") -> "void":
        return _gstlearn.VectorCTable_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorCTable_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorCTable_insert(self, *args)

    def reserve(self, n: "std::vector< CTable * >::size_type") -> "void":
        return _gstlearn.VectorCTable_reserve(self, n)

    def capacity(self) -> "std::vector< CTable * >::size_type":
        return _gstlearn.VectorCTable_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorCTable

# Register VectorCTable in _gstlearn:
_gstlearn.VectorCTable_swigregister(VectorCTable)

class VectorDir(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorDir_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorDir___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorDir___bool__(self)

    def __len__(self) -> "std::vector< DirParam >::size_type":
        return _gstlearn.VectorDir___len__(self)

    def __getslice__(self, i: "std::vector< DirParam >::difference_type", j: "std::vector< DirParam >::difference_type") -> "std::vector< DirParam,std::allocator< DirParam > > *":
        return _gstlearn.VectorDir___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorDir___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< DirParam >::difference_type", j: "std::vector< DirParam >::difference_type") -> "void":
        return _gstlearn.VectorDir___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorDir___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< DirParam >::value_type const &":
        return _gstlearn.VectorDir___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorDir___setitem__(self, *args)

    def pop(self) -> "std::vector< DirParam >::value_type":
        return _gstlearn.VectorDir_pop(self)

    def append(self, x: "DirParam") -> "void":
        return _gstlearn.VectorDir_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorDir_empty(self)

    def size(self) -> "std::vector< DirParam >::size_type":
        return _gstlearn.VectorDir_size(self)

    def swap(self, v: "VectorDir") -> "void":
        return _gstlearn.VectorDir_swap(self, v)

    def begin(self) -> "std::vector< DirParam >::iterator":
        return _gstlearn.VectorDir_begin(self)

    def end(self) -> "std::vector< DirParam >::iterator":
        return _gstlearn.VectorDir_end(self)

    def rbegin(self) -> "std::vector< DirParam >::reverse_iterator":
        return _gstlearn.VectorDir_rbegin(self)

    def rend(self) -> "std::vector< DirParam >::reverse_iterator":
        return _gstlearn.VectorDir_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorDir_clear(self)

    def get_allocator(self) -> "std::vector< DirParam >::allocator_type":
        return _gstlearn.VectorDir_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorDir_pop_back(self)

    def erase(self, *args) -> "std::vector< DirParam >::iterator":
        return _gstlearn.VectorDir_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorDir_swiginit(self, _gstlearn.new_VectorDir(*args))

    def push_back(self, x: "DirParam") -> "void":
        return _gstlearn.VectorDir_push_back(self, x)

    def front(self) -> "std::vector< DirParam >::value_type const &":
        return _gstlearn.VectorDir_front(self)

    def back(self) -> "std::vector< DirParam >::value_type const &":
        return _gstlearn.VectorDir_back(self)

    def assign(self, n: "std::vector< DirParam >::size_type", x: "DirParam") -> "void":
        return _gstlearn.VectorDir_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorDir_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorDir_insert(self, *args)

    def reserve(self, n: "std::vector< DirParam >::size_type") -> "void":
        return _gstlearn.VectorDir_reserve(self, n)

    def capacity(self) -> "std::vector< DirParam >::size_type":
        return _gstlearn.VectorDir_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorDir

# Register VectorDir in _gstlearn:
_gstlearn.VectorDir_swigregister(VectorDir)

class VectorDirection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorDirection_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorDirection___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorDirection___bool__(self)

    def __len__(self) -> "std::vector< Direction * >::size_type":
        return _gstlearn.VectorDirection___len__(self)

    def __getslice__(self, i: "std::vector< Direction * >::difference_type", j: "std::vector< Direction * >::difference_type") -> "std::vector< Direction *,std::allocator< Direction * > > *":
        return _gstlearn.VectorDirection___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorDirection___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Direction * >::difference_type", j: "std::vector< Direction * >::difference_type") -> "void":
        return _gstlearn.VectorDirection___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorDirection___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Direction * >::value_type":
        return _gstlearn.VectorDirection___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorDirection___setitem__(self, *args)

    def pop(self) -> "std::vector< Direction * >::value_type":
        return _gstlearn.VectorDirection_pop(self)

    def append(self, x: "Direction") -> "void":
        return _gstlearn.VectorDirection_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorDirection_empty(self)

    def size(self) -> "std::vector< Direction * >::size_type":
        return _gstlearn.VectorDirection_size(self)

    def swap(self, v: "VectorDirection") -> "void":
        return _gstlearn.VectorDirection_swap(self, v)

    def begin(self) -> "std::vector< Direction * >::iterator":
        return _gstlearn.VectorDirection_begin(self)

    def end(self) -> "std::vector< Direction * >::iterator":
        return _gstlearn.VectorDirection_end(self)

    def rbegin(self) -> "std::vector< Direction * >::reverse_iterator":
        return _gstlearn.VectorDirection_rbegin(self)

    def rend(self) -> "std::vector< Direction * >::reverse_iterator":
        return _gstlearn.VectorDirection_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorDirection_clear(self)

    def get_allocator(self) -> "std::vector< Direction * >::allocator_type":
        return _gstlearn.VectorDirection_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorDirection_pop_back(self)

    def erase(self, *args) -> "std::vector< Direction * >::iterator":
        return _gstlearn.VectorDirection_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorDirection_swiginit(self, _gstlearn.new_VectorDirection(*args))

    def push_back(self, x: "Direction") -> "void":
        return _gstlearn.VectorDirection_push_back(self, x)

    def front(self) -> "std::vector< Direction * >::value_type":
        return _gstlearn.VectorDirection_front(self)

    def back(self) -> "std::vector< Direction * >::value_type":
        return _gstlearn.VectorDirection_back(self)

    def assign(self, n: "std::vector< Direction * >::size_type", x: "Direction") -> "void":
        return _gstlearn.VectorDirection_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorDirection_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorDirection_insert(self, *args)

    def reserve(self, n: "std::vector< Direction * >::size_type") -> "void":
        return _gstlearn.VectorDirection_reserve(self, n)

    def capacity(self) -> "std::vector< Direction * >::size_type":
        return _gstlearn.VectorDirection_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorDirection

# Register VectorDirection in _gstlearn:
_gstlearn.VectorDirection_swigregister(VectorDirection)

class VectorDrft(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorDrft_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorDrft___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorDrft___bool__(self)

    def __len__(self) -> "std::vector< Drift * >::size_type":
        return _gstlearn.VectorDrft___len__(self)

    def __getslice__(self, i: "std::vector< Drift * >::difference_type", j: "std::vector< Drift * >::difference_type") -> "std::vector< Drift *,std::allocator< Drift * > > *":
        return _gstlearn.VectorDrft___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorDrft___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Drift * >::difference_type", j: "std::vector< Drift * >::difference_type") -> "void":
        return _gstlearn.VectorDrft___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorDrft___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Drift * >::value_type":
        return _gstlearn.VectorDrft___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorDrft___setitem__(self, *args)

    def pop(self) -> "std::vector< Drift * >::value_type":
        return _gstlearn.VectorDrft_pop(self)

    def append(self, x: "std::vector< Drift * >::value_type") -> "void":
        return _gstlearn.VectorDrft_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorDrft_empty(self)

    def size(self) -> "std::vector< Drift * >::size_type":
        return _gstlearn.VectorDrft_size(self)

    def swap(self, v: "VectorDrft") -> "void":
        return _gstlearn.VectorDrft_swap(self, v)

    def begin(self) -> "std::vector< Drift * >::iterator":
        return _gstlearn.VectorDrft_begin(self)

    def end(self) -> "std::vector< Drift * >::iterator":
        return _gstlearn.VectorDrft_end(self)

    def rbegin(self) -> "std::vector< Drift * >::reverse_iterator":
        return _gstlearn.VectorDrft_rbegin(self)

    def rend(self) -> "std::vector< Drift * >::reverse_iterator":
        return _gstlearn.VectorDrft_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorDrft_clear(self)

    def get_allocator(self) -> "std::vector< Drift * >::allocator_type":
        return _gstlearn.VectorDrft_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorDrft_pop_back(self)

    def erase(self, *args) -> "std::vector< Drift * >::iterator":
        return _gstlearn.VectorDrft_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorDrft_swiginit(self, _gstlearn.new_VectorDrft(*args))

    def push_back(self, x: "std::vector< Drift * >::value_type") -> "void":
        return _gstlearn.VectorDrft_push_back(self, x)

    def front(self) -> "std::vector< Drift * >::value_type":
        return _gstlearn.VectorDrft_front(self)

    def back(self) -> "std::vector< Drift * >::value_type":
        return _gstlearn.VectorDrft_back(self)

    def assign(self, n: "std::vector< Drift * >::size_type", x: "std::vector< Drift * >::value_type") -> "void":
        return _gstlearn.VectorDrft_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorDrft_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorDrft_insert(self, *args)

    def reserve(self, n: "std::vector< Drift * >::size_type") -> "void":
        return _gstlearn.VectorDrft_reserve(self, n)

    def capacity(self) -> "std::vector< Drift * >::size_type":
        return _gstlearn.VectorDrft_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorDrft

# Register VectorDrft in _gstlearn:
_gstlearn.VectorDrft_swigregister(VectorDrft)

class VectorFrac_Desc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorFrac_Desc_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorFrac_Desc___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorFrac_Desc___bool__(self)

    def __len__(self) -> "std::vector< Frac_Desc * >::size_type":
        return _gstlearn.VectorFrac_Desc___len__(self)

    def __getslice__(self, i: "std::vector< Frac_Desc * >::difference_type", j: "std::vector< Frac_Desc * >::difference_type") -> "std::vector< Frac_Desc *,std::allocator< Frac_Desc * > > *":
        return _gstlearn.VectorFrac_Desc___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorFrac_Desc___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Frac_Desc * >::difference_type", j: "std::vector< Frac_Desc * >::difference_type") -> "void":
        return _gstlearn.VectorFrac_Desc___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorFrac_Desc___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Frac_Desc * >::value_type":
        return _gstlearn.VectorFrac_Desc___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorFrac_Desc___setitem__(self, *args)

    def pop(self) -> "std::vector< Frac_Desc * >::value_type":
        return _gstlearn.VectorFrac_Desc_pop(self)

    def append(self, x: "Frac_Desc") -> "void":
        return _gstlearn.VectorFrac_Desc_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorFrac_Desc_empty(self)

    def size(self) -> "std::vector< Frac_Desc * >::size_type":
        return _gstlearn.VectorFrac_Desc_size(self)

    def swap(self, v: "VectorFrac_Desc") -> "void":
        return _gstlearn.VectorFrac_Desc_swap(self, v)

    def begin(self) -> "std::vector< Frac_Desc * >::iterator":
        return _gstlearn.VectorFrac_Desc_begin(self)

    def end(self) -> "std::vector< Frac_Desc * >::iterator":
        return _gstlearn.VectorFrac_Desc_end(self)

    def rbegin(self) -> "std::vector< Frac_Desc * >::reverse_iterator":
        return _gstlearn.VectorFrac_Desc_rbegin(self)

    def rend(self) -> "std::vector< Frac_Desc * >::reverse_iterator":
        return _gstlearn.VectorFrac_Desc_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorFrac_Desc_clear(self)

    def get_allocator(self) -> "std::vector< Frac_Desc * >::allocator_type":
        return _gstlearn.VectorFrac_Desc_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorFrac_Desc_pop_back(self)

    def erase(self, *args) -> "std::vector< Frac_Desc * >::iterator":
        return _gstlearn.VectorFrac_Desc_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorFrac_Desc_swiginit(self, _gstlearn.new_VectorFrac_Desc(*args))

    def push_back(self, x: "Frac_Desc") -> "void":
        return _gstlearn.VectorFrac_Desc_push_back(self, x)

    def front(self) -> "std::vector< Frac_Desc * >::value_type":
        return _gstlearn.VectorFrac_Desc_front(self)

    def back(self) -> "std::vector< Frac_Desc * >::value_type":
        return _gstlearn.VectorFrac_Desc_back(self)

    def assign(self, n: "std::vector< Frac_Desc * >::size_type", x: "Frac_Desc") -> "void":
        return _gstlearn.VectorFrac_Desc_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorFrac_Desc_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorFrac_Desc_insert(self, *args)

    def reserve(self, n: "std::vector< Frac_Desc * >::size_type") -> "void":
        return _gstlearn.VectorFrac_Desc_reserve(self, n)

    def capacity(self) -> "std::vector< Frac_Desc * >::size_type":
        return _gstlearn.VectorFrac_Desc_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorFrac_Desc

# Register VectorFrac_Desc in _gstlearn:
_gstlearn.VectorFrac_Desc_swigregister(VectorFrac_Desc)

class VectorFrac_Fam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorFrac_Fam_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorFrac_Fam___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorFrac_Fam___bool__(self)

    def __len__(self) -> "std::vector< Frac_Fam * >::size_type":
        return _gstlearn.VectorFrac_Fam___len__(self)

    def __getslice__(self, i: "std::vector< Frac_Fam * >::difference_type", j: "std::vector< Frac_Fam * >::difference_type") -> "std::vector< Frac_Fam *,std::allocator< Frac_Fam * > > *":
        return _gstlearn.VectorFrac_Fam___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorFrac_Fam___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Frac_Fam * >::difference_type", j: "std::vector< Frac_Fam * >::difference_type") -> "void":
        return _gstlearn.VectorFrac_Fam___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorFrac_Fam___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Frac_Fam * >::value_type":
        return _gstlearn.VectorFrac_Fam___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorFrac_Fam___setitem__(self, *args)

    def pop(self) -> "std::vector< Frac_Fam * >::value_type":
        return _gstlearn.VectorFrac_Fam_pop(self)

    def append(self, x: "Frac_Fam") -> "void":
        return _gstlearn.VectorFrac_Fam_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorFrac_Fam_empty(self)

    def size(self) -> "std::vector< Frac_Fam * >::size_type":
        return _gstlearn.VectorFrac_Fam_size(self)

    def swap(self, v: "VectorFrac_Fam") -> "void":
        return _gstlearn.VectorFrac_Fam_swap(self, v)

    def begin(self) -> "std::vector< Frac_Fam * >::iterator":
        return _gstlearn.VectorFrac_Fam_begin(self)

    def end(self) -> "std::vector< Frac_Fam * >::iterator":
        return _gstlearn.VectorFrac_Fam_end(self)

    def rbegin(self) -> "std::vector< Frac_Fam * >::reverse_iterator":
        return _gstlearn.VectorFrac_Fam_rbegin(self)

    def rend(self) -> "std::vector< Frac_Fam * >::reverse_iterator":
        return _gstlearn.VectorFrac_Fam_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorFrac_Fam_clear(self)

    def get_allocator(self) -> "std::vector< Frac_Fam * >::allocator_type":
        return _gstlearn.VectorFrac_Fam_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorFrac_Fam_pop_back(self)

    def erase(self, *args) -> "std::vector< Frac_Fam * >::iterator":
        return _gstlearn.VectorFrac_Fam_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorFrac_Fam_swiginit(self, _gstlearn.new_VectorFrac_Fam(*args))

    def push_back(self, x: "Frac_Fam") -> "void":
        return _gstlearn.VectorFrac_Fam_push_back(self, x)

    def front(self) -> "std::vector< Frac_Fam * >::value_type":
        return _gstlearn.VectorFrac_Fam_front(self)

    def back(self) -> "std::vector< Frac_Fam * >::value_type":
        return _gstlearn.VectorFrac_Fam_back(self)

    def assign(self, n: "std::vector< Frac_Fam * >::size_type", x: "Frac_Fam") -> "void":
        return _gstlearn.VectorFrac_Fam_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorFrac_Fam_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorFrac_Fam_insert(self, *args)

    def reserve(self, n: "std::vector< Frac_Fam * >::size_type") -> "void":
        return _gstlearn.VectorFrac_Fam_reserve(self, n)

    def capacity(self) -> "std::vector< Frac_Fam * >::size_type":
        return _gstlearn.VectorFrac_Fam_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorFrac_Fam

# Register VectorFrac_Fam in _gstlearn:
_gstlearn.VectorFrac_Fam_swigregister(VectorFrac_Fam)

class VectorFrac_Fault(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorFrac_Fault_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorFrac_Fault___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorFrac_Fault___bool__(self)

    def __len__(self) -> "std::vector< Frac_Fault * >::size_type":
        return _gstlearn.VectorFrac_Fault___len__(self)

    def __getslice__(self, i: "std::vector< Frac_Fault * >::difference_type", j: "std::vector< Frac_Fault * >::difference_type") -> "std::vector< Frac_Fault *,std::allocator< Frac_Fault * > > *":
        return _gstlearn.VectorFrac_Fault___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorFrac_Fault___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Frac_Fault * >::difference_type", j: "std::vector< Frac_Fault * >::difference_type") -> "void":
        return _gstlearn.VectorFrac_Fault___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorFrac_Fault___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Frac_Fault * >::value_type":
        return _gstlearn.VectorFrac_Fault___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorFrac_Fault___setitem__(self, *args)

    def pop(self) -> "std::vector< Frac_Fault * >::value_type":
        return _gstlearn.VectorFrac_Fault_pop(self)

    def append(self, x: "Frac_Fault") -> "void":
        return _gstlearn.VectorFrac_Fault_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorFrac_Fault_empty(self)

    def size(self) -> "std::vector< Frac_Fault * >::size_type":
        return _gstlearn.VectorFrac_Fault_size(self)

    def swap(self, v: "VectorFrac_Fault") -> "void":
        return _gstlearn.VectorFrac_Fault_swap(self, v)

    def begin(self) -> "std::vector< Frac_Fault * >::iterator":
        return _gstlearn.VectorFrac_Fault_begin(self)

    def end(self) -> "std::vector< Frac_Fault * >::iterator":
        return _gstlearn.VectorFrac_Fault_end(self)

    def rbegin(self) -> "std::vector< Frac_Fault * >::reverse_iterator":
        return _gstlearn.VectorFrac_Fault_rbegin(self)

    def rend(self) -> "std::vector< Frac_Fault * >::reverse_iterator":
        return _gstlearn.VectorFrac_Fault_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorFrac_Fault_clear(self)

    def get_allocator(self) -> "std::vector< Frac_Fault * >::allocator_type":
        return _gstlearn.VectorFrac_Fault_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorFrac_Fault_pop_back(self)

    def erase(self, *args) -> "std::vector< Frac_Fault * >::iterator":
        return _gstlearn.VectorFrac_Fault_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorFrac_Fault_swiginit(self, _gstlearn.new_VectorFrac_Fault(*args))

    def push_back(self, x: "Frac_Fault") -> "void":
        return _gstlearn.VectorFrac_Fault_push_back(self, x)

    def front(self) -> "std::vector< Frac_Fault * >::value_type":
        return _gstlearn.VectorFrac_Fault_front(self)

    def back(self) -> "std::vector< Frac_Fault * >::value_type":
        return _gstlearn.VectorFrac_Fault_back(self)

    def assign(self, n: "std::vector< Frac_Fault * >::size_type", x: "Frac_Fault") -> "void":
        return _gstlearn.VectorFrac_Fault_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorFrac_Fault_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorFrac_Fault_insert(self, *args)

    def reserve(self, n: "std::vector< Frac_Fault * >::size_type") -> "void":
        return _gstlearn.VectorFrac_Fault_reserve(self, n)

    def capacity(self) -> "std::vector< Frac_Fault * >::size_type":
        return _gstlearn.VectorFrac_Fault_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorFrac_Fault

# Register VectorFrac_Fault in _gstlearn:
_gstlearn.VectorFrac_Fault_swigregister(VectorFrac_Fault)

class VectorLocal_Split(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorLocal_Split_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorLocal_Split___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorLocal_Split___bool__(self)

    def __len__(self) -> "std::vector< Local_Split * >::size_type":
        return _gstlearn.VectorLocal_Split___len__(self)

    def __getslice__(self, i: "std::vector< Local_Split * >::difference_type", j: "std::vector< Local_Split * >::difference_type") -> "std::vector< Local_Split *,std::allocator< Local_Split * > > *":
        return _gstlearn.VectorLocal_Split___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorLocal_Split___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Local_Split * >::difference_type", j: "std::vector< Local_Split * >::difference_type") -> "void":
        return _gstlearn.VectorLocal_Split___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorLocal_Split___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Local_Split * >::value_type":
        return _gstlearn.VectorLocal_Split___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorLocal_Split___setitem__(self, *args)

    def pop(self) -> "std::vector< Local_Split * >::value_type":
        return _gstlearn.VectorLocal_Split_pop(self)

    def append(self, x: "Local_Split") -> "void":
        return _gstlearn.VectorLocal_Split_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorLocal_Split_empty(self)

    def size(self) -> "std::vector< Local_Split * >::size_type":
        return _gstlearn.VectorLocal_Split_size(self)

    def swap(self, v: "VectorLocal_Split") -> "void":
        return _gstlearn.VectorLocal_Split_swap(self, v)

    def begin(self) -> "std::vector< Local_Split * >::iterator":
        return _gstlearn.VectorLocal_Split_begin(self)

    def end(self) -> "std::vector< Local_Split * >::iterator":
        return _gstlearn.VectorLocal_Split_end(self)

    def rbegin(self) -> "std::vector< Local_Split * >::reverse_iterator":
        return _gstlearn.VectorLocal_Split_rbegin(self)

    def rend(self) -> "std::vector< Local_Split * >::reverse_iterator":
        return _gstlearn.VectorLocal_Split_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorLocal_Split_clear(self)

    def get_allocator(self) -> "std::vector< Local_Split * >::allocator_type":
        return _gstlearn.VectorLocal_Split_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorLocal_Split_pop_back(self)

    def erase(self, *args) -> "std::vector< Local_Split * >::iterator":
        return _gstlearn.VectorLocal_Split_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorLocal_Split_swiginit(self, _gstlearn.new_VectorLocal_Split(*args))

    def push_back(self, x: "Local_Split") -> "void":
        return _gstlearn.VectorLocal_Split_push_back(self, x)

    def front(self) -> "std::vector< Local_Split * >::value_type":
        return _gstlearn.VectorLocal_Split_front(self)

    def back(self) -> "std::vector< Local_Split * >::value_type":
        return _gstlearn.VectorLocal_Split_back(self)

    def assign(self, n: "std::vector< Local_Split * >::size_type", x: "Local_Split") -> "void":
        return _gstlearn.VectorLocal_Split_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorLocal_Split_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorLocal_Split_insert(self, *args)

    def reserve(self, n: "std::vector< Local_Split * >::size_type") -> "void":
        return _gstlearn.VectorLocal_Split_reserve(self, n)

    def capacity(self) -> "std::vector< Local_Split * >::size_type":
        return _gstlearn.VectorLocal_Split_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorLocal_Split

# Register VectorLocal_Split in _gstlearn:
_gstlearn.VectorLocal_Split_swigregister(VectorLocal_Split)

class VectorPolySet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorPolySet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorPolySet___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorPolySet___bool__(self)

    def __len__(self) -> "std::vector< PolySet * >::size_type":
        return _gstlearn.VectorPolySet___len__(self)

    def __getslice__(self, i: "std::vector< PolySet * >::difference_type", j: "std::vector< PolySet * >::difference_type") -> "std::vector< PolySet *,std::allocator< PolySet * > > *":
        return _gstlearn.VectorPolySet___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorPolySet___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< PolySet * >::difference_type", j: "std::vector< PolySet * >::difference_type") -> "void":
        return _gstlearn.VectorPolySet___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorPolySet___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< PolySet * >::value_type":
        return _gstlearn.VectorPolySet___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorPolySet___setitem__(self, *args)

    def pop(self) -> "std::vector< PolySet * >::value_type":
        return _gstlearn.VectorPolySet_pop(self)

    def append(self, x: "PolySet") -> "void":
        return _gstlearn.VectorPolySet_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorPolySet_empty(self)

    def size(self) -> "std::vector< PolySet * >::size_type":
        return _gstlearn.VectorPolySet_size(self)

    def swap(self, v: "VectorPolySet") -> "void":
        return _gstlearn.VectorPolySet_swap(self, v)

    def begin(self) -> "std::vector< PolySet * >::iterator":
        return _gstlearn.VectorPolySet_begin(self)

    def end(self) -> "std::vector< PolySet * >::iterator":
        return _gstlearn.VectorPolySet_end(self)

    def rbegin(self) -> "std::vector< PolySet * >::reverse_iterator":
        return _gstlearn.VectorPolySet_rbegin(self)

    def rend(self) -> "std::vector< PolySet * >::reverse_iterator":
        return _gstlearn.VectorPolySet_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorPolySet_clear(self)

    def get_allocator(self) -> "std::vector< PolySet * >::allocator_type":
        return _gstlearn.VectorPolySet_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorPolySet_pop_back(self)

    def erase(self, *args) -> "std::vector< PolySet * >::iterator":
        return _gstlearn.VectorPolySet_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorPolySet_swiginit(self, _gstlearn.new_VectorPolySet(*args))

    def push_back(self, x: "PolySet") -> "void":
        return _gstlearn.VectorPolySet_push_back(self, x)

    def front(self) -> "std::vector< PolySet * >::value_type":
        return _gstlearn.VectorPolySet_front(self)

    def back(self) -> "std::vector< PolySet * >::value_type":
        return _gstlearn.VectorPolySet_back(self)

    def assign(self, n: "std::vector< PolySet * >::size_type", x: "PolySet") -> "void":
        return _gstlearn.VectorPolySet_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorPolySet_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorPolySet_insert(self, *args)

    def reserve(self, n: "std::vector< PolySet * >::size_type") -> "void":
        return _gstlearn.VectorPolySet_reserve(self, n)

    def capacity(self) -> "std::vector< PolySet * >::size_type":
        return _gstlearn.VectorPolySet_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorPolySet

# Register VectorPolySet in _gstlearn:
_gstlearn.VectorPolySet_swigregister(VectorPolySet)

class VectorQChol(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorQChol_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorQChol___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorQChol___bool__(self)

    def __len__(self) -> "std::vector< QChol * >::size_type":
        return _gstlearn.VectorQChol___len__(self)

    def __getslice__(self, i: "std::vector< QChol * >::difference_type", j: "std::vector< QChol * >::difference_type") -> "std::vector< QChol *,std::allocator< QChol * > > *":
        return _gstlearn.VectorQChol___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorQChol___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< QChol * >::difference_type", j: "std::vector< QChol * >::difference_type") -> "void":
        return _gstlearn.VectorQChol___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorQChol___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< QChol * >::value_type":
        return _gstlearn.VectorQChol___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorQChol___setitem__(self, *args)

    def pop(self) -> "std::vector< QChol * >::value_type":
        return _gstlearn.VectorQChol_pop(self)

    def append(self, x: "QChol") -> "void":
        return _gstlearn.VectorQChol_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorQChol_empty(self)

    def size(self) -> "std::vector< QChol * >::size_type":
        return _gstlearn.VectorQChol_size(self)

    def swap(self, v: "VectorQChol") -> "void":
        return _gstlearn.VectorQChol_swap(self, v)

    def begin(self) -> "std::vector< QChol * >::iterator":
        return _gstlearn.VectorQChol_begin(self)

    def end(self) -> "std::vector< QChol * >::iterator":
        return _gstlearn.VectorQChol_end(self)

    def rbegin(self) -> "std::vector< QChol * >::reverse_iterator":
        return _gstlearn.VectorQChol_rbegin(self)

    def rend(self) -> "std::vector< QChol * >::reverse_iterator":
        return _gstlearn.VectorQChol_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorQChol_clear(self)

    def get_allocator(self) -> "std::vector< QChol * >::allocator_type":
        return _gstlearn.VectorQChol_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorQChol_pop_back(self)

    def erase(self, *args) -> "std::vector< QChol * >::iterator":
        return _gstlearn.VectorQChol_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorQChol_swiginit(self, _gstlearn.new_VectorQChol(*args))

    def push_back(self, x: "QChol") -> "void":
        return _gstlearn.VectorQChol_push_back(self, x)

    def front(self) -> "std::vector< QChol * >::value_type":
        return _gstlearn.VectorQChol_front(self)

    def back(self) -> "std::vector< QChol * >::value_type":
        return _gstlearn.VectorQChol_back(self)

    def assign(self, n: "std::vector< QChol * >::size_type", x: "QChol") -> "void":
        return _gstlearn.VectorQChol_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorQChol_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorQChol_insert(self, *args)

    def reserve(self, n: "std::vector< QChol * >::size_type") -> "void":
        return _gstlearn.VectorQChol_reserve(self, n)

    def capacity(self) -> "std::vector< QChol * >::size_type":
        return _gstlearn.VectorQChol_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorQChol

# Register VectorQChol in _gstlearn:
_gstlearn.VectorQChol_swigregister(VectorQChol)

class VectorSPDE_SS_Option(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorSPDE_SS_Option_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorSPDE_SS_Option___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorSPDE_SS_Option___bool__(self)

    def __len__(self) -> "std::vector< SPDE_SS_Option * >::size_type":
        return _gstlearn.VectorSPDE_SS_Option___len__(self)

    def __getslice__(self, i: "std::vector< SPDE_SS_Option * >::difference_type", j: "std::vector< SPDE_SS_Option * >::difference_type") -> "std::vector< SPDE_SS_Option *,std::allocator< SPDE_SS_Option * > > *":
        return _gstlearn.VectorSPDE_SS_Option___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorSPDE_SS_Option___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< SPDE_SS_Option * >::difference_type", j: "std::vector< SPDE_SS_Option * >::difference_type") -> "void":
        return _gstlearn.VectorSPDE_SS_Option___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorSPDE_SS_Option___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< SPDE_SS_Option * >::value_type":
        return _gstlearn.VectorSPDE_SS_Option___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorSPDE_SS_Option___setitem__(self, *args)

    def pop(self) -> "std::vector< SPDE_SS_Option * >::value_type":
        return _gstlearn.VectorSPDE_SS_Option_pop(self)

    def append(self, x: "SPDE_SS_Option") -> "void":
        return _gstlearn.VectorSPDE_SS_Option_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorSPDE_SS_Option_empty(self)

    def size(self) -> "std::vector< SPDE_SS_Option * >::size_type":
        return _gstlearn.VectorSPDE_SS_Option_size(self)

    def swap(self, v: "VectorSPDE_SS_Option") -> "void":
        return _gstlearn.VectorSPDE_SS_Option_swap(self, v)

    def begin(self) -> "std::vector< SPDE_SS_Option * >::iterator":
        return _gstlearn.VectorSPDE_SS_Option_begin(self)

    def end(self) -> "std::vector< SPDE_SS_Option * >::iterator":
        return _gstlearn.VectorSPDE_SS_Option_end(self)

    def rbegin(self) -> "std::vector< SPDE_SS_Option * >::reverse_iterator":
        return _gstlearn.VectorSPDE_SS_Option_rbegin(self)

    def rend(self) -> "std::vector< SPDE_SS_Option * >::reverse_iterator":
        return _gstlearn.VectorSPDE_SS_Option_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorSPDE_SS_Option_clear(self)

    def get_allocator(self) -> "std::vector< SPDE_SS_Option * >::allocator_type":
        return _gstlearn.VectorSPDE_SS_Option_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorSPDE_SS_Option_pop_back(self)

    def erase(self, *args) -> "std::vector< SPDE_SS_Option * >::iterator":
        return _gstlearn.VectorSPDE_SS_Option_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorSPDE_SS_Option_swiginit(self, _gstlearn.new_VectorSPDE_SS_Option(*args))

    def push_back(self, x: "SPDE_SS_Option") -> "void":
        return _gstlearn.VectorSPDE_SS_Option_push_back(self, x)

    def front(self) -> "std::vector< SPDE_SS_Option * >::value_type":
        return _gstlearn.VectorSPDE_SS_Option_front(self)

    def back(self) -> "std::vector< SPDE_SS_Option * >::value_type":
        return _gstlearn.VectorSPDE_SS_Option_back(self)

    def assign(self, n: "std::vector< SPDE_SS_Option * >::size_type", x: "SPDE_SS_Option") -> "void":
        return _gstlearn.VectorSPDE_SS_Option_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorSPDE_SS_Option_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorSPDE_SS_Option_insert(self, *args)

    def reserve(self, n: "std::vector< SPDE_SS_Option * >::size_type") -> "void":
        return _gstlearn.VectorSPDE_SS_Option_reserve(self, n)

    def capacity(self) -> "std::vector< SPDE_SS_Option * >::size_type":
        return _gstlearn.VectorSPDE_SS_Option_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorSPDE_SS_Option

# Register VectorSPDE_SS_Option in _gstlearn:
_gstlearn.VectorSPDE_SS_Option_swigregister(VectorSPDE_SS_Option)

class VectorSubPlan(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorSubPlan_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorSubPlan___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorSubPlan___bool__(self)

    def __len__(self) -> "std::vector< SubPlan * >::size_type":
        return _gstlearn.VectorSubPlan___len__(self)

    def __getslice__(self, i: "std::vector< SubPlan * >::difference_type", j: "std::vector< SubPlan * >::difference_type") -> "std::vector< SubPlan *,std::allocator< SubPlan * > > *":
        return _gstlearn.VectorSubPlan___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorSubPlan___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< SubPlan * >::difference_type", j: "std::vector< SubPlan * >::difference_type") -> "void":
        return _gstlearn.VectorSubPlan___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorSubPlan___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< SubPlan * >::value_type":
        return _gstlearn.VectorSubPlan___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorSubPlan___setitem__(self, *args)

    def pop(self) -> "std::vector< SubPlan * >::value_type":
        return _gstlearn.VectorSubPlan_pop(self)

    def append(self, x: "SubPlan") -> "void":
        return _gstlearn.VectorSubPlan_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorSubPlan_empty(self)

    def size(self) -> "std::vector< SubPlan * >::size_type":
        return _gstlearn.VectorSubPlan_size(self)

    def swap(self, v: "VectorSubPlan") -> "void":
        return _gstlearn.VectorSubPlan_swap(self, v)

    def begin(self) -> "std::vector< SubPlan * >::iterator":
        return _gstlearn.VectorSubPlan_begin(self)

    def end(self) -> "std::vector< SubPlan * >::iterator":
        return _gstlearn.VectorSubPlan_end(self)

    def rbegin(self) -> "std::vector< SubPlan * >::reverse_iterator":
        return _gstlearn.VectorSubPlan_rbegin(self)

    def rend(self) -> "std::vector< SubPlan * >::reverse_iterator":
        return _gstlearn.VectorSubPlan_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorSubPlan_clear(self)

    def get_allocator(self) -> "std::vector< SubPlan * >::allocator_type":
        return _gstlearn.VectorSubPlan_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorSubPlan_pop_back(self)

    def erase(self, *args) -> "std::vector< SubPlan * >::iterator":
        return _gstlearn.VectorSubPlan_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorSubPlan_swiginit(self, _gstlearn.new_VectorSubPlan(*args))

    def push_back(self, x: "SubPlan") -> "void":
        return _gstlearn.VectorSubPlan_push_back(self, x)

    def front(self) -> "std::vector< SubPlan * >::value_type":
        return _gstlearn.VectorSubPlan_front(self)

    def back(self) -> "std::vector< SubPlan * >::value_type":
        return _gstlearn.VectorSubPlan_back(self)

    def assign(self, n: "std::vector< SubPlan * >::size_type", x: "SubPlan") -> "void":
        return _gstlearn.VectorSubPlan_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorSubPlan_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorSubPlan_insert(self, *args)

    def reserve(self, n: "std::vector< SubPlan * >::size_type") -> "void":
        return _gstlearn.VectorSubPlan_reserve(self, n)

    def capacity(self) -> "std::vector< SubPlan * >::size_type":
        return _gstlearn.VectorSubPlan_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorSubPlan

# Register VectorSubPlan in _gstlearn:
_gstlearn.VectorSubPlan_swigregister(VectorSubPlan)

class VectorToken_Def(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorToken_Def_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorToken_Def___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorToken_Def___bool__(self)

    def __len__(self) -> "std::vector< Token_Def * >::size_type":
        return _gstlearn.VectorToken_Def___len__(self)

    def __getslice__(self, i: "std::vector< Token_Def * >::difference_type", j: "std::vector< Token_Def * >::difference_type") -> "std::vector< Token_Def *,std::allocator< Token_Def * > > *":
        return _gstlearn.VectorToken_Def___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorToken_Def___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Token_Def * >::difference_type", j: "std::vector< Token_Def * >::difference_type") -> "void":
        return _gstlearn.VectorToken_Def___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorToken_Def___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Token_Def * >::value_type":
        return _gstlearn.VectorToken_Def___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorToken_Def___setitem__(self, *args)

    def pop(self) -> "std::vector< Token_Def * >::value_type":
        return _gstlearn.VectorToken_Def_pop(self)

    def append(self, x: "Token_Def") -> "void":
        return _gstlearn.VectorToken_Def_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorToken_Def_empty(self)

    def size(self) -> "std::vector< Token_Def * >::size_type":
        return _gstlearn.VectorToken_Def_size(self)

    def swap(self, v: "VectorToken_Def") -> "void":
        return _gstlearn.VectorToken_Def_swap(self, v)

    def begin(self) -> "std::vector< Token_Def * >::iterator":
        return _gstlearn.VectorToken_Def_begin(self)

    def end(self) -> "std::vector< Token_Def * >::iterator":
        return _gstlearn.VectorToken_Def_end(self)

    def rbegin(self) -> "std::vector< Token_Def * >::reverse_iterator":
        return _gstlearn.VectorToken_Def_rbegin(self)

    def rend(self) -> "std::vector< Token_Def * >::reverse_iterator":
        return _gstlearn.VectorToken_Def_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorToken_Def_clear(self)

    def get_allocator(self) -> "std::vector< Token_Def * >::allocator_type":
        return _gstlearn.VectorToken_Def_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorToken_Def_pop_back(self)

    def erase(self, *args) -> "std::vector< Token_Def * >::iterator":
        return _gstlearn.VectorToken_Def_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorToken_Def_swiginit(self, _gstlearn.new_VectorToken_Def(*args))

    def push_back(self, x: "Token_Def") -> "void":
        return _gstlearn.VectorToken_Def_push_back(self, x)

    def front(self) -> "std::vector< Token_Def * >::value_type":
        return _gstlearn.VectorToken_Def_front(self)

    def back(self) -> "std::vector< Token_Def * >::value_type":
        return _gstlearn.VectorToken_Def_back(self)

    def assign(self, n: "std::vector< Token_Def * >::size_type", x: "Token_Def") -> "void":
        return _gstlearn.VectorToken_Def_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorToken_Def_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorToken_Def_insert(self, *args)

    def reserve(self, n: "std::vector< Token_Def * >::size_type") -> "void":
        return _gstlearn.VectorToken_Def_reserve(self, n)

    def capacity(self) -> "std::vector< Token_Def * >::size_type":
        return _gstlearn.VectorToken_Def_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorToken_Def

# Register VectorToken_Def in _gstlearn:
_gstlearn.VectorToken_Def_swigregister(VectorToken_Def)

class VectorToken_Par(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorToken_Par_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorToken_Par___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorToken_Par___bool__(self)

    def __len__(self) -> "std::vector< Token_Par * >::size_type":
        return _gstlearn.VectorToken_Par___len__(self)

    def __getslice__(self, i: "std::vector< Token_Par * >::difference_type", j: "std::vector< Token_Par * >::difference_type") -> "std::vector< Token_Par *,std::allocator< Token_Par * > > *":
        return _gstlearn.VectorToken_Par___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorToken_Par___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Token_Par * >::difference_type", j: "std::vector< Token_Par * >::difference_type") -> "void":
        return _gstlearn.VectorToken_Par___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorToken_Par___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Token_Par * >::value_type":
        return _gstlearn.VectorToken_Par___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorToken_Par___setitem__(self, *args)

    def pop(self) -> "std::vector< Token_Par * >::value_type":
        return _gstlearn.VectorToken_Par_pop(self)

    def append(self, x: "Token_Par") -> "void":
        return _gstlearn.VectorToken_Par_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorToken_Par_empty(self)

    def size(self) -> "std::vector< Token_Par * >::size_type":
        return _gstlearn.VectorToken_Par_size(self)

    def swap(self, v: "VectorToken_Par") -> "void":
        return _gstlearn.VectorToken_Par_swap(self, v)

    def begin(self) -> "std::vector< Token_Par * >::iterator":
        return _gstlearn.VectorToken_Par_begin(self)

    def end(self) -> "std::vector< Token_Par * >::iterator":
        return _gstlearn.VectorToken_Par_end(self)

    def rbegin(self) -> "std::vector< Token_Par * >::reverse_iterator":
        return _gstlearn.VectorToken_Par_rbegin(self)

    def rend(self) -> "std::vector< Token_Par * >::reverse_iterator":
        return _gstlearn.VectorToken_Par_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorToken_Par_clear(self)

    def get_allocator(self) -> "std::vector< Token_Par * >::allocator_type":
        return _gstlearn.VectorToken_Par_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorToken_Par_pop_back(self)

    def erase(self, *args) -> "std::vector< Token_Par * >::iterator":
        return _gstlearn.VectorToken_Par_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorToken_Par_swiginit(self, _gstlearn.new_VectorToken_Par(*args))

    def push_back(self, x: "Token_Par") -> "void":
        return _gstlearn.VectorToken_Par_push_back(self, x)

    def front(self) -> "std::vector< Token_Par * >::value_type":
        return _gstlearn.VectorToken_Par_front(self)

    def back(self) -> "std::vector< Token_Par * >::value_type":
        return _gstlearn.VectorToken_Par_back(self)

    def assign(self, n: "std::vector< Token_Par * >::size_type", x: "Token_Par") -> "void":
        return _gstlearn.VectorToken_Par_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorToken_Par_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorToken_Par_insert(self, *args)

    def reserve(self, n: "std::vector< Token_Par * >::size_type") -> "void":
        return _gstlearn.VectorToken_Par_reserve(self, n)

    def capacity(self) -> "std::vector< Token_Par * >::size_type":
        return _gstlearn.VectorToken_Par_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorToken_Par

# Register VectorToken_Par in _gstlearn:
_gstlearn.VectorToken_Par_swigregister(VectorToken_Par)

class VectorIntervals(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _gstlearn.VectorIntervals_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _gstlearn.VectorIntervals___nonzero__(self)

    def __bool__(self) -> "bool":
        return _gstlearn.VectorIntervals___bool__(self)

    def __len__(self) -> "std::vector< Interval * >::size_type":
        return _gstlearn.VectorIntervals___len__(self)

    def __getslice__(self, i: "std::vector< Interval * >::difference_type", j: "std::vector< Interval * >::difference_type") -> "std::vector< Interval *,std::allocator< Interval * > > *":
        return _gstlearn.VectorIntervals___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _gstlearn.VectorIntervals___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Interval * >::difference_type", j: "std::vector< Interval * >::difference_type") -> "void":
        return _gstlearn.VectorIntervals___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _gstlearn.VectorIntervals___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Interval * >::value_type":
        return _gstlearn.VectorIntervals___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _gstlearn.VectorIntervals___setitem__(self, *args)

    def pop(self) -> "std::vector< Interval * >::value_type":
        return _gstlearn.VectorIntervals_pop(self)

    def append(self, x: "Interval") -> "void":
        return _gstlearn.VectorIntervals_append(self, x)

    def empty(self) -> "bool":
        return _gstlearn.VectorIntervals_empty(self)

    def size(self) -> "std::vector< Interval * >::size_type":
        return _gstlearn.VectorIntervals_size(self)

    def swap(self, v: "VectorIntervals") -> "void":
        return _gstlearn.VectorIntervals_swap(self, v)

    def begin(self) -> "std::vector< Interval * >::iterator":
        return _gstlearn.VectorIntervals_begin(self)

    def end(self) -> "std::vector< Interval * >::iterator":
        return _gstlearn.VectorIntervals_end(self)

    def rbegin(self) -> "std::vector< Interval * >::reverse_iterator":
        return _gstlearn.VectorIntervals_rbegin(self)

    def rend(self) -> "std::vector< Interval * >::reverse_iterator":
        return _gstlearn.VectorIntervals_rend(self)

    def clear(self) -> "void":
        return _gstlearn.VectorIntervals_clear(self)

    def get_allocator(self) -> "std::vector< Interval * >::allocator_type":
        return _gstlearn.VectorIntervals_get_allocator(self)

    def pop_back(self) -> "void":
        return _gstlearn.VectorIntervals_pop_back(self)

    def erase(self, *args) -> "std::vector< Interval * >::iterator":
        return _gstlearn.VectorIntervals_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorIntervals_swiginit(self, _gstlearn.new_VectorIntervals(*args))

    def push_back(self, x: "Interval") -> "void":
        return _gstlearn.VectorIntervals_push_back(self, x)

    def front(self) -> "std::vector< Interval * >::value_type":
        return _gstlearn.VectorIntervals_front(self)

    def back(self) -> "std::vector< Interval * >::value_type":
        return _gstlearn.VectorIntervals_back(self)

    def assign(self, n: "std::vector< Interval * >::size_type", x: "Interval") -> "void":
        return _gstlearn.VectorIntervals_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _gstlearn.VectorIntervals_resize(self, *args)

    def insert(self, *args) -> "void":
        return _gstlearn.VectorIntervals_insert(self, *args)

    def reserve(self, n: "std::vector< Interval * >::size_type") -> "void":
        return _gstlearn.VectorIntervals_reserve(self, n)

    def capacity(self) -> "std::vector< Interval * >::size_type":
        return _gstlearn.VectorIntervals_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorIntervals

# Register VectorIntervals in _gstlearn:
_gstlearn.VectorIntervals_swigregister(VectorIntervals)


def ut_vector_int(nval: "int", value: "int"=0.) -> "VectorInt":
    return _gstlearn.ut_vector_int(nval, value)

def ut_vector_double(nval: "int", value: "double"=0.) -> "VectorDouble":
    return _gstlearn.ut_vector_double(nval, value)

def ut_vector_vector_double(nval1: "int", nval2: "int", value: "double"=0.) -> "VectorVectorDouble":
    return _gstlearn.ut_vector_vector_double(nval1, nval2, value)

def ut_vector_vector_int(nval1: "int", nval2: "int", value: "int"=0) -> "VectorVectorInt":
    return _gstlearn.ut_vector_vector_int(nval1, nval2, value)

def ut_ivector_set(values: "int *", number: "int") -> "VectorInt":
    return _gstlearn.ut_ivector_set(values, number)

def ut_vector_set(values: "double *", number: "int") -> "VectorDouble":
    return _gstlearn.ut_vector_set(values, number)

def ut_vector_vector_set(value: "double *", n1: "int", n2: "int") -> "VectorVectorDouble":
    return _gstlearn.ut_vector_vector_set(value, n1, n2)

def ut_vector_display(*args) -> "void":
    return _gstlearn.ut_vector_display(*args)

def ut_vector_display_stats(title: "String const &", vect: "VectorDouble") -> "void":
    return _gstlearn.ut_vector_display_stats(title, vect)

def ut_vector_display_range(title: "String const &", vect: "VectorDouble") -> "void":
    return _gstlearn.ut_vector_display_range(title, vect)

def ut_ivector_display(title: "String const &", vect: "VectorInt") -> "void":
    return _gstlearn.ut_ivector_display(title, vect)

def ut_vector_string(vec: "VectorDouble") -> "String":
    return _gstlearn.ut_vector_string(vec)

def ut_ivector_string(vec: "VectorInt") -> "String":
    return _gstlearn.ut_ivector_string(vec)

def ut_vector_max(vec: "VectorDouble", flagAbs: "bool"=False) -> "double":
    return _gstlearn.ut_vector_max(vec, flagAbs)

def ut_vector_min(vec: "VectorDouble", flagAbs: "bool"=False) -> "double":
    return _gstlearn.ut_vector_min(vec, flagAbs)

def ut_vector_mean(vec: "VectorDouble") -> "double":
    return _gstlearn.ut_vector_mean(vec)

def ut_vector_var(vec: "VectorDouble") -> "double":
    return _gstlearn.ut_vector_var(vec)

def ut_vector_stdv(vec: "VectorDouble") -> "double":
    return _gstlearn.ut_vector_stdv(vec)

def ut_vector_norm(vec: "VectorDouble") -> "double":
    return _gstlearn.ut_vector_norm(vec)

def ut_vector_inner_product(vec1: "VectorDouble", vec2: "VectorDouble") -> "double":
    return _gstlearn.ut_vector_inner_product(vec1, vec2)

def ut_vector_cross_product(vec1: "VectorDouble", vec2: "VectorDouble") -> "VectorDouble":
    return _gstlearn.ut_vector_cross_product(vec1, vec2)

def ut_vector_constant(*args, **kwargs) -> "bool":
    return _gstlearn.ut_vector_constant(*args, **kwargs)

def ut_ivector_constant(*args, **kwargs) -> "bool":
    return _gstlearn.ut_ivector_constant(*args, **kwargs)

def ut_vector_same(*args, **kwargs) -> "bool":
    return _gstlearn.ut_vector_same(*args, **kwargs)

def ut_ivector_same(v1: "VectorInt", v2: "VectorInt") -> "bool":
    return _gstlearn.ut_ivector_same(v1, v2)

def ut_vector_fill(vec: "VectorDouble", v: "double", size: "int"=0) -> "void":
    return _gstlearn.ut_vector_fill(vec, v, size)

def ut_ivector_fill(vec: "VectorInt", v: "int", size: "int"=0) -> "void":
    return _gstlearn.ut_ivector_fill(vec, v, size)

def ut_vector_add(vec1: "VectorDouble", vec2: "VectorDouble") -> "VectorDouble":
    return _gstlearn.ut_vector_add(vec1, vec2)

def ut_vector_add_inplace(vec1: "VectorDouble", vec2: "VectorDouble") -> "void":
    return _gstlearn.ut_vector_add_inplace(vec1, vec2)

def ut_vector_subtract(vec1: "VectorDouble", vec2: "VectorDouble") -> "VectorDouble":
    return _gstlearn.ut_vector_subtract(vec1, vec2)

def ut_vector_power(vec: "VectorDouble", power: "double") -> "VectorDouble":
    return _gstlearn.ut_vector_power(vec, power)

def ut_vector_cumul(vec1: "VectorDouble", vec2: "VectorDouble", coeff: "double") -> "void":
    return _gstlearn.ut_vector_cumul(vec1, vec2, coeff)

def ut_vector_copy(vec1: "VectorDouble", vec2: "VectorDouble") -> "void":
    return _gstlearn.ut_vector_copy(vec1, vec2)

def ut_vector_multiply_inplace(vec: "VectorDouble", v: "double") -> "void":
    return _gstlearn.ut_vector_multiply_inplace(vec, v)

def ut_vector_divide_inplace(vec: "VectorDouble", v: "double") -> "void":
    return _gstlearn.ut_vector_divide_inplace(vec, v)

def ut_vector_addval(vec: "VectorDouble", v: "double") -> "void":
    return _gstlearn.ut_vector_addval(vec, v)

def ut_vector_sum(vec1: "VectorDouble", vec2: "VectorDouble", res: "VectorDouble") -> "void":
    return _gstlearn.ut_vector_sum(vec1, vec2, res)

def ut_ivector_addval(vec: "VectorInt", v: "int") -> "void":
    return _gstlearn.ut_ivector_addval(vec, v)

def ut_vector_divide_vec(vec: "VectorDouble", v: "VectorDouble") -> "void":
    return _gstlearn.ut_vector_divide_vec(vec, v)

def ut_vector_count_undefined(vec: "VectorDouble") -> "int":
    return _gstlearn.ut_vector_count_undefined(vec)

def ut_vector_sample(ntotal: "int", proportion: "double", seed: "int"=242141) -> "VectorInt":
    return _gstlearn.ut_vector_sample(ntotal, proportion, seed)

def ut_vector_simulate_uniform(n: "int", mini: "double"=0., maxi: "double"=1.) -> "VectorDouble":
    return _gstlearn.ut_vector_simulate_uniform(n, mini, maxi)

def ut_vector_simulate_gaussian(n: "int", mean: "double"=0., sigma: "double"=1.) -> "VectorDouble":
    return _gstlearn.ut_vector_simulate_gaussian(n, mean, sigma)

def ut_vector_simulate_bernoulli(n: "int", proba: "double", vone: "double"=1., velse: "double"=0.) -> "VectorDouble":
    return _gstlearn.ut_vector_simulate_bernoulli(n, proba, vone, velse)

def ut_ivector_prod(nx: "VectorInt") -> "int":
    return _gstlearn.ut_ivector_prod(nx)

def ut_ivector_sequence(number: "int", ideb: "int"=0) -> "VectorInt":
    return _gstlearn.ut_ivector_sequence(number, ideb)

def ut_vector_sequence(valFrom: "double", valTo: "double", valStep: "double") -> "VectorDouble":
    return _gstlearn.ut_vector_sequence(valFrom, valTo, valStep)

def ut_vector_size(*args) -> "int":
    return _gstlearn.ut_vector_size(*args)

def ut_ivector_sort(vecin: "VectorInt", ascending: "bool"=True) -> "VectorInt":
    return _gstlearn.ut_ivector_sort(vecin, ascending)

def ut_vector_sort(vecin: "VectorDouble", ascending: "bool"=True) -> "VectorDouble":
    return _gstlearn.ut_vector_sort(vecin, ascending)
class cs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nzmax = property(_gstlearn.cs_nzmax_get, _gstlearn.cs_nzmax_set)
    m = property(_gstlearn.cs_m_get, _gstlearn.cs_m_set)
    n = property(_gstlearn.cs_n_get, _gstlearn.cs_n_set)
    p = property(_gstlearn.cs_p_get, _gstlearn.cs_p_set)
    i = property(_gstlearn.cs_i_get, _gstlearn.cs_i_set)
    x = property(_gstlearn.cs_x_get, _gstlearn.cs_x_set)
    nz = property(_gstlearn.cs_nz_get, _gstlearn.cs_nz_set)

    def __init__(self):
        _gstlearn.cs_swiginit(self, _gstlearn.new_cs())
    __swig_destroy__ = _gstlearn.delete_cs

# Register cs in _gstlearn:
_gstlearn.cs_swigregister(cs)

class css(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Pinv = property(_gstlearn.css_Pinv_get, _gstlearn.css_Pinv_set)
    Q = property(_gstlearn.css_Q_get, _gstlearn.css_Q_set)
    parent = property(_gstlearn.css_parent_get, _gstlearn.css_parent_set)
    cp = property(_gstlearn.css_cp_get, _gstlearn.css_cp_set)
    m2 = property(_gstlearn.css_m2_get, _gstlearn.css_m2_set)
    lnz = property(_gstlearn.css_lnz_get, _gstlearn.css_lnz_set)
    unz = property(_gstlearn.css_unz_get, _gstlearn.css_unz_set)

    def __init__(self):
        _gstlearn.css_swiginit(self, _gstlearn.new_css())
    __swig_destroy__ = _gstlearn.delete_css

# Register css in _gstlearn:
_gstlearn.css_swigregister(css)

class csn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    L = property(_gstlearn.csn_L_get, _gstlearn.csn_L_set)
    U = property(_gstlearn.csn_U_get, _gstlearn.csn_U_set)
    Pinv = property(_gstlearn.csn_Pinv_get, _gstlearn.csn_Pinv_set)
    B = property(_gstlearn.csn_B_get, _gstlearn.csn_B_set)

    def __init__(self):
        _gstlearn.csn_swiginit(self, _gstlearn.new_csn())
    __swig_destroy__ = _gstlearn.delete_csn

# Register csn in _gstlearn:
_gstlearn.csn_swigregister(csn)

class csd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    P = property(_gstlearn.csd_P_get, _gstlearn.csd_P_set)
    Q = property(_gstlearn.csd_Q_get, _gstlearn.csd_Q_set)
    R = property(_gstlearn.csd_R_get, _gstlearn.csd_R_set)
    S = property(_gstlearn.csd_S_get, _gstlearn.csd_S_set)
    nb = property(_gstlearn.csd_nb_get, _gstlearn.csd_nb_set)
    rr = property(_gstlearn.csd_rr_get, _gstlearn.csd_rr_set)
    cc = property(_gstlearn.csd_cc_get, _gstlearn.csd_cc_set)

    def __init__(self):
        _gstlearn.csd_swiginit(self, _gstlearn.new_csd())
    __swig_destroy__ = _gstlearn.delete_csd

# Register csd in _gstlearn:
_gstlearn.csd_swigregister(csd)

class QChol(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Q = property(_gstlearn.QChol_Q_get, _gstlearn.QChol_Q_set)
    S = property(_gstlearn.QChol_S_get, _gstlearn.QChol_S_set)
    N = property(_gstlearn.QChol_N_get, _gstlearn.QChol_N_set)

    def __init__(self):
        _gstlearn.QChol_swiginit(self, _gstlearn.new_QChol())
    __swig_destroy__ = _gstlearn.delete_QChol

# Register QChol in _gstlearn:
_gstlearn.QChol_swigregister(QChol)

class cs_MG(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nh = property(_gstlearn.cs_MG_nh_get, _gstlearn.cs_MG_nh_set)
    nH = property(_gstlearn.cs_MG_nH_get, _gstlearn.cs_MG_nH_set)
    sumrow = property(_gstlearn.cs_MG_sumrow_get, _gstlearn.cs_MG_sumrow_set)
    IhH = property(_gstlearn.cs_MG_IhH_get, _gstlearn.cs_MG_IhH_set)
    A = property(_gstlearn.cs_MG_A_get, _gstlearn.cs_MG_A_set)

    def __init__(self):
        _gstlearn.cs_MG_swiginit(self, _gstlearn.new_cs_MG())
    __swig_destroy__ = _gstlearn.delete_cs_MG

# Register cs_MG in _gstlearn:
_gstlearn.cs_MG_swigregister(cs_MG)

class cs_MGS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    flag_cg = property(_gstlearn.cs_MGS_flag_cg_get, _gstlearn.cs_MGS_flag_cg_set)
    nlevels = property(_gstlearn.cs_MGS_nlevels_get, _gstlearn.cs_MGS_nlevels_set)
    npath = property(_gstlearn.cs_MGS_npath_get, _gstlearn.cs_MGS_npath_set)
    type_coarse = property(_gstlearn.cs_MGS_type_coarse_get, _gstlearn.cs_MGS_type_coarse_set)
    ngc = property(_gstlearn.cs_MGS_ngc_get, _gstlearn.cs_MGS_ngc_set)
    nmg = property(_gstlearn.cs_MGS_nmg_get, _gstlearn.cs_MGS_nmg_set)
    ngs = property(_gstlearn.cs_MGS_ngs_get, _gstlearn.cs_MGS_ngs_set)
    ncur = property(_gstlearn.cs_MGS_ncur_get, _gstlearn.cs_MGS_ncur_set)
    path = property(_gstlearn.cs_MGS_path_get, _gstlearn.cs_MGS_path_set)
    tolnmg = property(_gstlearn.cs_MGS_tolnmg_get, _gstlearn.cs_MGS_tolnmg_set)
    tolcg = property(_gstlearn.cs_MGS_tolcg_get, _gstlearn.cs_MGS_tolcg_set)
    diag = property(_gstlearn.cs_MGS_diag_get, _gstlearn.cs_MGS_diag_set)
    mg = property(_gstlearn.cs_MGS_mg_get, _gstlearn.cs_MGS_mg_set)

    def __init__(self):
        _gstlearn.cs_MGS_swiginit(self, _gstlearn.new_cs_MGS())
    __swig_destroy__ = _gstlearn.delete_cs_MGS

# Register cs_MGS in _gstlearn:
_gstlearn.cs_MGS_swigregister(cs_MGS)

class Triplet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    flagFromOne = property(_gstlearn.Triplet_flagFromOne_get, _gstlearn.Triplet_flagFromOne_set)
    nrows = property(_gstlearn.Triplet_nrows_get, _gstlearn.Triplet_nrows_set)
    ncols = property(_gstlearn.Triplet_ncols_get, _gstlearn.Triplet_ncols_set)
    rows = property(_gstlearn.Triplet_rows_get, _gstlearn.Triplet_rows_set)
    cols = property(_gstlearn.Triplet_cols_get, _gstlearn.Triplet_cols_set)
    values = property(_gstlearn.Triplet_values_get, _gstlearn.Triplet_values_set)

    def __init__(self):
        _gstlearn.Triplet_swiginit(self, _gstlearn.new_Triplet())
    __swig_destroy__ = _gstlearn.delete_Triplet

# Register Triplet in _gstlearn:
_gstlearn.Triplet_swigregister(Triplet)


def cs_add(A: "cs", B: "cs", alpha: "double", beta: "double") -> "cs *":
    return _gstlearn.cs_add(A, B, alpha, beta)

def cs_add_cste(A: "cs", value: "double") -> "void":
    return _gstlearn.cs_add_cste(A, value)

def cs_cholsol(A: "cs", b: "double *", order: "int") -> "int":
    return _gstlearn.cs_cholsol(A, b, order)

def cs_dupl(A: "cs") -> "int":
    return _gstlearn.cs_dupl(A)

def cs_entry(T: "cs", i: "int", j: "int", x: "double") -> "int":
    return _gstlearn.cs_entry(T, i, j, x)

def cs_lusol(A: "cs", b: "double *", order: "int", tol: "double") -> "int":
    return _gstlearn.cs_lusol(A, b, order, tol)

def cs_gaxpy(A: "cs", x: "double const *", y: "double *") -> "int":
    return _gstlearn.cs_gaxpy(A, x, y)

def cs_multiply(A: "cs", B: "cs") -> "cs *":
    return _gstlearn.cs_multiply(A, B)

def cs_qrsol(A: "cs", b: "double *", order: "int") -> "int":
    return _gstlearn.cs_qrsol(A, b, order)

def cs_transpose(A: "cs", values: "int") -> "cs *":
    return _gstlearn.cs_transpose(A, values)

def cs_tmulvec(A: "cs", nout: "int", x: "double const *", y: "double *") -> "void":
    return _gstlearn.cs_tmulvec(A, nout, x, y)

def cs_mulvec(A: "cs", nout: "int", x: "double const *", y: "double *") -> "void":
    return _gstlearn.cs_mulvec(A, nout, x, y)

def cs_vecmult(A: "cs", nout: "int", x: "double const *", y: "double *") -> "void":
    return _gstlearn.cs_vecmult(A, nout, x, y)

def cs_mulvec_uptri(A: "cs", nout: "int", x: "double const *", y: "double *", flag_diag: "int") -> "void":
    return _gstlearn.cs_mulvec_uptri(A, nout, x, y, flag_diag)

def cs_mulvec_lowtri(A: "cs", nout: "int", x: "double const *", y: "double *", flag_diag: "int") -> "void":
    return _gstlearn.cs_mulvec_lowtri(A, nout, x, y, flag_diag)

def cs_matvecR(A: "cs", x: "double *", oper: "int") -> "cs *":
    return _gstlearn.cs_matvecR(A, x, oper)

def cs_matvecL(A: "cs", x: "double *", oper: "int") -> "cs *":
    return _gstlearn.cs_matvecL(A, x, oper)

def cs_matvecnorm(A: "cs", x: "double const *", oper: "int") -> "cs *":
    return _gstlearn.cs_matvecnorm(A, x, oper)

def cs_matvecnorm_inplace(A: "cs", x: "double const *", oper: "int") -> "void":
    return _gstlearn.cs_matvecnorm_inplace(A, x, oper)

def cs_triplet(T: "cs") -> "cs *":
    return _gstlearn.cs_triplet(T)

def cs_norm(A: "cs") -> "double":
    return _gstlearn.cs_norm(A)

def cs_print(A: "cs", brief: "int") -> "int":
    return _gstlearn.cs_print(A, brief)

def cs_print_only(title: "char const *", A: "cs", nlimit: "int") -> "void":
    return _gstlearn.cs_print_only(title, A, nlimit)

def cs_print_nice(title: "char const *", A: "cs", maxrow: "int", maxcol: "int") -> "void":
    return _gstlearn.cs_print_nice(title, A, maxrow, maxcol)

def cs_load(f: "FILE *") -> "cs *":
    return _gstlearn.cs_load(f)

def cs_col_sumrow(A: "cs", ncol: "int *", nrow: "int *") -> "double *":
    return _gstlearn.cs_col_sumrow(A, ncol, nrow)

def cs_print_dim(title: "char const *", A: "cs") -> "void":
    return _gstlearn.cs_print_dim(title, A)

def cs_print_short(title: "char const *", L: "cs", nmax: "int") -> "void":
    return _gstlearn.cs_print_short(title, L, nmax)

def cs_print_file(radix: "char const *", rank: "int", A: "cs") -> "void":
    return _gstlearn.cs_print_file(radix, rank, A)

def cs_compress(A: "cs") -> "cs *":
    return _gstlearn.cs_compress(A)

def cs_color_coding(Q: "cs", start: "int", ncolor: "int *") -> "int *":
    return _gstlearn.cs_color_coding(Q, start, ncolor)

def cs_invert(*args, **kwargs) -> "cs *":
    return _gstlearn.cs_invert(*args, **kwargs)

def cs_calloc(n: "int", size: "size_t") -> "void *":
    return _gstlearn.cs_calloc(n, size)

def cs_free(p: "void *") -> "void *":
    return _gstlearn.cs_free(p)

def cs_realloc(p: "void *", n: "int", size: "size_t", ok: "int *") -> "void *":
    return _gstlearn.cs_realloc(p, n, size, ok)

def cs_spalloc(m: "int", n: "int", nzmax: "int", values: "int", triplet: "int") -> "cs *":
    return _gstlearn.cs_spalloc(m, n, nzmax, values, triplet)

def cs_spfree(A: "cs") -> "cs *":
    return _gstlearn.cs_spfree(A)

def cs_sprealloc(A: "cs", nzmax: "int") -> "int":
    return _gstlearn.cs_sprealloc(A, nzmax)

def cs_malloc(n: "int", size: "size_t") -> "void *":
    return _gstlearn.cs_malloc(n, size)

def cs_amd(A: "cs", order: "int") -> "int *":
    return _gstlearn.cs_amd(A, order)

def cs_chol(A: "cs", S: "css") -> "csn *":
    return _gstlearn.cs_chol(A, S)

def cs_dmperm(A: "cs") -> "csd *":
    return _gstlearn.cs_dmperm(A)

def cs_droptol(A: "cs", tol: "double") -> "int":
    return _gstlearn.cs_droptol(A, tol)

def cs_dropzeros(A: "cs") -> "int":
    return _gstlearn.cs_dropzeros(A)

def cs_happly(V: "cs", i: "int", beta: "double", x: "double *") -> "int":
    return _gstlearn.cs_happly(V, i, beta, x)

def cs_ipvec(n: "int", P: "int const *", b: "double const *", x: "double *") -> "int":
    return _gstlearn.cs_ipvec(n, P, b, x)

def cs_lsolve_lowtri(L: "cs", x: "double const *", y: "double *") -> "int":
    return _gstlearn.cs_lsolve_lowtri(L, x, y)

def cs_lsolve_uptri(L: "cs", x: "double const *", y: "double *") -> "int":
    return _gstlearn.cs_lsolve_uptri(L, x, y)

def cs_lsolve(L: "cs", x: "double *") -> "int":
    return _gstlearn.cs_lsolve(L, x)

def cs_ltsolve(L: "cs", x: "double *") -> "int":
    return _gstlearn.cs_ltsolve(L, x)

def cs_lu(A: "cs", S: "css", tol: "double") -> "csn *":
    return _gstlearn.cs_lu(A, S, tol)

def cs_permute(A: "cs", P: "int const *", Q: "int const *", values: "int") -> "cs *":
    return _gstlearn.cs_permute(A, P, Q, values)

def cs_pinv(P: "int const *", n: "int") -> "int *":
    return _gstlearn.cs_pinv(P, n)

def cs_pvec(n: "int", P: "int const *", b: "double const *", x: "double *") -> "int":
    return _gstlearn.cs_pvec(n, P, b, x)

def cs_qr(A: "cs", S: "css") -> "csn *":
    return _gstlearn.cs_qr(A, S)

def cs_schol(A: "cs", order: "int") -> "css *":
    return _gstlearn.cs_schol(A, order)

def cs_sqr(A: "cs", order: "int", qr: "int") -> "css *":
    return _gstlearn.cs_sqr(A, order, qr)

def cs_symperm(A: "cs", Pinv: "int const *", values: "int") -> "cs *":
    return _gstlearn.cs_symperm(A, Pinv, values)

def cs_usolve(U: "cs", x: "double *") -> "int":
    return _gstlearn.cs_usolve(U, x)

def cs_utsolve(U: "cs", x: "double *") -> "int":
    return _gstlearn.cs_utsolve(U, x)

def cs_updown(L: "cs", sigma: "int", C: "cs", parent: "int const *") -> "int":
    return _gstlearn.cs_updown(L, sigma, C, parent)

def cs_sfree(S: "css") -> "css *":
    return _gstlearn.cs_sfree(S)

def cs_nfree(N: "csn") -> "csn *":
    return _gstlearn.cs_nfree(N)

def cs_dfree(D: "csd") -> "csd *":
    return _gstlearn.cs_dfree(D)

def cs_counts(A: "cs", parent: "int const *", post: "int const *", ata: "int") -> "int *":
    return _gstlearn.cs_counts(A, parent, post, ata)

def cs_cumsum(p: "int *", c: "int *", n: "int") -> "int":
    return _gstlearn.cs_cumsum(p, c, n)

def cs_dfs(j: "int", L: "cs", top: "int", xi: "int *", pstack: "int *", Pinv: "int const *") -> "int":
    return _gstlearn.cs_dfs(j, L, top, xi, pstack, Pinv)

def cs_etree(A: "cs", ata: "int") -> "int *":
    return _gstlearn.cs_etree(A, ata)

def cs_fkeep(A: "cs", fkeep: "int (*)(int,int,double,void *)", other: "void *") -> "int":
    return _gstlearn.cs_fkeep(A, fkeep, other)

def cs_house(x: "double *", beta: "double *", n: "int") -> "double":
    return _gstlearn.cs_house(x, beta, n)

def cs_maxtrans(A: "cs") -> "int *":
    return _gstlearn.cs_maxtrans(A)

def cs_post(n: "int", parent: "int const *") -> "int *":
    return _gstlearn.cs_post(n, parent)

def cs_reach(L: "cs", B: "cs", k: "int", xi: "int *", Pinv: "int const *") -> "int":
    return _gstlearn.cs_reach(L, B, k, xi, Pinv)

def cs_scc(A: "cs") -> "csd *":
    return _gstlearn.cs_scc(A)

def cs_scatter(A: "cs", j: "int", beta: "double", w: "int *", x: "double *", mark: "int", C: "cs", nz: "int") -> "int":
    return _gstlearn.cs_scatter(A, j, beta, w, x, mark, C, nz)

def cs_splsolve(L: "cs", B: "cs", k: "int", xi: "int *", x: "double *", Pinv: "int const *") -> "int":
    return _gstlearn.cs_splsolve(L, B, k, xi, x, Pinv)

def cs_tdfs(j: "int", k: "int", head: "int *", next: "int const *", post: "int *", stack: "int *") -> "int":
    return _gstlearn.cs_tdfs(j, k, head, next, post, stack)

def cs_dalloc(m: "int", n: "int") -> "csd *":
    return _gstlearn.cs_dalloc(m, n)

def cs_done(C: "cs", w: "void *", x: "void *", ok: "int") -> "cs *":
    return _gstlearn.cs_done(C, w, x, ok)

def cs_idone(p: "int *", C: "cs", w: "void *", ok: "int") -> "int *":
    return _gstlearn.cs_idone(p, C, w, ok)

def cs_ndone(N: "csn", C: "cs", w: "void *", x: "void *", ok: "int") -> "csn *":
    return _gstlearn.cs_ndone(N, C, w, x, ok)

def cs_ddone(D: "csd", C: "cs", w: "void *", ok: "int") -> "csd *":
    return _gstlearn.cs_ddone(D, C, w, ok)

def cs_sparse_to_triplet(A: "cs", flag_from_1: "int", number: "int *", cols: "int **", rows: "int **", vals: "double **") -> "void":
    return _gstlearn.cs_sparse_to_triplet(A, flag_from_1, number, cols, rows, vals)

def cs_arrays_to_sparse(n: "int", nrow: "int", ncol: "int", rows: "double *", cols: "double *", vals: "double *") -> "cs *":
    return _gstlearn.cs_arrays_to_sparse(n, nrow, ncol, rows, cols, vals)

def cs_extract_submatrix(C: "cs", row_from: "int", row_length: "int", col_from: "int", col_length: "int") -> "cs *":
    return _gstlearn.cs_extract_submatrix(C, row_from, row_length, col_from, col_length)

def cs_extract_submatrix_by_ranks(C: "cs", row_array: "int *", col_array: "int *") -> "cs *":
    return _gstlearn.cs_extract_submatrix_by_ranks(C, row_array, col_array)

def cs_extract_submatrix_by_color(C: "cs", colors: "int *", ref_color: "int", row_ok: "int", col_ok: "int") -> "cs *":
    return _gstlearn.cs_extract_submatrix_by_color(C, colors, ref_color, row_ok, col_ok)

def cs_print_range(title: "char const *", C: "cs") -> "void":
    return _gstlearn.cs_print_range(title, C)

def cs_eye(number: "int", value: "double") -> "cs *":
    return _gstlearn.cs_eye(number, value)

def cs_eye_tab(number: "int", values: "double *") -> "cs *":
    return _gstlearn.cs_eye_tab(number, values)

def cs_extract_diag(C: "cs", mode: "int") -> "cs *":
    return _gstlearn.cs_extract_diag(C, mode)

def cs_diag_suppress(C: "cs") -> "void":
    return _gstlearn.cs_diag_suppress(C)

def csd_extract_diag(C: "cs", mode: "int") -> "double *":
    return _gstlearn.csd_extract_diag(C, mode)

def cs_sort_i(C: "cs") -> "int":
    return _gstlearn.cs_sort_i(C)

def sparseinv(n: "int", Lp: "int *", Li: "int *", Lx: "double *", d: "double *", Up: "int *", Uj: "int *", Ux: "double *", Zp: "int *", Zi: "int *", Zx: "double *", z: "double *", Zdiagp: "int *", Lmunch: "int *") -> "int":
    return _gstlearn.sparseinv(n, Lp, Li, Lx, d, Up, Uj, Ux, Zp, Zi, Zx, z, Zdiagp, Lmunch)

def cs_rowcol(A: "cs", nrows: "int *", ncols: "int *", count: "int *", percent: "double *") -> "void":
    return _gstlearn.cs_rowcol(A, nrows, ncols, count, percent)

def cs_duplicate(b1: "cs") -> "cs *":
    return _gstlearn.cs_duplicate(b1)

def cs_multiply_and_release(b1: "cs", b2: "cs", flag_rel: "int") -> "cs *":
    return _gstlearn.cs_multiply_and_release(b1, b2, flag_rel)

def cs_add_and_release(b1: "cs", b2: "cs", alpha: "double", beta: "double", flag_rel: "int") -> "cs *":
    return _gstlearn.cs_add_and_release(b1, b2, alpha, beta, flag_rel)

def cs_normalize_by_diag_and_release(Q: "cs", flag_rel: "int") -> "cs *":
    return _gstlearn.cs_normalize_by_diag_and_release(Q, flag_rel)

def cs_prod_norm(mode: "int", A: "cs", IhH: "cs") -> "cs *":
    return _gstlearn.cs_prod_norm(mode, A, IhH)

def cs_prod_norm_and_release(b1: "cs", _lambda: "cs", flag_rel: "int") -> "cs *":
    return _gstlearn.cs_prod_norm_and_release(b1, _lambda, flag_rel)

def cs_coarsening(Q: "cs", type: "int", indCo: "int **", L: "cs **") -> "int":
    return _gstlearn.cs_coarsening(Q, type, indCo, L)

def cs_interpolate(AA: "cs", LL: "cs", indCo: "int *") -> "cs *":
    return _gstlearn.cs_interpolate(AA, LL, indCo)

def cs_triangle(A: "cs", flag_upper: "int", flag_diag: "int") -> "cs *":
    return _gstlearn.cs_triangle(A, flag_upper, flag_diag)

def cs_keypair(key: "char const *", A: "cs", flag_from_1: "int") -> "void":
    return _gstlearn.cs_keypair(key, A, flag_from_1)

def cs_scale(C: "cs") -> "int":
    return _gstlearn.cs_scale(C)

def cs_get_nrow(A: "cs") -> "int":
    return _gstlearn.cs_get_nrow(A)

def cs_get_ncol(A: "cs") -> "int":
    return _gstlearn.cs_get_ncol(A)

def cs_get_ncell(A: "cs") -> "int":
    return _gstlearn.cs_get_ncell(A)

def cs_get_value(A: "cs", row: "int", col: "int") -> "double":
    return _gstlearn.cs_get_value(A, row, col)

def cs_set_value(A: "cs", row: "int", col: "int", value: "double") -> "void":
    return _gstlearn.cs_set_value(A, row, col, value)

def cs_toArray(A: "cs") -> "double *":
    return _gstlearn.cs_toArray(A)

def cs_strip(A: "cs", eps: "double", hypothesis: "int"=3, verbose: "bool"=False) -> "cs *":
    return _gstlearn.cs_strip(A, eps, hypothesis, verbose)

def cs_nnz(A: "cs") -> "int":
    return _gstlearn.cs_nnz(A)

def qchol_cholesky(verbose: "int", QC: "QChol") -> "int":
    return _gstlearn.qchol_cholesky(verbose, QC)

def cs_chol_invert(qctt: "QChol", xcr: "double *", rhs: "double *", work: "double *") -> "void":
    return _gstlearn.cs_chol_invert(qctt, xcr, rhs, work)

def cs_chol_simulate(qctt: "QChol", simu: "double *", work: "double *") -> "void":
    return _gstlearn.cs_chol_simulate(qctt, simu, work)

def cs_multigrid_manage(mgs: "cs_MGS", mode: "int", nlevels: "int", path_type: "int") -> "cs_MGS *":
    return _gstlearn.cs_multigrid_manage(mgs, mode, nlevels, path_type)

def cs_multigrid_params(mgs: "cs_MGS", flag_cg: "int", type_coarse: "int", ngc: "int", nmg: "int", ngs: "int", tolgc: "double", tolnmg: "double") -> "void":
    return _gstlearn.cs_multigrid_params(mgs, flag_cg, type_coarse, ngc, nmg, ngs, tolgc, tolnmg)

def cs_multigrid_print(mgs: "cs_MGS") -> "void":
    return _gstlearn.cs_multigrid_print(mgs)

def cs_multigrid_get_nlevels(mgs: "cs_MGS") -> "int":
    return _gstlearn.cs_multigrid_get_nlevels(mgs)

def cs_multigrid_setup(mgs: "cs_MGS", Qctt: "QChol", flag_sel: "int", verbose: "int", sel: "double **") -> "int":
    return _gstlearn.cs_multigrid_setup(mgs, Qctt, flag_sel, verbose, sel)

def cs_multigrid_process(mgs: "cs_MGS", qctt: "QChol", verbose: "int", x: "double *", b: "double *", work: "double *") -> "int":
    return _gstlearn.cs_multigrid_process(mgs, qctt, verbose, x, b, work)

def cs_multigrid_coarse2fine(mgs: "cs_MGS", z: "double *", work: "double *") -> "void":
    return _gstlearn.cs_multigrid_coarse2fine(mgs, z, work)

def csToTriplet(A: "cs", flag_from_1: "bool"=False) -> "Triplet":
    return _gstlearn.csToTriplet(A, flag_from_1)

def toStringDim(title: "String const &", A: "cs") -> "String":
    return _gstlearn.toStringDim(title, A)

def toStringRange(title: "String const &", C: "cs") -> "String":
    return _gstlearn.toStringRange(title, C)

def cs_isSymmetric(A: "cs", verbose: "bool"=False, detail: "bool"=False) -> "bool":
    return _gstlearn.cs_isSymmetric(A, verbose, detail)

def cs_isDiagonalDominant(A: "cs", verbose: "bool"=False, detail: "bool"=False) -> "bool":
    return _gstlearn.cs_isDiagonalDominant(A, verbose, detail)

def cs_isDefinitePositive(A: "cs", verbose: "bool"=False) -> "bool":
    return _gstlearn.cs_isDefinitePositive(A, verbose)
EPSILON1 = _gstlearn.EPSILON1
EPSILON2 = _gstlearn.EPSILON2
EPSILON3 = _gstlearn.EPSILON3
EPSILON4 = _gstlearn.EPSILON4
EPSILON5 = _gstlearn.EPSILON5
EPSILON6 = _gstlearn.EPSILON6
EPSILON7 = _gstlearn.EPSILON7
EPSILON8 = _gstlearn.EPSILON8
EPSILON9 = _gstlearn.EPSILON9
EPSILON10 = _gstlearn.EPSILON10
EPSILON20 = _gstlearn.EPSILON20
EPSGRAD = _gstlearn.EPSGRAD
TEST = _gstlearn.TEST
TEST_COMP = _gstlearn.TEST_COMP
ITEST = _gstlearn.ITEST
ASCII_TEST = _gstlearn.ASCII_TEST
BUFFER_LENGTH = _gstlearn.BUFFER_LENGTH
STRING_LENGTH = _gstlearn.STRING_LENGTH
LOCAL_SIZE = _gstlearn.LOCAL_SIZE
LONG_SIZE = _gstlearn.LONG_SIZE
GV_PI = _gstlearn.GV_PI
GV_EE = _gstlearn.GV_EE
MAX_INT = _gstlearn.MAX_INT
MAX_PARAM = _gstlearn.MAX_PARAM
MAX_EXP = _gstlearn.MAX_EXP
MAX_EXP2 = _gstlearn.MAX_EXP2
THRESH_INF = _gstlearn.THRESH_INF
THRESH_SUP = _gstlearn.THRESH_SUP
class Koption(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    calcul = property(_gstlearn.Koption_calcul_get, _gstlearn.Koption_calcul_set)
    ndim = property(_gstlearn.Koption_ndim_get, _gstlearn.Koption_ndim_set)
    ntot = property(_gstlearn.Koption_ntot_get, _gstlearn.Koption_ntot_set)
    ndisc = property(_gstlearn.Koption_ndisc_get, _gstlearn.Koption_ndisc_set)
    disc1 = property(_gstlearn.Koption_disc1_get, _gstlearn.Koption_disc1_set)
    disc2 = property(_gstlearn.Koption_disc2_get, _gstlearn.Koption_disc2_set)
    flag_data_disc = property(_gstlearn.Koption_flag_data_disc_get, _gstlearn.Koption_flag_data_disc_set)
    dsize = property(_gstlearn.Koption_dsize_get, _gstlearn.Koption_dsize_set)

    def __init__(self):
        _gstlearn.Koption_swiginit(self, _gstlearn.new_Koption())
    __swig_destroy__ = _gstlearn.delete_Koption

# Register Koption in _gstlearn:
_gstlearn.Koption_swigregister(Koption)

class Direction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tmin = property(_gstlearn.Direction_tmin_get, _gstlearn.Direction_tmin_set)
    tmax = property(_gstlearn.Direction_tmax_get, _gstlearn.Direction_tmax_set)
    scale = property(_gstlearn.Direction_scale_get, _gstlearn.Direction_scale_set)
    t00 = property(_gstlearn.Direction_t00_get, _gstlearn.Direction_t00_set)
    dxp = property(_gstlearn.Direction_dxp_get, _gstlearn.Direction_dxp_set)
    dyp = property(_gstlearn.Direction_dyp_get, _gstlearn.Direction_dyp_set)
    dzp = property(_gstlearn.Direction_dzp_get, _gstlearn.Direction_dzp_set)
    ang = property(_gstlearn.Direction_ang_get, _gstlearn.Direction_ang_set)

    def __init__(self):
        _gstlearn.Direction_swiginit(self, _gstlearn.new_Direction())
    __swig_destroy__ = _gstlearn.delete_Direction

# Register Direction in _gstlearn:
_gstlearn.Direction_swigregister(Direction)

class Situba(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nbands = property(_gstlearn.Situba_nbands_get, _gstlearn.Situba_nbands_set)
    nbtuba = property(_gstlearn.Situba_nbtuba_get, _gstlearn.Situba_nbtuba_set)
    nbsimu = property(_gstlearn.Situba_nbsimu_get, _gstlearn.Situba_nbsimu_set)
    max_alloc = property(_gstlearn.Situba_max_alloc_get, _gstlearn.Situba_max_alloc_set)
    nb_points_simu = property(_gstlearn.Situba_nb_points_simu_get, _gstlearn.Situba_nb_points_simu_set)
    theta = property(_gstlearn.Situba_theta_get, _gstlearn.Situba_theta_set)
    field = property(_gstlearn.Situba_field_get, _gstlearn.Situba_field_set)
    seeds = property(_gstlearn.Situba_seeds_get, _gstlearn.Situba_seeds_set)
    senug = property(_gstlearn.Situba_senug_get, _gstlearn.Situba_senug_set)
    codir = property(_gstlearn.Situba_codir_get, _gstlearn.Situba_codir_set)

    def __init__(self):
        _gstlearn.Situba_swiginit(self, _gstlearn.new_Situba())
    __swig_destroy__ = _gstlearn.delete_Situba

# Register Situba in _gstlearn:
_gstlearn.Situba_swigregister(Situba)

class Token_Par(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    law = property(_gstlearn.Token_Par_law_get, _gstlearn.Token_Par_law_set)
    valarg = property(_gstlearn.Token_Par_valarg_get, _gstlearn.Token_Par_valarg_set)

    def __init__(self):
        _gstlearn.Token_Par_swiginit(self, _gstlearn.new_Token_Par())
    __swig_destroy__ = _gstlearn.delete_Token_Par

# Register Token_Par in _gstlearn:
_gstlearn.Token_Par_swigregister(Token_Par)

class Token_Def(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_gstlearn.Token_Def_type_get, _gstlearn.Token_Def_type_set)
    npar = property(_gstlearn.Token_Def_npar_get, _gstlearn.Token_Def_npar_set)
    factor_x2y = property(_gstlearn.Token_Def_factor_x2y_get, _gstlearn.Token_Def_factor_x2y_set)
    factor_x2z = property(_gstlearn.Token_Def_factor_x2z_get, _gstlearn.Token_Def_factor_x2z_set)
    factor_y2z = property(_gstlearn.Token_Def_factor_y2z_get, _gstlearn.Token_Def_factor_y2z_set)
    prop = property(_gstlearn.Token_Def_prop_get, _gstlearn.Token_Def_prop_set)
    pars = property(_gstlearn.Token_Def_pars_get, _gstlearn.Token_Def_pars_set)

    def __init__(self):
        _gstlearn.Token_Def_swiginit(self, _gstlearn.new_Token_Def())
    __swig_destroy__ = _gstlearn.delete_Token_Def

# Register Token_Def in _gstlearn:
_gstlearn.Token_Def_swigregister(Token_Def)

class Tokens(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nb_tokens = property(_gstlearn.Tokens_nb_tokens_get, _gstlearn.Tokens_nb_tokens_set)
    defs = property(_gstlearn.Tokens_defs_get, _gstlearn.Tokens_defs_set)

    def __init__(self):
        _gstlearn.Tokens_swiginit(self, _gstlearn.new_Tokens())
    __swig_destroy__ = _gstlearn.delete_Tokens

# Register Tokens in _gstlearn:
_gstlearn.Tokens_swigregister(Tokens)

class Local_Bool_Object(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_gstlearn.Local_Bool_Object_type_get, _gstlearn.Local_Bool_Object_type_set)
    seed = property(_gstlearn.Local_Bool_Object_seed_get, _gstlearn.Local_Bool_Object_seed_set)
    address = property(_gstlearn.Local_Bool_Object_address_get, _gstlearn.Local_Bool_Object_address_set)
    center = property(_gstlearn.Local_Bool_Object_center_get, _gstlearn.Local_Bool_Object_center_set)
    extension = property(_gstlearn.Local_Bool_Object_extension_get, _gstlearn.Local_Bool_Object_extension_set)
    orientation = property(_gstlearn.Local_Bool_Object_orientation_get, _gstlearn.Local_Bool_Object_orientation_set)
    values = property(_gstlearn.Local_Bool_Object_values_get, _gstlearn.Local_Bool_Object_values_set)
    box = property(_gstlearn.Local_Bool_Object_box_get, _gstlearn.Local_Bool_Object_box_set)

    def __init__(self):
        _gstlearn.Local_Bool_Object_swiginit(self, _gstlearn.new_Local_Bool_Object())
    __swig_destroy__ = _gstlearn.delete_Local_Bool_Object

# Register Local_Bool_Object in _gstlearn:
_gstlearn.Local_Bool_Object_swigregister(Local_Bool_Object)

class Bool_Cond(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    center = property(_gstlearn.Bool_Cond_center_get, _gstlearn.Bool_Cond_center_set)
    nb_cover = property(_gstlearn.Bool_Cond_nb_cover_get, _gstlearn.Bool_Cond_nb_cover_set)

    def __init__(self):
        _gstlearn.Bool_Cond_swiginit(self, _gstlearn.new_Bool_Cond())
    __swig_destroy__ = _gstlearn.delete_Bool_Cond

# Register Bool_Cond in _gstlearn:
_gstlearn.Bool_Cond_swigregister(Bool_Cond)

class StrMod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    norder = property(_gstlearn.StrMod_norder_get, _gstlearn.StrMod_norder_set)
    nmodel = property(_gstlearn.StrMod_nmodel_get, _gstlearn.StrMod_nmodel_set)
    npar_init = property(_gstlearn.StrMod_npar_init_get, _gstlearn.StrMod_npar_init_set)
    models = property(_gstlearn.StrMod_models_get, _gstlearn.StrMod_models_set)
    optvar = property(_gstlearn.StrMod_optvar_get, _gstlearn.StrMod_optvar_set)
    user_data = property(_gstlearn.StrMod_user_data_get, _gstlearn.StrMod_user_data_set)
    parid = property(_gstlearn.StrMod_parid_get, _gstlearn.StrMod_parid_set)
    covtab = property(_gstlearn.StrMod_covtab_get, _gstlearn.StrMod_covtab_set)

    def __init__(self):
        _gstlearn.StrMod_swiginit(self, _gstlearn.new_StrMod())
    __swig_destroy__ = _gstlearn.delete_StrMod

# Register StrMod in _gstlearn:
_gstlearn.StrMod_swigregister(StrMod)

class Props(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    case_facies = property(_gstlearn.Props_case_facies_get, _gstlearn.Props_case_facies_set)
    case_stat = property(_gstlearn.Props_case_stat_get, _gstlearn.Props_case_stat_set)
    case_prop_interp = property(_gstlearn.Props_case_prop_interp_get, _gstlearn.Props_case_prop_interp_set)
    ngrf = property(_gstlearn.Props_ngrf_get, _gstlearn.Props_ngrf_set)
    nfac = property(_gstlearn.Props_nfac_get, _gstlearn.Props_nfac_set)
    nfaccur = property(_gstlearn.Props_nfaccur_get, _gstlearn.Props_nfaccur_set)
    nfacprod = property(_gstlearn.Props_nfacprod_get, _gstlearn.Props_nfacprod_set)
    nfacmax = property(_gstlearn.Props_nfacmax_get, _gstlearn.Props_nfacmax_set)
    mode = property(_gstlearn.Props_mode_get, _gstlearn.Props_mode_set)
    propfix = property(_gstlearn.Props_propfix_get, _gstlearn.Props_propfix_set)
    propmem = property(_gstlearn.Props_propmem_get, _gstlearn.Props_propmem_set)
    propwrk = property(_gstlearn.Props_propwrk_get, _gstlearn.Props_propwrk_set)
    proploc = property(_gstlearn.Props_proploc_get, _gstlearn.Props_proploc_set)
    coor = property(_gstlearn.Props_coor_get, _gstlearn.Props_coor_set)
    dbprop = property(_gstlearn.Props_dbprop_get, _gstlearn.Props_dbprop_set)

    def __init__(self):
        _gstlearn.Props_swiginit(self, _gstlearn.new_Props())
    __swig_destroy__ = _gstlearn.delete_Props

# Register Props in _gstlearn:
_gstlearn.Props_swigregister(Props)

class Modif_Categorical(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ipgs = property(_gstlearn.Modif_Categorical_ipgs_get, _gstlearn.Modif_Categorical_ipgs_set)
    flag_used = property(_gstlearn.Modif_Categorical_flag_used_get, _gstlearn.Modif_Categorical_flag_used_set)
    rule = property(_gstlearn.Modif_Categorical_rule_get, _gstlearn.Modif_Categorical_rule_set)
    propdef = property(_gstlearn.Modif_Categorical_propdef_get, _gstlearn.Modif_Categorical_propdef_set)

    def __init__(self):
        _gstlearn.Modif_Categorical_swiginit(self, _gstlearn.new_Modif_Categorical())
    __swig_destroy__ = _gstlearn.delete_Modif_Categorical

# Register Modif_Categorical in _gstlearn:
_gstlearn.Modif_Categorical_swigregister(Modif_Categorical)

class Skin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nxyz = property(_gstlearn.Skin_nxyz_get, _gstlearn.Skin_nxyz_set)
    ndim = property(_gstlearn.Skin_ndim_get, _gstlearn.Skin_ndim_set)
    nval = property(_gstlearn.Skin_nval_get, _gstlearn.Skin_nval_set)
    size = property(_gstlearn.Skin_size_get, _gstlearn.Skin_size_set)
    quant = property(_gstlearn.Skin_quant_get, _gstlearn.Skin_quant_set)
    date = property(_gstlearn.Skin_date_get, _gstlearn.Skin_date_set)
    nalloc = property(_gstlearn.Skin_nalloc_get, _gstlearn.Skin_nalloc_set)
    nval_max = property(_gstlearn.Skin_nval_max_get, _gstlearn.Skin_nval_max_set)
    total = property(_gstlearn.Skin_total_get, _gstlearn.Skin_total_set)
    total_max = property(_gstlearn.Skin_total_max_get, _gstlearn.Skin_total_max_set)
    address = property(_gstlearn.Skin_address_get, _gstlearn.Skin_address_set)
    energy = property(_gstlearn.Skin_energy_get, _gstlearn.Skin_energy_set)
    db = property(_gstlearn.Skin_db_get, _gstlearn.Skin_db_set)

    def __init__(self):
        _gstlearn.Skin_swiginit(self, _gstlearn.new_Skin())
    __swig_destroy__ = _gstlearn.delete_Skin

# Register Skin in _gstlearn:
_gstlearn.Skin_swigregister(Skin)

class Vario_Order(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nalloc = property(_gstlearn.Vario_Order_nalloc_get, _gstlearn.Vario_Order_nalloc_set)
    npair = property(_gstlearn.Vario_Order_npair_get, _gstlearn.Vario_Order_npair_set)
    size_aux = property(_gstlearn.Vario_Order_size_aux_get, _gstlearn.Vario_Order_size_aux_set)
    flag_dist = property(_gstlearn.Vario_Order_flag_dist_get, _gstlearn.Vario_Order_flag_dist_set)
    tab_iech = property(_gstlearn.Vario_Order_tab_iech_get, _gstlearn.Vario_Order_tab_iech_set)
    tab_jech = property(_gstlearn.Vario_Order_tab_jech_get, _gstlearn.Vario_Order_tab_jech_set)
    tab_ipas = property(_gstlearn.Vario_Order_tab_ipas_get, _gstlearn.Vario_Order_tab_ipas_set)
    tab_sort = property(_gstlearn.Vario_Order_tab_sort_get, _gstlearn.Vario_Order_tab_sort_set)
    tab_aux_iech = property(_gstlearn.Vario_Order_tab_aux_iech_get, _gstlearn.Vario_Order_tab_aux_iech_set)
    tab_aux_jech = property(_gstlearn.Vario_Order_tab_aux_jech_get, _gstlearn.Vario_Order_tab_aux_jech_set)
    tab_dist = property(_gstlearn.Vario_Order_tab_dist_get, _gstlearn.Vario_Order_tab_dist_set)

    def __init__(self):
        _gstlearn.Vario_Order_swiginit(self, _gstlearn.new_Vario_Order())
    __swig_destroy__ = _gstlearn.delete_Vario_Order

# Register Vario_Order in _gstlearn:
_gstlearn.Vario_Order_swigregister(Vario_Order)

class Frac_Fault(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    coord = property(_gstlearn.Frac_Fault_coord_get, _gstlearn.Frac_Fault_coord_set)
    orient = property(_gstlearn.Frac_Fault_orient_get, _gstlearn.Frac_Fault_orient_set)
    thetal = property(_gstlearn.Frac_Fault_thetal_get, _gstlearn.Frac_Fault_thetal_set)
    thetar = property(_gstlearn.Frac_Fault_thetar_get, _gstlearn.Frac_Fault_thetar_set)
    rangel = property(_gstlearn.Frac_Fault_rangel_get, _gstlearn.Frac_Fault_rangel_set)
    ranger = property(_gstlearn.Frac_Fault_ranger_get, _gstlearn.Frac_Fault_ranger_set)

    def __init__(self):
        _gstlearn.Frac_Fault_swiginit(self, _gstlearn.new_Frac_Fault())
    __swig_destroy__ = _gstlearn.delete_Frac_Fault

# Register Frac_Fault in _gstlearn:
_gstlearn.Frac_Fault_swigregister(Frac_Fault)

class Frac_Fam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    orient = property(_gstlearn.Frac_Fam_orient_get, _gstlearn.Frac_Fam_orient_set)
    dorient = property(_gstlearn.Frac_Fam_dorient_get, _gstlearn.Frac_Fam_dorient_set)
    theta0 = property(_gstlearn.Frac_Fam_theta0_get, _gstlearn.Frac_Fam_theta0_set)
    alpha = property(_gstlearn.Frac_Fam_alpha_get, _gstlearn.Frac_Fam_alpha_set)
    ratcst = property(_gstlearn.Frac_Fam_ratcst_get, _gstlearn.Frac_Fam_ratcst_set)
    prop1 = property(_gstlearn.Frac_Fam_prop1_get, _gstlearn.Frac_Fam_prop1_set)
    prop2 = property(_gstlearn.Frac_Fam_prop2_get, _gstlearn.Frac_Fam_prop2_set)
    aterm = property(_gstlearn.Frac_Fam_aterm_get, _gstlearn.Frac_Fam_aterm_set)
    bterm = property(_gstlearn.Frac_Fam_bterm_get, _gstlearn.Frac_Fam_bterm_set)
    range = property(_gstlearn.Frac_Fam_range_get, _gstlearn.Frac_Fam_range_set)

    def __init__(self):
        _gstlearn.Frac_Fam_swiginit(self, _gstlearn.new_Frac_Fam())
    __swig_destroy__ = _gstlearn.delete_Frac_Fam

# Register Frac_Fam in _gstlearn:
_gstlearn.Frac_Fam_swigregister(Frac_Fam)

class Frac_Environ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nfamilies = property(_gstlearn.Frac_Environ_nfamilies_get, _gstlearn.Frac_Environ_nfamilies_set)
    nfaults = property(_gstlearn.Frac_Environ_nfaults_get, _gstlearn.Frac_Environ_nfaults_set)
    xmax = property(_gstlearn.Frac_Environ_xmax_get, _gstlearn.Frac_Environ_xmax_set)
    ymax = property(_gstlearn.Frac_Environ_ymax_get, _gstlearn.Frac_Environ_ymax_set)
    deltax = property(_gstlearn.Frac_Environ_deltax_get, _gstlearn.Frac_Environ_deltax_set)
    deltay = property(_gstlearn.Frac_Environ_deltay_get, _gstlearn.Frac_Environ_deltay_set)
    xextend = property(_gstlearn.Frac_Environ_xextend_get, _gstlearn.Frac_Environ_xextend_set)
    mean = property(_gstlearn.Frac_Environ_mean_get, _gstlearn.Frac_Environ_mean_set)
    stdev = property(_gstlearn.Frac_Environ_stdev_get, _gstlearn.Frac_Environ_stdev_set)
    frac_fams = property(_gstlearn.Frac_Environ_frac_fams_get, _gstlearn.Frac_Environ_frac_fams_set)
    frac_faults = property(_gstlearn.Frac_Environ_frac_faults_get, _gstlearn.Frac_Environ_frac_faults_set)

    def __init__(self):
        _gstlearn.Frac_Environ_swiginit(self, _gstlearn.new_Frac_Environ())
    __swig_destroy__ = _gstlearn.delete_Frac_Environ

# Register Frac_Environ in _gstlearn:
_gstlearn.Frac_Environ_swigregister(Frac_Environ)

class Frac_Desc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    npoint = property(_gstlearn.Frac_Desc_npoint_get, _gstlearn.Frac_Desc_npoint_set)
    family = property(_gstlearn.Frac_Desc_family_get, _gstlearn.Frac_Desc_family_set)
    orient = property(_gstlearn.Frac_Desc_orient_get, _gstlearn.Frac_Desc_orient_set)
    xy = property(_gstlearn.Frac_Desc_xy_get, _gstlearn.Frac_Desc_xy_set)

    def __init__(self):
        _gstlearn.Frac_Desc_swiginit(self, _gstlearn.new_Frac_Desc())
    __swig_destroy__ = _gstlearn.delete_Frac_Desc

# Register Frac_Desc in _gstlearn:
_gstlearn.Frac_Desc_swigregister(Frac_Desc)

class Frac_List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nfracs = property(_gstlearn.Frac_List_nfracs_get, _gstlearn.Frac_List_nfracs_set)
    frac_descs = property(_gstlearn.Frac_List_frac_descs_get, _gstlearn.Frac_List_frac_descs_set)

    def __init__(self):
        _gstlearn.Frac_List_swiginit(self, _gstlearn.new_Frac_List())
    __swig_destroy__ = _gstlearn.delete_Frac_List

# Register Frac_List in _gstlearn:
_gstlearn.Frac_List_swigregister(Frac_List)

class SubPlan(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    coor = property(_gstlearn.SubPlan_coor_get, _gstlearn.SubPlan_coor_set)
    intercept = property(_gstlearn.SubPlan_intercept_get, _gstlearn.SubPlan_intercept_set)
    value = property(_gstlearn.SubPlan_value_get, _gstlearn.SubPlan_value_set)
    rndval = property(_gstlearn.SubPlan_rndval_get, _gstlearn.SubPlan_rndval_set)

    def __init__(self):
        _gstlearn.SubPlan_swiginit(self, _gstlearn.new_SubPlan())
    __swig_destroy__ = _gstlearn.delete_SubPlan

# Register SubPlan in _gstlearn:
_gstlearn.SubPlan_swigregister(SubPlan)

class SubPlanes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nplan = property(_gstlearn.SubPlanes_nplan_get, _gstlearn.SubPlanes_nplan_set)
    plans = property(_gstlearn.SubPlanes_plans_get, _gstlearn.SubPlanes_plans_set)

    def __init__(self):
        _gstlearn.SubPlanes_swiginit(self, _gstlearn.new_SubPlanes())
    __swig_destroy__ = _gstlearn.delete_SubPlanes

# Register SubPlanes in _gstlearn:
_gstlearn.SubPlanes_swigregister(SubPlanes)

class PL_Dist(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ndim = property(_gstlearn.PL_Dist_ndim_get, _gstlearn.PL_Dist_ndim_set)
    rank = property(_gstlearn.PL_Dist_rank_get, _gstlearn.PL_Dist_rank_set)
    dist = property(_gstlearn.PL_Dist_dist_get, _gstlearn.PL_Dist_dist_set)
    coor = property(_gstlearn.PL_Dist_coor_get, _gstlearn.PL_Dist_coor_set)

    def __init__(self):
        _gstlearn.PL_Dist_swiginit(self, _gstlearn.new_PL_Dist())
    __swig_destroy__ = _gstlearn.delete_PL_Dist

# Register PL_Dist in _gstlearn:
_gstlearn.PL_Dist_swigregister(PL_Dist)

class triangulateio(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pointlist = property(_gstlearn.triangulateio_pointlist_get, _gstlearn.triangulateio_pointlist_set)
    pointattributelist = property(_gstlearn.triangulateio_pointattributelist_get, _gstlearn.triangulateio_pointattributelist_set)
    pointmarkerlist = property(_gstlearn.triangulateio_pointmarkerlist_get, _gstlearn.triangulateio_pointmarkerlist_set)
    numberofpoints = property(_gstlearn.triangulateio_numberofpoints_get, _gstlearn.triangulateio_numberofpoints_set)
    numberofpointattributes = property(_gstlearn.triangulateio_numberofpointattributes_get, _gstlearn.triangulateio_numberofpointattributes_set)
    trianglelist = property(_gstlearn.triangulateio_trianglelist_get, _gstlearn.triangulateio_trianglelist_set)
    triangleattributelist = property(_gstlearn.triangulateio_triangleattributelist_get, _gstlearn.triangulateio_triangleattributelist_set)
    trianglearealist = property(_gstlearn.triangulateio_trianglearealist_get, _gstlearn.triangulateio_trianglearealist_set)
    neighborlist = property(_gstlearn.triangulateio_neighborlist_get, _gstlearn.triangulateio_neighborlist_set)
    numberoftriangles = property(_gstlearn.triangulateio_numberoftriangles_get, _gstlearn.triangulateio_numberoftriangles_set)
    numberofcorners = property(_gstlearn.triangulateio_numberofcorners_get, _gstlearn.triangulateio_numberofcorners_set)
    numberoftriangleattributes = property(_gstlearn.triangulateio_numberoftriangleattributes_get, _gstlearn.triangulateio_numberoftriangleattributes_set)
    segmentlist = property(_gstlearn.triangulateio_segmentlist_get, _gstlearn.triangulateio_segmentlist_set)
    segmentmarkerlist = property(_gstlearn.triangulateio_segmentmarkerlist_get, _gstlearn.triangulateio_segmentmarkerlist_set)
    numberofsegments = property(_gstlearn.triangulateio_numberofsegments_get, _gstlearn.triangulateio_numberofsegments_set)
    holelist = property(_gstlearn.triangulateio_holelist_get, _gstlearn.triangulateio_holelist_set)
    numberofholes = property(_gstlearn.triangulateio_numberofholes_get, _gstlearn.triangulateio_numberofholes_set)
    regionlist = property(_gstlearn.triangulateio_regionlist_get, _gstlearn.triangulateio_regionlist_set)
    numberofregions = property(_gstlearn.triangulateio_numberofregions_get, _gstlearn.triangulateio_numberofregions_set)
    edgelist = property(_gstlearn.triangulateio_edgelist_get, _gstlearn.triangulateio_edgelist_set)
    edgemarkerlist = property(_gstlearn.triangulateio_edgemarkerlist_get, _gstlearn.triangulateio_edgemarkerlist_set)
    normlist = property(_gstlearn.triangulateio_normlist_get, _gstlearn.triangulateio_normlist_set)
    numberofedges = property(_gstlearn.triangulateio_numberofedges_get, _gstlearn.triangulateio_numberofedges_set)

    def __init__(self):
        _gstlearn.triangulateio_swiginit(self, _gstlearn.new_triangulateio())
    __swig_destroy__ = _gstlearn.delete_triangulateio

# Register triangulateio in _gstlearn:
_gstlearn.triangulateio_swigregister(triangulateio)

class segmentio(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pointlist = property(_gstlearn.segmentio_pointlist_get, _gstlearn.segmentio_pointlist_set)
    pointattributelist = property(_gstlearn.segmentio_pointattributelist_get, _gstlearn.segmentio_pointattributelist_set)
    numberofpoints = property(_gstlearn.segmentio_numberofpoints_get, _gstlearn.segmentio_numberofpoints_set)
    numberofpointattributes = property(_gstlearn.segmentio_numberofpointattributes_get, _gstlearn.segmentio_numberofpointattributes_set)
    segmentlist = property(_gstlearn.segmentio_segmentlist_get, _gstlearn.segmentio_segmentlist_set)
    numberofsegments = property(_gstlearn.segmentio_numberofsegments_get, _gstlearn.segmentio_numberofsegments_set)
    numberofcorners = property(_gstlearn.segmentio_numberofcorners_get, _gstlearn.segmentio_numberofcorners_set)

    def __init__(self):
        _gstlearn.segmentio_swiginit(self, _gstlearn.new_segmentio())
    __swig_destroy__ = _gstlearn.delete_segmentio

# Register segmentio in _gstlearn:
_gstlearn.segmentio_swigregister(segmentio)

class SphTriangle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n_nodes = property(_gstlearn.SphTriangle_n_nodes_get, _gstlearn.SphTriangle_n_nodes_set)
    sph_size = property(_gstlearn.SphTriangle_sph_size_get, _gstlearn.SphTriangle_sph_size_set)
    sph_x = property(_gstlearn.SphTriangle_sph_x_get, _gstlearn.SphTriangle_sph_x_set)
    sph_y = property(_gstlearn.SphTriangle_sph_y_get, _gstlearn.SphTriangle_sph_y_set)
    sph_z = property(_gstlearn.SphTriangle_sph_z_get, _gstlearn.SphTriangle_sph_z_set)
    sph_list = property(_gstlearn.SphTriangle_sph_list_get, _gstlearn.SphTriangle_sph_list_set)
    sph_lptr = property(_gstlearn.SphTriangle_sph_lptr_get, _gstlearn.SphTriangle_sph_lptr_set)
    sph_lend = property(_gstlearn.SphTriangle_sph_lend_get, _gstlearn.SphTriangle_sph_lend_set)

    def __init__(self):
        _gstlearn.SphTriangle_swiginit(self, _gstlearn.new_SphTriangle())
    __swig_destroy__ = _gstlearn.delete_SphTriangle

# Register SphTriangle in _gstlearn:
_gstlearn.SphTriangle_swigregister(SphTriangle)

class QSimu(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    QCtt = property(_gstlearn.QSimu_QCtt_get, _gstlearn.QSimu_QCtt_set)
    QCtd = property(_gstlearn.QSimu_QCtd_get, _gstlearn.QSimu_QCtd_set)

    def __init__(self):
        _gstlearn.QSimu_swiginit(self, _gstlearn.new_QSimu())
    __swig_destroy__ = _gstlearn.delete_QSimu

# Register QSimu in _gstlearn:
_gstlearn.QSimu_swigregister(QSimu)

class Cheb_Elem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ncoeffs = property(_gstlearn.Cheb_Elem_ncoeffs_get, _gstlearn.Cheb_Elem_ncoeffs_set)
    ncmax = property(_gstlearn.Cheb_Elem_ncmax_get, _gstlearn.Cheb_Elem_ncmax_set)
    ndisc = property(_gstlearn.Cheb_Elem_ndisc_get, _gstlearn.Cheb_Elem_ndisc_set)
    power = property(_gstlearn.Cheb_Elem_power_get, _gstlearn.Cheb_Elem_power_set)
    a = property(_gstlearn.Cheb_Elem_a_get, _gstlearn.Cheb_Elem_a_set)
    b = property(_gstlearn.Cheb_Elem_b_get, _gstlearn.Cheb_Elem_b_set)
    v1 = property(_gstlearn.Cheb_Elem_v1_get, _gstlearn.Cheb_Elem_v1_set)
    v2 = property(_gstlearn.Cheb_Elem_v2_get, _gstlearn.Cheb_Elem_v2_set)
    tol = property(_gstlearn.Cheb_Elem_tol_get, _gstlearn.Cheb_Elem_tol_set)
    coeffs = property(_gstlearn.Cheb_Elem_coeffs_get, _gstlearn.Cheb_Elem_coeffs_set)

    def __init__(self):
        _gstlearn.Cheb_Elem_swiginit(self, _gstlearn.new_Cheb_Elem())
    __swig_destroy__ = _gstlearn.delete_Cheb_Elem

# Register Cheb_Elem in _gstlearn:
_gstlearn.Cheb_Elem_swigregister(Cheb_Elem)

class Vercoloc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ndupl = property(_gstlearn.Vercoloc_ndupl_get, _gstlearn.Vercoloc_ndupl_set)
    dupl_data = property(_gstlearn.Vercoloc_dupl_data_get, _gstlearn.Vercoloc_dupl_data_set)
    dupl_dabs = property(_gstlearn.Vercoloc_dupl_dabs_get, _gstlearn.Vercoloc_dupl_dabs_set)
    dupl_grid = property(_gstlearn.Vercoloc_dupl_grid_get, _gstlearn.Vercoloc_dupl_grid_set)

    def __init__(self):
        _gstlearn.Vercoloc_swiginit(self, _gstlearn.new_Vercoloc())
    __swig_destroy__ = _gstlearn.delete_Vercoloc

# Register Vercoloc in _gstlearn:
_gstlearn.Vercoloc_swigregister(Vercoloc)

class Vertype(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    order = property(_gstlearn.Vertype_order_get, _gstlearn.Vertype_order_set)
    nvertex = property(_gstlearn.Vertype_nvertex_get, _gstlearn.Vertype_nvertex_set)
    ngibbs = property(_gstlearn.Vertype_ngibbs_get, _gstlearn.Vertype_ngibbs_set)
    nb1 = property(_gstlearn.Vertype_nb1_get, _gstlearn.Vertype_nb1_set)
    nb2 = property(_gstlearn.Vertype_nb2_get, _gstlearn.Vertype_nb2_set)
    vt = property(_gstlearn.Vertype_vt_get, _gstlearn.Vertype_vt_set)
    r_g = property(_gstlearn.Vertype_r_g_get, _gstlearn.Vertype_r_g_set)
    r_abs = property(_gstlearn.Vertype_r_abs_get, _gstlearn.Vertype_r_abs_set)

    def __init__(self):
        _gstlearn.Vertype_swiginit(self, _gstlearn.new_Vertype())
    __swig_destroy__ = _gstlearn.delete_Vertype

# Register Vertype in _gstlearn:
_gstlearn.Vertype_swigregister(Vertype)

class SPDE_Mesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ndim = property(_gstlearn.SPDE_Mesh_ndim_get, _gstlearn.SPDE_Mesh_ndim_set)
    ncorner = property(_gstlearn.SPDE_Mesh_ncorner_get, _gstlearn.SPDE_Mesh_ncorner_set)
    nmesh = property(_gstlearn.SPDE_Mesh_nmesh_get, _gstlearn.SPDE_Mesh_nmesh_set)
    nvertex = property(_gstlearn.SPDE_Mesh_nvertex_get, _gstlearn.SPDE_Mesh_nvertex_set)
    meshes = property(_gstlearn.SPDE_Mesh_meshes_get, _gstlearn.SPDE_Mesh_meshes_set)
    points = property(_gstlearn.SPDE_Mesh_points_get, _gstlearn.SPDE_Mesh_points_set)
    vercoloc = property(_gstlearn.SPDE_Mesh_vercoloc_get, _gstlearn.SPDE_Mesh_vercoloc_set)
    vertype = property(_gstlearn.SPDE_Mesh_vertype_get, _gstlearn.SPDE_Mesh_vertype_set)

    def __init__(self):
        _gstlearn.SPDE_Mesh_swiginit(self, _gstlearn.new_SPDE_Mesh())
    __swig_destroy__ = _gstlearn.delete_SPDE_Mesh

# Register SPDE_Mesh in _gstlearn:
_gstlearn.SPDE_Mesh_swigregister(SPDE_Mesh)

class SPDE_Matelem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Lambda = property(_gstlearn.SPDE_Matelem_Lambda_get, _gstlearn.SPDE_Matelem_Lambda_set)
    S = property(_gstlearn.SPDE_Matelem_S_get, _gstlearn.SPDE_Matelem_S_set)
    Aproj = property(_gstlearn.SPDE_Matelem_Aproj_get, _gstlearn.SPDE_Matelem_Aproj_set)
    QC = property(_gstlearn.SPDE_Matelem_QC_get, _gstlearn.SPDE_Matelem_QC_set)
    QCov = property(_gstlearn.SPDE_Matelem_QCov_get, _gstlearn.SPDE_Matelem_QCov_set)
    Isill = property(_gstlearn.SPDE_Matelem_Isill_get, _gstlearn.SPDE_Matelem_Isill_set)
    Csill = property(_gstlearn.SPDE_Matelem_Csill_get, _gstlearn.SPDE_Matelem_Csill_set)
    qsimu = property(_gstlearn.SPDE_Matelem_qsimu_get, _gstlearn.SPDE_Matelem_qsimu_set)
    mgs = property(_gstlearn.SPDE_Matelem_mgs_get, _gstlearn.SPDE_Matelem_mgs_set)
    s_cheb = property(_gstlearn.SPDE_Matelem_s_cheb_get, _gstlearn.SPDE_Matelem_s_cheb_set)
    s_mesh = property(_gstlearn.SPDE_Matelem_s_mesh_get, _gstlearn.SPDE_Matelem_s_mesh_set)

    def __init__(self):
        _gstlearn.SPDE_Matelem_swiginit(self, _gstlearn.new_SPDE_Matelem())
    __swig_destroy__ = _gstlearn.delete_SPDE_Matelem

# Register SPDE_Matelem in _gstlearn:
_gstlearn.SPDE_Matelem_swigregister(SPDE_Matelem)

class SPDE_SS_Option(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mesh_dbin = property(_gstlearn.SPDE_SS_Option_mesh_dbin_get, _gstlearn.SPDE_SS_Option_mesh_dbin_set)
    mesh_dbout = property(_gstlearn.SPDE_SS_Option_mesh_dbout_get, _gstlearn.SPDE_SS_Option_mesh_dbout_set)
    triswitch = property(_gstlearn.SPDE_SS_Option_triswitch_get, _gstlearn.SPDE_SS_Option_triswitch_set)

    def __init__(self):
        _gstlearn.SPDE_SS_Option_swiginit(self, _gstlearn.new_SPDE_SS_Option())
    __swig_destroy__ = _gstlearn.delete_SPDE_SS_Option

# Register SPDE_SS_Option in _gstlearn:
_gstlearn.SPDE_SS_Option_swigregister(SPDE_SS_Option)

class SPDE_Option(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    options = property(_gstlearn.SPDE_Option_options_get, _gstlearn.SPDE_Option_options_set)

    def __init__(self):
        _gstlearn.SPDE_Option_swiginit(self, _gstlearn.new_SPDE_Option())
    __swig_destroy__ = _gstlearn.delete_SPDE_Option

# Register SPDE_Option in _gstlearn:
_gstlearn.SPDE_Option_swigregister(SPDE_Option)

class CTable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    res = property(_gstlearn.CTable_res_get, _gstlearn.CTable_res_set)

    def __init__(self):
        _gstlearn.CTable_swiginit(self, _gstlearn.new_CTable())
    __swig_destroy__ = _gstlearn.delete_CTable

# Register CTable in _gstlearn:
_gstlearn.CTable_swigregister(CTable)

class CTables(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nconf = property(_gstlearn.CTables_nconf_get, _gstlearn.CTables_nconf_set)
    ndisc = property(_gstlearn.CTables_ndisc_get, _gstlearn.CTables_ndisc_set)
    flag_cumul = property(_gstlearn.CTables_flag_cumul_get, _gstlearn.CTables_flag_cumul_set)
    cmin = property(_gstlearn.CTables_cmin_get, _gstlearn.CTables_cmin_set)
    cmax = property(_gstlearn.CTables_cmax_get, _gstlearn.CTables_cmax_set)
    dc = property(_gstlearn.CTables_dc_get, _gstlearn.CTables_dc_set)
    dp = property(_gstlearn.CTables_dp_get, _gstlearn.CTables_dp_set)
    v = property(_gstlearn.CTables_v_get, _gstlearn.CTables_v_set)
    CT = property(_gstlearn.CTables_CT_get, _gstlearn.CTables_CT_set)

    def __init__(self):
        _gstlearn.CTables_swiginit(self, _gstlearn.new_CTables())
    __swig_destroy__ = _gstlearn.delete_CTables

# Register CTables in _gstlearn:
_gstlearn.CTables_swigregister(CTables)

class Local_Split(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    oper = property(_gstlearn.Local_Split_oper_get, _gstlearn.Local_Split_oper_set)
    nrule = property(_gstlearn.Local_Split_nrule_get, _gstlearn.Local_Split_nrule_set)
    nbyrule = property(_gstlearn.Local_Split_nbyrule_get, _gstlearn.Local_Split_nbyrule_set)
    Srules = property(_gstlearn.Local_Split_Srules_get, _gstlearn.Local_Split_Srules_set)
    Sfipos = property(_gstlearn.Local_Split_Sfipos_get, _gstlearn.Local_Split_Sfipos_set)
    old_relem = property(_gstlearn.Local_Split_old_relem_get, _gstlearn.Local_Split_old_relem_set)
    relems = property(_gstlearn.Local_Split_relems_get, _gstlearn.Local_Split_relems_set)

    def __init__(self):
        _gstlearn.Local_Split_swiginit(self, _gstlearn.new_Local_Split())
    __swig_destroy__ = _gstlearn.delete_Local_Split

# Register Local_Split in _gstlearn:
_gstlearn.Local_Split_swigregister(Local_Split)

class Local_Relem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    facies = property(_gstlearn.Local_Relem_facies_get, _gstlearn.Local_Relem_facies_set)
    nrule = property(_gstlearn.Local_Relem_nrule_get, _gstlearn.Local_Relem_nrule_set)
    nbyrule = property(_gstlearn.Local_Relem_nbyrule_get, _gstlearn.Local_Relem_nbyrule_set)
    nsplit = property(_gstlearn.Local_Relem_nsplit_get, _gstlearn.Local_Relem_nsplit_set)
    Rrules = property(_gstlearn.Local_Relem_Rrules_get, _gstlearn.Local_Relem_Rrules_set)
    Rfipos = property(_gstlearn.Local_Relem_Rfipos_get, _gstlearn.Local_Relem_Rfipos_set)
    old_split = property(_gstlearn.Local_Relem_old_split_get, _gstlearn.Local_Relem_old_split_set)
    splits = property(_gstlearn.Local_Relem_splits_get, _gstlearn.Local_Relem_splits_set)

    def __init__(self):
        _gstlearn.Local_Relem_swiginit(self, _gstlearn.new_Local_Relem())
    __swig_destroy__ = _gstlearn.delete_Local_Relem

# Register Local_Relem in _gstlearn:
_gstlearn.Local_Relem_swigregister(Local_Relem)


def setup_license(target_name: "char const *") -> "int":
    return _gstlearn.setup_license(target_name)

def util_string_search(list_strings: "VectorString", string: "String const &", verbose: "int") -> "VectorInt":
    return _gstlearn.util_string_search(list_strings, string, verbose)

def util_set_array_double(ntab: "int", rtab: "double const *") -> "VectorDouble":
    return _gstlearn.util_set_array_double(ntab, rtab)

def util_set_array_integer(ntab: "int", itab: "int const *") -> "VectorInt":
    return _gstlearn.util_set_array_integer(ntab, itab)

def util_set_array_char(ntab: "int", names: "char **") -> "VectorString":
    return _gstlearn.util_set_array_char(ntab, names)

def util_vs_to_vs(vs: "VectorString") -> "std::vector< char *,std::allocator< char * > >":
    return _gstlearn.util_vs_to_vs(vs)

def csv_manage(filename: "char const *", csv: "CSVformat", mode: "int", nitem: "int", flag_integer: "bool"=False, verbose: "bool"=False) -> "int":
    return _gstlearn.csv_manage(filename, csv, mode, nitem, flag_integer, verbose)

def csv_print_double(value: "double") -> "void":
    return _gstlearn.csv_print_double(value)

def db_create_point(*args, **kwargs) -> "Db *":
    return _gstlearn.db_create_point(*args, **kwargs)

def db_create_grid_generic(*args, **kwargs) -> "DbGrid *":
    return _gstlearn.db_create_grid_generic(*args, **kwargs)

def db_create_grid(*args, **kwargs) -> "DbGrid *":
    return _gstlearn.db_create_grid(*args, **kwargs)

def db_create_grid_2D(*args, **kwargs) -> "DbGrid *":
    return _gstlearn.db_create_grid_2D(*args, **kwargs)

def db_create_grid_3D(*args, **kwargs) -> "DbGrid *":
    return _gstlearn.db_create_grid_3D(*args, **kwargs)

def db_get_grid_axis(dbgrid: "DbGrid", idim: "int") -> "VectorDouble":
    return _gstlearn.db_get_grid_axis(dbgrid, idim)

def db_get_attribute(db: "Db", iatt: "int", verbose: "bool"=False) -> "VectorDouble":
    return _gstlearn.db_get_attribute(db, iatt, verbose)

def db_identify_variables_by_name(db: "Db", pattern: "String const &") -> "VectorInt":
    return _gstlearn.db_identify_variables_by_name(db, pattern)

def db_print(db: "Db", flag_resume: "int"=1, flag_vars: "int"=1, flag_extend: "int"=0, flag_stats: "int"=0, flag_array: "int"=0, nrank: "int"=0, ranks: "int *"=None) -> "void":
    return _gstlearn.db_print(db, flag_resume, flag_vars, flag_extend, flag_stats, flag_array, nrank, ranks)

def db_stats_print(*args) -> "void":
    return _gstlearn.db_stats_print(*args)

def variogram_direction_add(varioparam: "VarioParam", npas: "int", opt_code: "int", idate: "int", dpas: "double", toldis: "double", tolang: "double", bench: "double", cylrad: "double", tolcode: "double", breaks: "VectorDouble", codir: "VectorDouble", grincr: "VectorInt") -> "int":
    return _gstlearn.variogram_direction_add(varioparam, npas, opt_code, idate, dpas, toldis, tolang, bench, cylrad, tolcode, breaks, codir, grincr)

def variogram_cloud(*args, **kwargs) -> "int":
    return _gstlearn.variogram_cloud(*args, **kwargs)

def db_variogram_cloud(*args, **kwargs) -> "DbGrid *":
    return _gstlearn.db_variogram_cloud(*args, **kwargs)

def variogram_print(vario: "Vario") -> "void":
    return _gstlearn.variogram_print(vario)

def variogram_pgs(db: "Db", varioparam: "VarioParam", ruleprop: "RuleProp", flag_rho: "int"=False, opt_correl: "int"=2) -> "Vario *":
    return _gstlearn.variogram_pgs(db, varioparam, ruleprop, flag_rho, opt_correl)

def vmap_compute(*args, **kwargs) -> "int":
    return _gstlearn.vmap_compute(*args, **kwargs)

def db_vmap_compute(*args, **kwargs) -> "DbGrid *":
    return _gstlearn.db_vmap_compute(*args, **kwargs)

def pca_z2f(*args, **kwargs) -> "int":
    return _gstlearn.pca_z2f(*args, **kwargs)

def pca_f2z(*args, **kwargs) -> "int":
    return _gstlearn.pca_f2z(*args, **kwargs)

def model_auto_fit(*args, **kwargs) -> "int":
    return _gstlearn.model_auto_fit(*args, **kwargs)

def vmap_auto_fit(*args, **kwargs) -> "int":
    return _gstlearn.vmap_auto_fit(*args, **kwargs)

def db_model_nostat(*args, **kwargs) -> "int":
    return _gstlearn.db_model_nostat(*args, **kwargs)

def is_model_nostat_param(model: "Model", type0: "EConsElem") -> "int":
    return _gstlearn.is_model_nostat_param(model, type0)

def set_test_discrete(flag_discret: "bool") -> "void":
    return _gstlearn.set_test_discrete(flag_discret)

def model_pgs(db: "Db", varioparam: "VarioParam", ruleprop: "RuleProp", model1: "Model", model2: "Model"=None) -> "Vario *":
    return _gstlearn.model_pgs(db, varioparam, ruleprop, model1, model2)

def anam_selectivity(anam: "AAnam", nclass: "int", zcut: "VectorDouble", flag_correct: "int"=0, verbose: "int"=0) -> "VectorDouble":
    return _gstlearn.anam_selectivity(anam, nclass, zcut, flag_correct, verbose)

def test_neigh(*args, **kwargs) -> "int":
    return _gstlearn.test_neigh(*args, **kwargs)

def spde_cheb_manage(mode: "int", verbose: "int", power: "double", nblin: "int", blin: "double *", S: "cs", cheb_old: "Cheb_Elem") -> "Cheb_Elem *":
    return _gstlearn.spde_cheb_manage(mode, verbose, power, nblin, blin, S, cheb_old)

def spde_chebychev_operate(S: "cs", cheb_elem: "Cheb_Elem", _lambda: "VectorDouble", x: "double const *", y: "double *") -> "int":
    return _gstlearn.spde_chebychev_operate(S, cheb_elem, _lambda, x, y)

def migrateByAttribute(*args, **kwargs) -> "int":
    return _gstlearn.migrateByAttribute(*args, **kwargs)

def migrate(*args, **kwargs) -> "int":
    return _gstlearn.migrate(*args, **kwargs)

def migrateByLocator(*args, **kwargs) -> "int":
    return _gstlearn.migrateByLocator(*args, **kwargs)

def db_selhull(*args, **kwargs) -> "int":
    return _gstlearn.db_selhull(*args, **kwargs)

def db_polygon(*args, **kwargs) -> "void":
    return _gstlearn.db_polygon(*args, **kwargs)

def db_grid_fill(*args, **kwargs) -> "int":
    return _gstlearn.db_grid_fill(*args, **kwargs)

def db_grid1D_fill(*args, **kwargs) -> "int":
    return _gstlearn.db_grid1D_fill(*args, **kwargs)

def db_duplicate(*args, **kwargs) -> "int":
    return _gstlearn.db_duplicate(*args, **kwargs)

def kriging_old(*args, **kwargs) -> "int":
    return _gstlearn.kriging_old(*args, **kwargs)

def kriging(*args, **kwargs) -> "int":
    return _gstlearn.kriging(*args, **kwargs)

def xvalid_old(*args, **kwargs) -> "int":
    return _gstlearn.xvalid_old(*args, **kwargs)

def xvalid(*args, **kwargs) -> "int":
    return _gstlearn.xvalid(*args, **kwargs)

def krimage_func(dbgrid: "DbGrid", model: "Model", neighparam: "ANeighParam") -> "int":
    return _gstlearn.krimage_func(dbgrid, model, neighparam)

def simtub(*args, **kwargs) -> "int":
    return _gstlearn.simtub(*args, **kwargs)

def simpgs(*args, **kwargs) -> "int":
    return _gstlearn.simpgs(*args, **kwargs)

def simbipgs(*args, **kwargs) -> "int":
    return _gstlearn.simbipgs(*args, **kwargs)

def simpgs_spde(dbin: "Db", dbout: "Db", ruleprop: "RuleProp", model1: "Model", model2: "Model", triswitch: "String const &", gext: "VectorDouble", flag_gaus: "int", flag_modif: "int", flag_check: "int", flag_show: "int", nfacies: "int", seed: "int", nbsimu: "int", gibbs_nburn: "int", gibbs_niter: "int", ngibbs_int: "int", verbose: "int", percent: "double") -> "int":
    return _gstlearn.simpgs_spde(dbin, dbout, ruleprop, model1, model2, triswitch, gext, flag_gaus, flag_modif, flag_check, flag_show, nfacies, seed, nbsimu, gibbs_nburn, gibbs_niter, ngibbs_int, verbose, percent)

def db_read_csv(filename: "char const *", csvfmt: "CSVformat", verbose: "int"=0, ncol_max: "int"=-1, nrow_max: "int"=-1, flag_add_rank: "int"=0) -> "Db *":
    return _gstlearn.db_read_csv(filename, csvfmt, verbose, ncol_max, nrow_max, flag_add_rank)

def db_write_csv(db: "Db", filename: "char const *", csv: "CSVformat", flag_allcol: "int"=1, flag_coor: "int"=1, flag_integer: "bool"=False) -> "int":
    return _gstlearn.db_write_csv(db, filename, csv, flag_allcol, flag_coor, flag_integer)

def db_proportion_estimate(*args, **kwargs) -> "int":
    return _gstlearn.db_proportion_estimate(*args, **kwargs)

def gibbs_sampler(*args, **kwargs) -> "int":
    return _gstlearn.gibbs_sampler(*args, **kwargs)

def db_tool_duplicate(db1: "Db", db2: "Db", flag_same: "bool", verbose: "bool", opt_code: "int", tolcode: "double", dist: "double *", sel: "double *") -> "int":
    return _gstlearn.db_tool_duplicate(db1, db2, flag_same, verbose, opt_code, tolcode, dist, sel)

def polygon_inside(xx: "double", yy: "double", zz: "double", flag_nested: "int", polygon: "Polygons") -> "int":
    return _gstlearn.polygon_inside(xx, yy, zz, flag_nested, polygon)
class AEnum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getKey(self) -> "String const &":
        return _gstlearn.AEnum_getKey(self)

    def getValue(self) -> "int":
        return _gstlearn.AEnum_getValue(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.AEnum_getDescr(self)

    def __lt__(self, e: "AEnum") -> "bool":
        return _gstlearn.AEnum___lt__(self, e)

    def __le__(self, e: "AEnum") -> "bool":
        return _gstlearn.AEnum___le__(self, e)

    def __gt__(self, e: "AEnum") -> "bool":
        return _gstlearn.AEnum___gt__(self, e)

    def __ge__(self, e: "AEnum") -> "bool":
        return _gstlearn.AEnum___ge__(self, e)

    def __eq__(self, e: "AEnum") -> "bool":
        return _gstlearn.AEnum___eq__(self, e)

    def __ne__(self, e: "AEnum") -> "bool":
        return _gstlearn.AEnum___ne__(self, e)

    def isSmaller(self, e: "AEnum") -> "bool":
        return _gstlearn.AEnum_isSmaller(self, e)

    def isSmallerOrEqual(self, e: "AEnum") -> "bool":
        return _gstlearn.AEnum_isSmallerOrEqual(self, e)

    def isGreater(self, e: "AEnum") -> "bool":
        return _gstlearn.AEnum_isGreater(self, e)

    def isGreaterOrEqual(self, e: "AEnum") -> "bool":
        return _gstlearn.AEnum_isGreaterOrEqual(self, e)

    def isEqual(self, e: "AEnum") -> "bool":
        return _gstlearn.AEnum_isEqual(self, e)

    def isDifferent(self, e: "AEnum") -> "bool":
        return _gstlearn.AEnum_isDifferent(self, e)

# Register AEnum in _gstlearn:
_gstlearn.AEnum_swigregister(AEnum)

class EKrigOptIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EKrigOptIterator

    def __init__(self, arg2: "EKrigOptIterator"):
        _gstlearn.EKrigOptIterator_swiginit(self, _gstlearn.new_EKrigOptIterator(arg2))

    def __ref__(self) -> "EKrigOpt const &":
        return _gstlearn.EKrigOptIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.EKrigOptIterator_hasNext(self)

    def toNext(self) -> "EKrigOpt const &":
        return _gstlearn.EKrigOptIterator_toNext(self)

    def toFront(self) -> "EKrigOpt const &":
        return _gstlearn.EKrigOptIterator_toFront(self)

    def getEnum(self) -> "EKrigOpt const &":
        return _gstlearn.EKrigOptIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.EKrigOptIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.EKrigOptIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.EKrigOptIterator_getDescr(self)

# Register EKrigOptIterator in _gstlearn:
_gstlearn.EKrigOptIterator_swigregister(EKrigOptIterator)

class EKrigOpt(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EKrigOpt

    def __init__(self, *args):
        _gstlearn.EKrigOpt_swiginit(self, _gstlearn.new_EKrigOpt(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.EKrigOpt_getSize()

    @staticmethod
    def getIterator() -> "EKrigOptIterator":
        return _gstlearn.EKrigOpt_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.EKrigOpt_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.EKrigOpt_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "EKrigOpt const &":
        return _gstlearn.EKrigOpt_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "EKrigOpt const &":
        return _gstlearn.EKrigOpt_fromValue(value)
    E_PONCTUAL = _gstlearn.EKrigOpt_E_PONCTUAL
    E_BLOCK = _gstlearn.EKrigOpt_E_BLOCK
    E_DRIFT = _gstlearn.EKrigOpt_E_DRIFT

    def toEnum(self) -> "EKrigOpt::EEKrigOpt":
        return _gstlearn.EKrigOpt_toEnum(self)

# Register EKrigOpt in _gstlearn:
_gstlearn.EKrigOpt_swigregister(EKrigOpt)

def EKrigOpt_getSize() -> "size_t":
    return _gstlearn.EKrigOpt_getSize()

def EKrigOpt_getIterator() -> "EKrigOptIterator":
    return _gstlearn.EKrigOpt_getIterator()

def EKrigOpt_existsKey(key: "String const &") -> "bool":
    return _gstlearn.EKrigOpt_existsKey(key)

def EKrigOpt_existsValue(value: "int") -> "bool":
    return _gstlearn.EKrigOpt_existsValue(value)

def EKrigOpt_fromKey(key: "String const &") -> "EKrigOpt const &":
    return _gstlearn.EKrigOpt_fromKey(key)

def EKrigOpt_fromValue(value: "int") -> "EKrigOpt const &":
    return _gstlearn.EKrigOpt_fromValue(value)
cvar = _gstlearn.cvar
EKrigOpt.PONCTUAL = _gstlearn.cvar.EKrigOpt_PONCTUAL
EKrigOpt.BLOCK = _gstlearn.cvar.EKrigOpt_BLOCK
EKrigOpt.DRIFT = _gstlearn.cvar.EKrigOpt_DRIFT

class ETestsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ETestsIterator

    def __init__(self, arg2: "ETestsIterator"):
        _gstlearn.ETestsIterator_swiginit(self, _gstlearn.new_ETestsIterator(arg2))

    def __ref__(self) -> "ETests const &":
        return _gstlearn.ETestsIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.ETestsIterator_hasNext(self)

    def toNext(self) -> "ETests const &":
        return _gstlearn.ETestsIterator_toNext(self)

    def toFront(self) -> "ETests const &":
        return _gstlearn.ETestsIterator_toFront(self)

    def getEnum(self) -> "ETests const &":
        return _gstlearn.ETestsIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.ETestsIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.ETestsIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.ETestsIterator_getDescr(self)

# Register ETestsIterator in _gstlearn:
_gstlearn.ETestsIterator_swigregister(ETestsIterator)

class ETests(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ETests

    def __init__(self, *args):
        _gstlearn.ETests_swiginit(self, _gstlearn.new_ETests(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.ETests_getSize()

    @staticmethod
    def getIterator() -> "ETestsIterator":
        return _gstlearn.ETests_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.ETests_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.ETests_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "ETests const &":
        return _gstlearn.ETests_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "ETests const &":
        return _gstlearn.ETests_fromValue(value)
    E_CASE0 = _gstlearn.ETests_E_CASE0
    E_CASE1 = _gstlearn.ETests_E_CASE1
    E_CASE2 = _gstlearn.ETests_E_CASE2

    def toEnum(self) -> "ETests::EETests":
        return _gstlearn.ETests_toEnum(self)

# Register ETests in _gstlearn:
_gstlearn.ETests_swigregister(ETests)

def ETests_getSize() -> "size_t":
    return _gstlearn.ETests_getSize()

def ETests_getIterator() -> "ETestsIterator":
    return _gstlearn.ETests_getIterator()

def ETests_existsKey(key: "String const &") -> "bool":
    return _gstlearn.ETests_existsKey(key)

def ETests_existsValue(value: "int") -> "bool":
    return _gstlearn.ETests_existsValue(value)

def ETests_fromKey(key: "String const &") -> "ETests const &":
    return _gstlearn.ETests_fromKey(key)

def ETests_fromValue(value: "int") -> "ETests const &":
    return _gstlearn.ETests_fromValue(value)
ETests.CASE0 = _gstlearn.cvar.ETests_CASE0
ETests.CASE1 = _gstlearn.cvar.ETests_CASE1
ETests.CASE2 = _gstlearn.cvar.ETests_CASE2


def argumentTestInt(value: "int") -> "void":
    return _gstlearn.argumentTestInt(value)

def argumentTestDouble(value: "double") -> "void":
    return _gstlearn.argumentTestDouble(value)

def argumentTestVectorInt(values: "VectorInt") -> "void":
    return _gstlearn.argumentTestVectorInt(values)

def argumentTestVectorDouble(values: "VectorDouble") -> "void":
    return _gstlearn.argumentTestVectorDouble(values)

def argumentTestString(value: "String const &") -> "void":
    return _gstlearn.argumentTestString(value)

def argumentTestVectorString(values: "VectorString") -> "void":
    return _gstlearn.argumentTestVectorString(values)

def argumentTestSurcharge(*args) -> "void":
    return _gstlearn.argumentTestSurcharge(*args)

def argumentTestEnum(value: "ETests") -> "void":
    return _gstlearn.argumentTestEnum(value)
class AStringable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.AStringable_swiginit(self, _gstlearn.new_AStringable(*args))
    __swig_destroy__ = _gstlearn.delete_AStringable

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.AStringable_toString(self, strfmt)

    def display(self, *args) -> "void":
        return _gstlearn.AStringable_display(self, *args)

# Register AStringable in _gstlearn:
_gstlearn.AStringable_swigregister(AStringable)


def messageFlush(string: "String const &") -> "void":
    return _gstlearn.messageFlush(string)

def messerrFlush(string: "String const &") -> "void":
    return _gstlearn.messerrFlush(string)

def messerr(*args, **kwargs) -> "void":
    return _gstlearn.messerr(*args, **kwargs)

def message(*args, **kwargs) -> "void":
    return _gstlearn.message(*args, **kwargs)

def mesArg(title: "char const *", current: "int", nmax: "int", flagStartOne: "bool"=False) -> "void":
    return _gstlearn.mesArg(title, current, nmax, flagStartOne)

def messageAbort(*args, **kwargs) -> "void":
    return _gstlearn.messageAbort(*args, **kwargs)

def mestitle(*args, **kwargs) -> "void":
    return _gstlearn.mestitle(*args, **kwargs)

def mes_process(string: "char const *", ntot: "int", iech: "int") -> "void":
    return _gstlearn.mes_process(string, ntot, iech)

def toTitle(*args, **kwargs) -> "String":
    return _gstlearn.toTitle(*args, **kwargs)

def toMatrixSymmetric(title: "String const &", colnames: "VectorString", rownames: "VectorString", bycol: "bool", ncols: "int", tab: "VectorDouble", flagOverride: "bool"=False) -> "String":
    return _gstlearn.toMatrixSymmetric(title, colnames, rownames, bycol, ncols, tab, flagOverride)

def toMatrixDiagonal(title: "String const &", colnames: "VectorString", rownames: "VectorString", ncols: "int", tab: "VectorDouble", flagOverride: "bool"=False) -> "String":
    return _gstlearn.toMatrixDiagonal(title, colnames, rownames, ncols, tab, flagOverride)

def toMatrixDiagCst(title: "String const &", colnames: "VectorString", rownames: "VectorString", ncols: "int", tab: "VectorDouble", flagOverride: "bool"=False) -> "String":
    return _gstlearn.toMatrixDiagCst(title, colnames, rownames, ncols, tab, flagOverride)

def toMatrix(*args) -> "String":
    return _gstlearn.toMatrix(*args)

def toVector(*args) -> "String":
    return _gstlearn.toVector(*args)

def toStr(*args, **kwargs) -> "String":
    return _gstlearn.toStr(*args, **kwargs)

def toInterval(zmin: "double", zmax: "double") -> "String":
    return _gstlearn.toInterval(zmin, zmax)

def tab_prints(*args, **kwargs) -> "void":
    return _gstlearn.tab_prints(*args, **kwargs)

def tab_printg(*args, **kwargs) -> "void":
    return _gstlearn.tab_printg(*args, **kwargs)

def tab_printd(*args, **kwargs) -> "void":
    return _gstlearn.tab_printd(*args, **kwargs)

def tab_printi(*args, **kwargs) -> "void":
    return _gstlearn.tab_printi(*args, **kwargs)

def tab_print_rc(*args, **kwargs) -> "void":
    return _gstlearn.tab_print_rc(*args, **kwargs)

def tab_print_rowname(string: "char const *", taille: "int") -> "void":
    return _gstlearn.tab_print_rowname(string, taille)

def print_matrix(title: "char const *", flag_limit: "int", byrow: "int", nx: "int", ny: "int", sel: "double const *", tab: "double const *") -> "void":
    return _gstlearn.print_matrix(title, flag_limit, byrow, nx, ny, sel, tab)

def print_trimat(title: "char const *", mode: "int", neq: "int", tl: "double const *") -> "void":
    return _gstlearn.print_trimat(title, mode, neq, tl)

def print_imatrix(title: "char const *", flag_limit: "int", bycol: "int", nx: "int", ny: "int", sel: "double const *", tab: "int const *") -> "void":
    return _gstlearn.print_imatrix(title, flag_limit, bycol, nx, ny, sel, tab)

def print_vector(*args) -> "void":
    return _gstlearn.print_vector(*args)

def print_ivector(*args) -> "void":
    return _gstlearn.print_ivector(*args)
class AStringFormat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.AStringFormat_swiginit(self, _gstlearn.new_AStringFormat(*args))
    __swig_destroy__ = _gstlearn.delete_AStringFormat

    def getLevel(self) -> "int":
        return _gstlearn.AStringFormat_getLevel(self)

# Register AStringFormat in _gstlearn:
_gstlearn.AStringFormat_swigregister(AStringFormat)

class ASerializable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ASerializable

    @staticmethod
    def buildFileName(filename: "String const &", ensureDirExist: "bool"=False) -> "String":
        return _gstlearn.ASerializable_buildFileName(filename, ensureDirExist)

    @staticmethod
    def getHomeDirectory(*args, **kwargs) -> "String":
        return _gstlearn.ASerializable_getHomeDirectory(*args, **kwargs)

    @staticmethod
    def getWorkingDirectory() -> "String":
        return _gstlearn.ASerializable_getWorkingDirectory()

    @staticmethod
    def getTestData(subdir: "String const &", filename: "String const &") -> "String":
        return _gstlearn.ASerializable_getTestData(subdir, filename)

    @staticmethod
    def getFileIdentity(filename: "String const &") -> "String":
        return _gstlearn.ASerializable_getFileIdentity(filename)

    @staticmethod
    def setContainerName(*args, **kwargs) -> "void":
        return _gstlearn.ASerializable_setContainerName(*args, **kwargs)

    @staticmethod
    def unsetContainerName() -> "void":
        return _gstlearn.ASerializable_unsetContainerName()

    @staticmethod
    def setPrefixName(prefixName: "String const &") -> "void":
        return _gstlearn.ASerializable_setPrefixName(prefixName)

    @staticmethod
    def unsetPrefixName() -> "void":
        return _gstlearn.ASerializable_unsetPrefixName()

    @staticmethod
    def getContainerName() -> "String const &":
        return _gstlearn.ASerializable_getContainerName()

    @staticmethod
    def getPrefixName() -> "String const &":
        return _gstlearn.ASerializable_getPrefixName()

    @staticmethod
    def createDirectory(dir: "String const &") -> "bool":
        return _gstlearn.ASerializable_createDirectory(dir)

    @staticmethod
    def getExecDirectory() -> "String":
        return _gstlearn.ASerializable_getExecDirectory()

    @staticmethod
    def getDirectory(path: "String const &") -> "String":
        return _gstlearn.ASerializable_getDirectory(path)

# Register ASerializable in _gstlearn:
_gstlearn.ASerializable_swigregister(ASerializable)

def ASerializable_buildFileName(filename: "String const &", ensureDirExist: "bool"=False) -> "String":
    return _gstlearn.ASerializable_buildFileName(filename, ensureDirExist)

def ASerializable_getHomeDirectory(*args, **kwargs) -> "String":
    return _gstlearn.ASerializable_getHomeDirectory(*args, **kwargs)

def ASerializable_getWorkingDirectory() -> "String":
    return _gstlearn.ASerializable_getWorkingDirectory()

def ASerializable_getTestData(subdir: "String const &", filename: "String const &") -> "String":
    return _gstlearn.ASerializable_getTestData(subdir, filename)

def ASerializable_getFileIdentity(filename: "String const &") -> "String":
    return _gstlearn.ASerializable_getFileIdentity(filename)

def ASerializable_setContainerName(*args, **kwargs) -> "void":
    return _gstlearn.ASerializable_setContainerName(*args, **kwargs)

def ASerializable_unsetContainerName() -> "void":
    return _gstlearn.ASerializable_unsetContainerName()

def ASerializable_setPrefixName(prefixName: "String const &") -> "void":
    return _gstlearn.ASerializable_setPrefixName(prefixName)

def ASerializable_unsetPrefixName() -> "void":
    return _gstlearn.ASerializable_unsetPrefixName()

def ASerializable_getContainerName() -> "String const &":
    return _gstlearn.ASerializable_getContainerName()

def ASerializable_getPrefixName() -> "String const &":
    return _gstlearn.ASerializable_getPrefixName()

def ASerializable_createDirectory(dir: "String const &") -> "bool":
    return _gstlearn.ASerializable_createDirectory(dir)

def ASerializable_getExecDirectory() -> "String":
    return _gstlearn.ASerializable_getExecDirectory()

def ASerializable_getDirectory(path: "String const &") -> "String":
    return _gstlearn.ASerializable_getDirectory(path)

class NamingConvention(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.NamingConvention_swiginit(self, _gstlearn.new_NamingConvention(*args))
    __swig_destroy__ = _gstlearn.delete_NamingConvention

    def setNamesAndLocators(self, *args) -> "void":
        return _gstlearn.NamingConvention_setNamesAndLocators(self, *args)

    def setDelim(self, delim: "String const &") -> "void":
        return _gstlearn.NamingConvention_setDelim(self, delim)

    def setLocatorOutType(self, l: "ELoc") -> "void":
        return _gstlearn.NamingConvention_setLocatorOutType(self, l)

    def setRadix(self, radix: "String const &") -> "void":
        return _gstlearn.NamingConvention_setRadix(self, radix)

    def setFlagClean(self, flagClean: "bool") -> "void":
        return _gstlearn.NamingConvention_setFlagClean(self, flagClean)

    def setFlagVarIter(self, flagVarIter: "bool") -> "void":
        return _gstlearn.NamingConvention_setFlagVarIter(self, flagVarIter)

    def setLocators(self, dbout: "Db", iattout_start: "int", nvar: "int", nitems: "int"=1, flagLocate: "bool"=True) -> "void":
        return _gstlearn.NamingConvention_setLocators(self, dbout, iattout_start, nvar, nitems, flagLocate)

# Register NamingConvention in _gstlearn:
_gstlearn.NamingConvention_swigregister(NamingConvention)

class Rotation(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Rotation_swiginit(self, _gstlearn.new_Rotation(*args))
    __swig_destroy__ = _gstlearn.delete_Rotation

    def getNDim(self) -> "unsigned int":
        return _gstlearn.Rotation_getNDim(self)

    def isRotated(self) -> "bool":
        return _gstlearn.Rotation_isRotated(self)

    def getMatrixDirect(self) -> "MatrixSquareGeneral const &":
        return _gstlearn.Rotation_getMatrixDirect(self)

    def getMatrixInverse(self) -> "MatrixSquareGeneral const &":
        return _gstlearn.Rotation_getMatrixInverse(self)

    def getAngles(self) -> "VectorDouble const &":
        return _gstlearn.Rotation_getAngles(self)

    def getAngle(self, idim: "int") -> "double":
        return _gstlearn.Rotation_getAngle(self, idim)

    def resetFromSpaceDimension(self, ndim: "unsigned int") -> "void":
        return _gstlearn.Rotation_resetFromSpaceDimension(self, ndim)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.Rotation_toString(self, strfmt)

    def setMatrixDirect(self, rotmat: "MatrixSquareGeneral") -> "int":
        return _gstlearn.Rotation_setMatrixDirect(self, rotmat)

    def setMatrixDirectByVector(self, rotmat: "VectorDouble") -> "int":
        return _gstlearn.Rotation_setMatrixDirectByVector(self, rotmat)

    def setMatrixDirectOldStyle(self, rotmat: "double const *") -> "int":
        return _gstlearn.Rotation_setMatrixDirectOldStyle(self, rotmat)

    def setAngles(self, angles: "VectorDouble") -> "int":
        return _gstlearn.Rotation_setAngles(self, angles)

    def setIdentity(self) -> "void":
        return _gstlearn.Rotation_setIdentity(self)

    def rotateDirect(self, _in: "VectorDouble", out: "VectorDouble") -> "void":
        return _gstlearn.Rotation_rotateDirect(self, _in, out)

    def rotateInverse(self, _in: "VectorDouble", out: "VectorDouble") -> "void":
        return _gstlearn.Rotation_rotateInverse(self, _in, out)

    def isIdentity(self) -> "bool":
        return _gstlearn.Rotation_isIdentity(self)

    def isSame(self, rot: "Rotation") -> "bool":
        return _gstlearn.Rotation_isSame(self, rot)

    def setDirection(self, *args, **kwargs) -> "VectorDouble":
        return _gstlearn.Rotation_setDirection(self, *args, **kwargs)

    def getMatrixDirectByVector(self) -> "VectorDouble":
        return _gstlearn.Rotation_getMatrixDirectByVector(self)

    def getMatrixInverseByVector(self) -> "VectorDouble":
        return _gstlearn.Rotation_getMatrixInverseByVector(self)

    def __repr__(self) -> "std::string":
        return _gstlearn.Rotation___repr__(self)

# Register Rotation in _gstlearn:
_gstlearn.Rotation_swigregister(Rotation)

class Tensor(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.Tensor_swiginit(self, _gstlearn.new_Tensor(*args))
    __swig_destroy__ = _gstlearn.delete_Tensor

    def init(self, ndim: "int") -> "void":
        return _gstlearn.Tensor_init(self, ndim)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.Tensor_toString(self, strfmt)

    def setTensorDirect(self, tensor: "MatrixSquareGeneral") -> "void":
        return _gstlearn.Tensor_setTensorDirect(self, tensor)

    def setTensorInverse(self, tensor: "MatrixSquareGeneral") -> "void":
        return _gstlearn.Tensor_setTensorInverse(self, tensor)

    def setRadius(self, radius: "double") -> "void":
        return _gstlearn.Tensor_setRadius(self, radius)

    def setRadiusVec(self, radius: "VectorDouble") -> "void":
        return _gstlearn.Tensor_setRadiusVec(self, radius)

    def setRadiusDir(self, idim: "unsigned int", radius: "double") -> "void":
        return _gstlearn.Tensor_setRadiusDir(self, idim, radius)

    def setRotation(self, rot: "Rotation") -> "void":
        return _gstlearn.Tensor_setRotation(self, rot)

    def setRotationAngles(self, angles: "VectorDouble") -> "void":
        return _gstlearn.Tensor_setRotationAngles(self, angles)

    def setRotationAngle(self, idim: "unsigned int", angle: "double") -> "void":
        return _gstlearn.Tensor_setRotationAngle(self, idim, angle)

    def getAngles(self) -> "VectorDouble const &":
        return _gstlearn.Tensor_getAngles(self)

    def getTensorDirect(self) -> "MatrixSquareGeneral const &":
        return _gstlearn.Tensor_getTensorDirect(self)

    def getTensorInverse(self) -> "MatrixSquareGeneral const &":
        return _gstlearn.Tensor_getTensorInverse(self)

    def getRadius(self) -> "VectorDouble const &":
        return _gstlearn.Tensor_getRadius(self)

    def getRotation(self) -> "Rotation const &":
        return _gstlearn.Tensor_getRotation(self)

    def getMatrixDirect(self) -> "MatrixSquareGeneral const &":
        return _gstlearn.Tensor_getMatrixDirect(self)

    def getMatrixInverse(self) -> "MatrixSquareGeneral const &":
        return _gstlearn.Tensor_getMatrixInverse(self)

    def isIsotropic(self) -> "bool":
        return _gstlearn.Tensor_isIsotropic(self)

    def hasRotation(self) -> "bool":
        return _gstlearn.Tensor_hasRotation(self)

    def applyDirect(self, vec: "VectorDouble") -> "VectorDouble":
        return _gstlearn.Tensor_applyDirect(self, vec)

    def applyInverse(self, vec: "VectorDouble") -> "VectorDouble":
        return _gstlearn.Tensor_applyInverse(self, vec)

# Register Tensor in _gstlearn:
_gstlearn.Tensor_swigregister(Tensor)

class Grid(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.Grid_swiginit(self, _gstlearn.new_Grid(*args))
    __swig_destroy__ = _gstlearn.delete_Grid

    def resetFromSpaceDimension(self, ndim: "int") -> "void":
        return _gstlearn.Grid_resetFromSpaceDimension(self, ndim)

    def resetFromGrid(self, grid: "Grid") -> "void":
        return _gstlearn.Grid_resetFromGrid(self, grid)

    def resetFromVector(self, *args, **kwargs) -> "int":
        return _gstlearn.Grid_resetFromVector(self, *args, **kwargs)

    def setX0(self, idim: "int", value: "double") -> "void":
        return _gstlearn.Grid_setX0(self, idim, value)

    def setDX(self, idim: "int", value: "double") -> "void":
        return _gstlearn.Grid_setDX(self, idim, value)

    def setNX(self, idim: "int", value: "int") -> "void":
        return _gstlearn.Grid_setNX(self, idim, value)

    def setRotationByMatrix(self, rotmat: "MatrixSquareGeneral") -> "void":
        return _gstlearn.Grid_setRotationByMatrix(self, rotmat)

    def setRotationByVector(self, rotmat: "VectorDouble") -> "void":
        return _gstlearn.Grid_setRotationByVector(self, rotmat)

    def setRotationByAngles(self, angles: "VectorDouble") -> "void":
        return _gstlearn.Grid_setRotationByAngles(self, angles)

    def setRotationByAngle(self, angle: "double") -> "void":
        return _gstlearn.Grid_setRotationByAngle(self, angle)

    def getNDim(self) -> "int":
        return _gstlearn.Grid_getNDim(self)

    def getX0(self, idim: "int") -> "double":
        return _gstlearn.Grid_getX0(self, idim)

    def getDX(self, idim: "int") -> "double":
        return _gstlearn.Grid_getDX(self, idim)

    def getNX(self, idim: "int") -> "int":
        return _gstlearn.Grid_getNX(self, idim)

    def getNTotal(self) -> "int":
        return _gstlearn.Grid_getNTotal(self)

    def getCellSize(self) -> "double":
        return _gstlearn.Grid_getCellSize(self)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.Grid_toString(self, strfmt)

    def copyParams(self, mode: "int", gridaux: "Grid") -> "void":
        return _gstlearn.Grid_copyParams(self, mode, gridaux)

    def getCoordinate(self, rank: "int", idim: "int", flag_rotate: "bool"=True) -> "double":
        return _gstlearn.Grid_getCoordinate(self, rank, idim, flag_rotate)

    def getCoordinatesByRank(self, rank: "int", flag_rotate: "bool"=True) -> "VectorDouble":
        return _gstlearn.Grid_getCoordinatesByRank(self, rank, flag_rotate)

    def getCoordinatesByIndice(self, indice: "VectorInt", flag_rotate: "bool"=True) -> "VectorDouble":
        return _gstlearn.Grid_getCoordinatesByIndice(self, indice, flag_rotate)

    def getCoordinatesByCorner(self, icorner: "VectorInt") -> "VectorDouble":
        return _gstlearn.Grid_getCoordinatesByCorner(self, icorner)

    def indiceToCoordinate(self, *args, **kwargs) -> "double":
        return _gstlearn.Grid_indiceToCoordinate(self, *args, **kwargs)

    def indicesToCoordinate(self, *args, **kwargs) -> "VectorDouble":
        return _gstlearn.Grid_indicesToCoordinate(self, *args, **kwargs)

    def indicesToCoordinateInPlace(self, indice: "VectorInt", coor: "VectorDouble", percent: "VectorDouble") -> "void":
        return _gstlearn.Grid_indicesToCoordinateInPlace(self, indice, coor, percent)

    def rankToCoordinate(self, *args, **kwargs) -> "double":
        return _gstlearn.Grid_rankToCoordinate(self, *args, **kwargs)

    def rankToCoordinates(self, *args, **kwargs) -> "VectorDouble":
        return _gstlearn.Grid_rankToCoordinates(self, *args, **kwargs)

    def rankToCoordinatesInPlace(self, *args, **kwargs) -> "void":
        return _gstlearn.Grid_rankToCoordinatesInPlace(self, *args, **kwargs)

    def indiceToRank(self, indice: "VectorInt") -> "int":
        return _gstlearn.Grid_indiceToRank(self, indice)

    def rankToIndice(self, node: "int", indice: "VectorInt", minusOne: "bool"=False) -> "void":
        return _gstlearn.Grid_rankToIndice(self, node, indice, minusOne)

    def coordinateToIndice(self, coor: "VectorDouble", indice: "VectorInt", eps: "double"=1.e-6) -> "int":
        return _gstlearn.Grid_coordinateToIndice(self, coor, indice, eps)

    def coordinateToRank(self, coor: "VectorDouble", eps: "double"=1.e-6) -> "int":
        return _gstlearn.Grid_coordinateToRank(self, coor, eps)

    def getRotAngles(self) -> "VectorDouble const":
        return _gstlearn.Grid_getRotAngles(self)

    def getRotMat(self) -> "VectorDouble const":
        return _gstlearn.Grid_getRotMat(self)

    def getRotAngle(self, idim: "int") -> "double":
        return _gstlearn.Grid_getRotAngle(self, idim)

    def getNXs(self) -> "VectorInt const":
        return _gstlearn.Grid_getNXs(self)

    def getX0s(self) -> "VectorDouble const":
        return _gstlearn.Grid_getX0s(self)

    def getDXs(self) -> "VectorDouble const":
        return _gstlearn.Grid_getDXs(self)

    def getRotation(self) -> "Rotation const &":
        return _gstlearn.Grid_getRotation(self)

    def isSame(self, grid: "Grid") -> "bool":
        return _gstlearn.Grid_isSame(self, grid)

    def isSameMesh(self, grid: "Grid") -> "bool":
        return _gstlearn.Grid_isSameMesh(self, grid)

    def isRotated(self) -> "bool":
        return _gstlearn.Grid_isRotated(self)

    def isSameRotation(self, grid: "Grid") -> "bool":
        return _gstlearn.Grid_isSameRotation(self, grid)

    def getAxis(self, idim: "int") -> "VectorDouble":
        return _gstlearn.Grid_getAxis(self, idim)

    def iteratorInit(self, *args, **kwargs) -> "void":
        return _gstlearn.Grid_iteratorInit(self, *args, **kwargs)

    def iteratorNext(self) -> "VectorInt":
        return _gstlearn.Grid_iteratorNext(self)

    def empty(self) -> "bool":
        return _gstlearn.Grid_empty(self)

    def dilate(self, mode: "int", nshift: "VectorInt", nx: "VectorInt", dx: "VectorDouble", x0: "VectorDouble") -> "void":
        return _gstlearn.Grid_dilate(self, mode, nshift, nx, dx, x0)

    def multiple(self, nmult: "VectorInt", flag_cell: "int", nx: "VectorInt", dx: "VectorDouble", x0: "VectorDouble") -> "void":
        return _gstlearn.Grid_multiple(self, nmult, flag_cell, nx, dx, x0)

    def divider(self, nmult: "VectorInt", flag_cell: "int", nx: "VectorInt", dx: "VectorDouble", x0: "VectorDouble") -> "void":
        return _gstlearn.Grid_divider(self, nmult, flag_cell, nx, dx, x0)

# Register Grid in _gstlearn:
_gstlearn.Grid_swigregister(Grid)

SPACES = _gstlearn.SPACES

def skipBOM(_in: "std::ifstream &") -> "void":
    return _gstlearn.skipBOM(_in)

def toUpper(*args) -> "void":
    return _gstlearn.toUpper(*args)

def toLower(*args) -> "void":
    return _gstlearn.toLower(*args)

def matchKeyword(string1: "String const &", string2: "String const &", caseSensitive: "bool"=True) -> "bool":
    return _gstlearn.matchKeyword(string1, string2, caseSensitive)

def matchRegexp(string1: "String const &", string2: "String const &", caseSensitive: "bool"=True) -> "bool":
    return _gstlearn.matchRegexp(string1, string2, caseSensitive)

def getRankInList(list: "VectorString", string: "String const &", caseSensitive: "bool"=True) -> "int":
    return _gstlearn.getRankInList(list, string, caseSensitive)

def decodeInString(symbol: "String const &", node: "String const &", facies: "int *", caseSensitive: "bool"=True) -> "int":
    return _gstlearn.decodeInString(symbol, node, facies, caseSensitive)

def decodeInList(symbols: "VectorString", node: "String const &", rank: "int *", facies: "int *", caseSenstive: "bool"=True) -> "int":
    return _gstlearn.decodeInList(symbols, node, rank, facies, caseSenstive)

def correctNamesForDuplicates(list: "VectorString") -> "int":
    return _gstlearn.correctNamesForDuplicates(list)

def correctNewNameForDuplicates(list: "VectorString", rank: "int") -> "void":
    return _gstlearn.correctNewNameForDuplicates(list, rank)

def incrementStringVersion(*args, **kwargs) -> "String":
    return _gstlearn.incrementStringVersion(*args, **kwargs)

def concatenateStrings(*args, **kwargs) -> "String":
    return _gstlearn.concatenateStrings(*args, **kwargs)

def generateMultipleNames(radix: "String const &", number: "int") -> "VectorString":
    return _gstlearn.generateMultipleNames(radix, number)

def expandList(*args) -> "VectorString":
    return _gstlearn.expandList(*args)

def getMaxStringSize(list: "VectorString") -> "int":
    return _gstlearn.getMaxStringSize(list)

def separateKeywords(code: "String const &") -> "VectorString":
    return _gstlearn.separateKeywords(code)

def toInt(*args) -> "int":
    return _gstlearn.toInt(*args)

def toDouble(*args) -> "double":
    return _gstlearn.toDouble(*args)

def toString(*args) -> "String":
    return _gstlearn.toString(*args)

def askInt(text: "String const &", defval: "int"=-1234567, authTest: "bool"=False) -> "int":
    return _gstlearn.askInt(text, defval, authTest)

def askDouble(text: "String const &", defval: "double"=1.234e30, authTest: "bool"=False) -> "double":
    return _gstlearn.askDouble(text, defval, authTest)

def askBool(text: "String const &", defval: "bool"=False) -> "int":
    return _gstlearn.askBool(text, defval)

def trimRight(*args, **kwargs) -> "String":
    return _gstlearn.trimRight(*args, **kwargs)

def trimLeft(*args, **kwargs) -> "String":
    return _gstlearn.trimLeft(*args, **kwargs)

def trim(*args, **kwargs) -> "String":
    return _gstlearn.trim(*args, **kwargs)

def erase(*args, **kwargs) -> "String":
    return _gstlearn.erase(*args, **kwargs)

def gslStrcpy(dst: "char *", src: "char const *") -> "char *":
    return _gstlearn.gslStrcpy(dst, src)

def gslStrcat(dst: "char *", src: "char const *") -> "char *":
    return _gstlearn.gslStrcat(dst, src)

def gslSPrintf(*args, **kwargs) -> "int":
    return _gstlearn.gslSPrintf(*args, **kwargs)

def gslStrtok(str: "char *", delim: "char const *") -> "char *":
    return _gstlearn.gslStrtok(str, delim)

def gslStrncpy(dest: "char *", src: "char const *", n: "size_t") -> "char *":
    return _gstlearn.gslStrncpy(dest, src, n)

def gslScanf(*args, **kwargs) -> "int":
    return _gstlearn.gslScanf(*args, **kwargs)

def gslSScanf(*args, **kwargs) -> "int":
    return _gstlearn.gslSScanf(*args, **kwargs)

def gslFScanf(*args, **kwargs) -> "int":
    return _gstlearn.gslFScanf(*args, **kwargs)
class Interval(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Interval_swiginit(self, _gstlearn.new_Interval(*args))
    __swig_destroy__ = _gstlearn.delete_Interval

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.Interval_toString(self, strfmt)

    def init(self, vmin: "double"=1.234e30, vmax: "double"=1.234e30, mininc: "bool"=True, maxinc: "bool"=False) -> "void":
        return _gstlearn.Interval_init(self, vmin, vmax, mininc, maxinc)

    def isMinDefined(self) -> "bool":
        return _gstlearn.Interval_isMinDefined(self)

    def isMaxDefined(self) -> "bool":
        return _gstlearn.Interval_isMaxDefined(self)

    def isInside(self, value: "double") -> "bool":
        return _gstlearn.Interval_isInside(self, value)

    def isOutsideBelow(self, value: "double") -> "bool":
        return _gstlearn.Interval_isOutsideBelow(self, value)

    def isOutsideAbove(self, value: "double") -> "bool":
        return _gstlearn.Interval_isOutsideAbove(self, value)

    def getVmax(self) -> "double":
        return _gstlearn.Interval_getVmax(self)

    def setVmax(self, vmax: "double") -> "void":
        return _gstlearn.Interval_setVmax(self, vmax)

    def getVmin(self) -> "double":
        return _gstlearn.Interval_getVmin(self)

    def setVmin(self, vmin: "double") -> "void":
        return _gstlearn.Interval_setVmin(self, vmin)

    def getMaxIncluded(self) -> "bool":
        return _gstlearn.Interval_getMaxIncluded(self)

    def setMaxIncluded(self, maxIncluded: "bool") -> "void":
        return _gstlearn.Interval_setMaxIncluded(self, maxIncluded)

    def getMinIncluded(self) -> "bool":
        return _gstlearn.Interval_getMinIncluded(self)

    def setMinIncluded(self, minIncluded: "bool") -> "void":
        return _gstlearn.Interval_setMinIncluded(self, minIncluded)

    def getBounds(self) -> "VectorDouble":
        return _gstlearn.Interval_getBounds(self)

    def isValid(self) -> "bool":
        return _gstlearn.Interval_isValid(self)

    def isDisjoint(self, m: "Interval") -> "bool":
        return _gstlearn.Interval_isDisjoint(self, m)

    def __repr__(self) -> "std::string":
        return _gstlearn.Interval___repr__(self)

# Register Interval in _gstlearn:
_gstlearn.Interval_swigregister(Interval)

class Limits(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.Limits_swiginit(self, _gstlearn.new_Limits(*args))
    __swig_destroy__ = _gstlearn.delete_Limits

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.Limits_toString(self, strfmt)

    def getLimitNumber(self) -> "int":
        return _gstlearn.Limits_getLimitNumber(self)

    def getBounds(self) -> "std::vector< Interval,std::allocator< Interval > > &":
        return _gstlearn.Limits_getBounds(self)

    def getLowerBounds(self) -> "VectorDouble":
        return _gstlearn.Limits_getLowerBounds(self)

    def getUpperBounds(self) -> "VectorDouble":
        return _gstlearn.Limits_getUpperBounds(self)

    def getLowerIncluded(self) -> "VectorBool":
        return _gstlearn.Limits_getLowerIncluded(self)

    def getUpperIncluded(self) -> "VectorBool":
        return _gstlearn.Limits_getUpperIncluded(self)

    def isInside(self, value: "double") -> "bool":
        return _gstlearn.Limits_isInside(self, value)

    def empty(self) -> "bool":
        return _gstlearn.Limits_empty(self)

    def toCategory(self, *args, **kwargs) -> "int":
        return _gstlearn.Limits_toCategory(self, *args, **kwargs)

    def toIndicator(self, *args, **kwargs) -> "int":
        return _gstlearn.Limits_toIndicator(self, *args, **kwargs)

    def toCategoryByAttribute(self, db: "Db", iatt: "int", namconv: "NamingConvention") -> "int":
        return _gstlearn.Limits_toCategoryByAttribute(self, db, iatt, namconv)

    def toIndicatorByAttribute(self, *args, **kwargs) -> "int":
        return _gstlearn.Limits_toIndicatorByAttribute(self, *args, **kwargs)

# Register Limits in _gstlearn:
_gstlearn.Limits_swigregister(Limits)


def isInteger(value: "double", eps: "double"=1.e-10) -> "bool":
    return _gstlearn.isInteger(value, eps)

def getClosestInteger(value: "double") -> "int":
    return _gstlearn.getClosestInteger(value)

def isMultiple(nbig: "int", nsmall: "int") -> "bool":
    return _gstlearn.isMultiple(nbig, nsmall)

def isOdd(number: "int") -> "bool":
    return _gstlearn.isOdd(number)

def isEven(number: "int") -> "bool":
    return _gstlearn.isEven(number)

def FFFF(value: "double") -> "int":
    return _gstlearn.FFFF(value)

def IFFFF(value: "int") -> "int":
    return _gstlearn.IFFFF(value)

def getTEST() -> "double":
    return _gstlearn.getTEST()

def getITEST() -> "int":
    return _gstlearn.getITEST()

def getMin(val1: "double", val2: "double") -> "double":
    return _gstlearn.getMin(val1, val2)

def getMax(val1: "double", val2: "double") -> "double":
    return _gstlearn.getMax(val1, val2)
DOUBLE_NA = _gstlearn.DOUBLE_NA
INT_NA = _gstlearn.INT_NA
STRING_NA = _gstlearn.STRING_NA
class CSVformat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CSVformat_swiginit(self, _gstlearn.new_CSVformat(*args))
    __swig_destroy__ = _gstlearn.delete_CSVformat

    def getCharDec(self) -> "char":
        return _gstlearn.CSVformat_getCharDec(self)

    def getCharSep(self) -> "char":
        return _gstlearn.CSVformat_getCharSep(self)

    def getFlagHeader(self) -> "int":
        return _gstlearn.CSVformat_getFlagHeader(self)

    def getNaString(self) -> "String const":
        return _gstlearn.CSVformat_getNaString(self)

    def getNSkip(self) -> "int":
        return _gstlearn.CSVformat_getNSkip(self)

    def setFlagHeader(self, flagHeader: "int") -> "void":
        return _gstlearn.CSVformat_setFlagHeader(self, flagHeader)

    def setCharDec(self, charDec: "char") -> "void":
        return _gstlearn.CSVformat_setCharDec(self, charDec)

    def setCharSep(self, charSep: "char") -> "void":
        return _gstlearn.CSVformat_setCharSep(self, charSep)

    def setNaString(self, naString: "String const &") -> "void":
        return _gstlearn.CSVformat_setNaString(self, naString)

    def setNSkip(self, nskip: "int") -> "void":
        return _gstlearn.CSVformat_setNSkip(self, nskip)

    @staticmethod
    def create(*args, **kwargs) -> "CSVformat *":
        return _gstlearn.CSVformat_create(*args, **kwargs)

# Register CSVformat in _gstlearn:
_gstlearn.CSVformat_swigregister(CSVformat)

def CSVformat_create(*args, **kwargs) -> "CSVformat *":
    return _gstlearn.CSVformat_create(*args, **kwargs)

class AFunctional(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_AFunctional

    def getFunctionValue(self, pos: "VectorDouble") -> "double":
        return _gstlearn.AFunctional_getFunctionValue(self, pos)

    def getNdim(self) -> "int":
        return _gstlearn.AFunctional_getNdim(self)

    def setNdim(self, ndim: "int") -> "void":
        return _gstlearn.AFunctional_setNdim(self, ndim)

    def getFunctionValues(self, db: "Db", useSel: "bool"=True) -> "VectorDouble":
        return _gstlearn.AFunctional_getFunctionValues(self, db, useSel)

# Register AFunctional in _gstlearn:
_gstlearn.AFunctional_swigregister(AFunctional)

class FunctionalSpirale(AFunctional):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.FunctionalSpirale_swiginit(self, _gstlearn.new_FunctionalSpirale(*args))
    __swig_destroy__ = _gstlearn.delete_FunctionalSpirale

    def getFunctionValue(self, coor: "VectorDouble") -> "double":
        return _gstlearn.FunctionalSpirale_getFunctionValue(self, coor)

    def getFunctionVectors(self, coor: "VectorDouble") -> "VectorVectorDouble":
        return _gstlearn.FunctionalSpirale_getFunctionVectors(self, coor)

# Register FunctionalSpirale in _gstlearn:
_gstlearn.FunctionalSpirale_swigregister(FunctionalSpirale)

class Table(ASerializable, AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.Table_swiginit(self, _gstlearn.new_Table(*args))
    __swig_destroy__ = _gstlearn.delete_Table

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.Table_toString(self, strfmt)

    def resetFromArray(self, table: "VectorVectorDouble") -> "int":
        return _gstlearn.Table_resetFromArray(self, table)

    def dumpToNF(self, neutralFilename: "String const &", verbose: "bool"=False) -> "int":
        return _gstlearn.Table_dumpToNF(self, neutralFilename, verbose)

    @staticmethod
    def create(nrows: "int"=0, ncols: "int"=0) -> "Table *":
        return _gstlearn.Table_create(nrows, ncols)

    @staticmethod
    def createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "Table *":
        return _gstlearn.Table_createFromNF(neutralFilename, verbose)

    @staticmethod
    def createFromArray(tabin: "VectorVectorDouble") -> "Table *":
        return _gstlearn.Table_createFromArray(tabin)

    def init(self, nrows: "int", ncols: "int", zero: "bool"=False) -> "void":
        return _gstlearn.Table_init(self, nrows, ncols, zero)

    def isEmpty(self) -> "bool":
        return _gstlearn.Table_isEmpty(self)

    def getRowNumber(self) -> "int":
        return _gstlearn.Table_getRowNumber(self)

    def getColNumber(self) -> "int":
        return _gstlearn.Table_getColNumber(self)

    def getCol(self, icol: "int") -> "VectorDouble":
        return _gstlearn.Table_getCol(self, icol)

    def getRow(self, irow: "int") -> "VectorDouble":
        return _gstlearn.Table_getRow(self, irow)

    def clear(self) -> "void":
        return _gstlearn.Table_clear(self)

    def resize(self, irow: "int", ncols: "int", zero: "bool"=False) -> "void":
        return _gstlearn.Table_resize(self, irow, ncols, zero)

    def update(self, irow: "int", icol: "int", value: "double") -> "void":
        return _gstlearn.Table_update(self, irow, icol, value)

    def increment(self, irow: "int", icol: "int", value: "double") -> "void":
        return _gstlearn.Table_increment(self, irow, icol, value)

    def getValue(self, irow: "int", icol: "int") -> "double":
        return _gstlearn.Table_getValue(self, irow, icol)

    def setValue(self, irow: "int", icol: "int", value: "double") -> "void":
        return _gstlearn.Table_setValue(self, irow, icol, value)

    def getRange(self, icol: "int") -> "VectorDouble":
        return _gstlearn.Table_getRange(self, icol)

    def getAllRange(self) -> "VectorDouble":
        return _gstlearn.Table_getAllRange(self)

    def plot(self, isimu: "int") -> "void":
        return _gstlearn.Table_plot(self, isimu)

# Register Table in _gstlearn:
_gstlearn.Table_swigregister(Table)

def Table_create(nrows: "int"=0, ncols: "int"=0) -> "Table *":
    return _gstlearn.Table_create(nrows, ncols)

def Table_createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "Table *":
    return _gstlearn.Table_createFromNF(neutralFilename, verbose)

def Table_createFromArray(tabin: "VectorVectorDouble") -> "Table *":
    return _gstlearn.Table_createFromArray(tabin)

class OptDbg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def reset() -> "void":
        return _gstlearn.OptDbg_reset()

    @staticmethod
    def query(option: "EDbg") -> "bool":
        return _gstlearn.OptDbg_query(option)

    @staticmethod
    def queryByKey(name: "String const &") -> "bool":
        return _gstlearn.OptDbg_queryByKey(name)

    @staticmethod
    def define(option: "EDbg") -> "void":
        return _gstlearn.OptDbg_define(option)

    @staticmethod
    def undefine(option: "EDbg") -> "void":
        return _gstlearn.OptDbg_undefine(option)

    @staticmethod
    def defineByKey(name: "String const &") -> "void":
        return _gstlearn.OptDbg_defineByKey(name)

    @staticmethod
    def undefineByKey(name: "String const &") -> "void":
        return _gstlearn.OptDbg_undefineByKey(name)

    @staticmethod
    def defineAll() -> "void":
        return _gstlearn.OptDbg_defineAll()

    @staticmethod
    def undefineAll() -> "void":
        return _gstlearn.OptDbg_undefineAll()

    @staticmethod
    def display() -> "void":
        return _gstlearn.OptDbg_display()

    @staticmethod
    def setIndex(cur_index: "int") -> "void":
        return _gstlearn.OptDbg_setIndex(cur_index)

    @staticmethod
    def isReferenceDefined() -> "bool":
        return _gstlearn.OptDbg_isReferenceDefined()

    @staticmethod
    def setReference(index: "int") -> "void":
        return _gstlearn.OptDbg_setReference(index)

    @staticmethod
    def force() -> "bool":
        return _gstlearn.OptDbg_force()

    def __init__(self):
        _gstlearn.OptDbg_swiginit(self, _gstlearn.new_OptDbg())
    __swig_destroy__ = _gstlearn.delete_OptDbg

# Register OptDbg in _gstlearn:
_gstlearn.OptDbg_swigregister(OptDbg)

def OptDbg_reset() -> "void":
    return _gstlearn.OptDbg_reset()

def OptDbg_query(option: "EDbg") -> "bool":
    return _gstlearn.OptDbg_query(option)

def OptDbg_queryByKey(name: "String const &") -> "bool":
    return _gstlearn.OptDbg_queryByKey(name)

def OptDbg_define(option: "EDbg") -> "void":
    return _gstlearn.OptDbg_define(option)

def OptDbg_undefine(option: "EDbg") -> "void":
    return _gstlearn.OptDbg_undefine(option)

def OptDbg_defineByKey(name: "String const &") -> "void":
    return _gstlearn.OptDbg_defineByKey(name)

def OptDbg_undefineByKey(name: "String const &") -> "void":
    return _gstlearn.OptDbg_undefineByKey(name)

def OptDbg_defineAll() -> "void":
    return _gstlearn.OptDbg_defineAll()

def OptDbg_undefineAll() -> "void":
    return _gstlearn.OptDbg_undefineAll()

def OptDbg_display() -> "void":
    return _gstlearn.OptDbg_display()

def OptDbg_setIndex(cur_index: "int") -> "void":
    return _gstlearn.OptDbg_setIndex(cur_index)

def OptDbg_isReferenceDefined() -> "bool":
    return _gstlearn.OptDbg_isReferenceDefined()

def OptDbg_setReference(index: "int") -> "void":
    return _gstlearn.OptDbg_setReference(index)

def OptDbg_force() -> "bool":
    return _gstlearn.OptDbg_force()

class OptCst(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def query(option: "ECst") -> "double":
        return _gstlearn.OptCst_query(option)

    @staticmethod
    def queryByKey(name: "String const &") -> "double":
        return _gstlearn.OptCst_queryByKey(name)

    @staticmethod
    def define(option: "ECst", value: "double") -> "void":
        return _gstlearn.OptCst_define(option, value)

    @staticmethod
    def defineByKey(name: "String const &", value: "double") -> "void":
        return _gstlearn.OptCst_defineByKey(name, value)

    @staticmethod
    def display() -> "void":
        return _gstlearn.OptCst_display()

    def __init__(self):
        _gstlearn.OptCst_swiginit(self, _gstlearn.new_OptCst())
    __swig_destroy__ = _gstlearn.delete_OptCst

# Register OptCst in _gstlearn:
_gstlearn.OptCst_swigregister(OptCst)

def OptCst_query(option: "ECst") -> "double":
    return _gstlearn.OptCst_query(option)

def OptCst_queryByKey(name: "String const &") -> "double":
    return _gstlearn.OptCst_queryByKey(name)

def OptCst_define(option: "ECst", value: "double") -> "void":
    return _gstlearn.OptCst_define(option, value)

def OptCst_defineByKey(name: "String const &", value: "double") -> "void":
    return _gstlearn.OptCst_defineByKey(name, value)

def OptCst_display() -> "void":
    return _gstlearn.OptCst_display()

class OptCustom(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def query(name: "String const &", valdef: "double"=0.) -> "double":
        return _gstlearn.OptCustom_query(name, valdef)

    @staticmethod
    def define(name: "String const &", value: "double") -> "void":
        return _gstlearn.OptCustom_define(name, value)

    @staticmethod
    def undefine(name: "String const &") -> "void":
        return _gstlearn.OptCustom_undefine(name)

    @staticmethod
    def display() -> "void":
        return _gstlearn.OptCustom_display()

    def __init__(self):
        _gstlearn.OptCustom_swiginit(self, _gstlearn.new_OptCustom())
    __swig_destroy__ = _gstlearn.delete_OptCustom

# Register OptCustom in _gstlearn:
_gstlearn.OptCustom_swigregister(OptCustom)

def OptCustom_query(name: "String const &", valdef: "double"=0.) -> "double":
    return _gstlearn.OptCustom_query(name, valdef)

def OptCustom_define(name: "String const &", value: "double") -> "void":
    return _gstlearn.OptCustom_define(name, value)

def OptCustom_undefine(name: "String const &") -> "void":
    return _gstlearn.OptCustom_undefine(name)

def OptCustom_display() -> "void":
    return _gstlearn.OptCustom_display()

class EDbgIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EDbgIterator

    def __init__(self, arg2: "EDbgIterator"):
        _gstlearn.EDbgIterator_swiginit(self, _gstlearn.new_EDbgIterator(arg2))

    def __ref__(self) -> "EDbg const &":
        return _gstlearn.EDbgIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.EDbgIterator_hasNext(self)

    def toNext(self) -> "EDbg const &":
        return _gstlearn.EDbgIterator_toNext(self)

    def toFront(self) -> "EDbg const &":
        return _gstlearn.EDbgIterator_toFront(self)

    def getEnum(self) -> "EDbg const &":
        return _gstlearn.EDbgIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.EDbgIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.EDbgIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.EDbgIterator_getDescr(self)

# Register EDbgIterator in _gstlearn:
_gstlearn.EDbgIterator_swigregister(EDbgIterator)

class EDbg(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EDbg

    def __init__(self, *args):
        _gstlearn.EDbg_swiginit(self, _gstlearn.new_EDbg(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.EDbg_getSize()

    @staticmethod
    def getIterator() -> "EDbgIterator":
        return _gstlearn.EDbg_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.EDbg_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.EDbg_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "EDbg const &":
        return _gstlearn.EDbg_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "EDbg const &":
        return _gstlearn.EDbg_fromValue(value)
    E_INTERFACE = _gstlearn.EDbg_E_INTERFACE
    E_DB = _gstlearn.EDbg_E_DB
    E_NBGH = _gstlearn.EDbg_E_NBGH
    E_MODEL = _gstlearn.EDbg_E_MODEL
    E_KRIGING = _gstlearn.EDbg_E_KRIGING
    E_SIMULATE = _gstlearn.EDbg_E_SIMULATE
    E_RESULTS = _gstlearn.EDbg_E_RESULTS
    E_VARIOGRAM = _gstlearn.EDbg_E_VARIOGRAM
    E_CONVERGE = _gstlearn.EDbg_E_CONVERGE
    E_CONDEXP = _gstlearn.EDbg_E_CONDEXP
    E_BAYES = _gstlearn.EDbg_E_BAYES
    E_MORPHO = _gstlearn.EDbg_E_MORPHO
    E_PROPS = _gstlearn.EDbg_E_PROPS
    E_UPSCALE = _gstlearn.EDbg_E_UPSCALE
    E_SPDE = _gstlearn.EDbg_E_SPDE

    def toEnum(self) -> "EDbg::EEDbg":
        return _gstlearn.EDbg_toEnum(self)

# Register EDbg in _gstlearn:
_gstlearn.EDbg_swigregister(EDbg)

def EDbg_getSize() -> "size_t":
    return _gstlearn.EDbg_getSize()

def EDbg_getIterator() -> "EDbgIterator":
    return _gstlearn.EDbg_getIterator()

def EDbg_existsKey(key: "String const &") -> "bool":
    return _gstlearn.EDbg_existsKey(key)

def EDbg_existsValue(value: "int") -> "bool":
    return _gstlearn.EDbg_existsValue(value)

def EDbg_fromKey(key: "String const &") -> "EDbg const &":
    return _gstlearn.EDbg_fromKey(key)

def EDbg_fromValue(value: "int") -> "EDbg const &":
    return _gstlearn.EDbg_fromValue(value)
EDbg.INTERFACE = _gstlearn.cvar.EDbg_INTERFACE
EDbg.DB = _gstlearn.cvar.EDbg_DB
EDbg.NBGH = _gstlearn.cvar.EDbg_NBGH
EDbg.MODEL = _gstlearn.cvar.EDbg_MODEL
EDbg.KRIGING = _gstlearn.cvar.EDbg_KRIGING
EDbg.SIMULATE = _gstlearn.cvar.EDbg_SIMULATE
EDbg.RESULTS = _gstlearn.cvar.EDbg_RESULTS
EDbg.VARIOGRAM = _gstlearn.cvar.EDbg_VARIOGRAM
EDbg.CONVERGE = _gstlearn.cvar.EDbg_CONVERGE
EDbg.CONDEXP = _gstlearn.cvar.EDbg_CONDEXP
EDbg.BAYES = _gstlearn.cvar.EDbg_BAYES
EDbg.MORPHO = _gstlearn.cvar.EDbg_MORPHO
EDbg.PROPS = _gstlearn.cvar.EDbg_PROPS
EDbg.UPSCALE = _gstlearn.cvar.EDbg_UPSCALE
EDbg.SPDE = _gstlearn.cvar.EDbg_SPDE

class ECstIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ECstIterator

    def __init__(self, arg2: "ECstIterator"):
        _gstlearn.ECstIterator_swiginit(self, _gstlearn.new_ECstIterator(arg2))

    def __ref__(self) -> "ECst const &":
        return _gstlearn.ECstIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.ECstIterator_hasNext(self)

    def toNext(self) -> "ECst const &":
        return _gstlearn.ECstIterator_toNext(self)

    def toFront(self) -> "ECst const &":
        return _gstlearn.ECstIterator_toFront(self)

    def getEnum(self) -> "ECst const &":
        return _gstlearn.ECstIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.ECstIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.ECstIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.ECstIterator_getDescr(self)

# Register ECstIterator in _gstlearn:
_gstlearn.ECstIterator_swigregister(ECstIterator)

class ECst(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ECst

    def __init__(self, *args):
        _gstlearn.ECst_swiginit(self, _gstlearn.new_ECst(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.ECst_getSize()

    @staticmethod
    def getIterator() -> "ECstIterator":
        return _gstlearn.ECst_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.ECst_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.ECst_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "ECst const &":
        return _gstlearn.ECst_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "ECst const &":
        return _gstlearn.ECst_fromValue(value)
    E_NTCAR = _gstlearn.ECst_E_NTCAR
    E_NTDEC = _gstlearn.ECst_E_NTDEC
    E_NTROW = _gstlearn.ECst_E_NTROW
    E_NTCOL = _gstlearn.ECst_E_NTCOL
    E_NTBATCH = _gstlearn.ECst_E_NTBATCH
    E_NTNAME = _gstlearn.ECst_E_NTNAME
    E_NTRANK = _gstlearn.ECst_E_NTRANK
    E_NPROC = _gstlearn.ECst_E_NPROC
    E_LOCMOD = _gstlearn.ECst_E_LOCMOD
    E_LOCNEW = _gstlearn.ECst_E_LOCNEW
    E_ASP = _gstlearn.ECst_E_ASP

    def toEnum(self) -> "ECst::EECst":
        return _gstlearn.ECst_toEnum(self)

# Register ECst in _gstlearn:
_gstlearn.ECst_swigregister(ECst)

def ECst_getSize() -> "size_t":
    return _gstlearn.ECst_getSize()

def ECst_getIterator() -> "ECstIterator":
    return _gstlearn.ECst_getIterator()

def ECst_existsKey(key: "String const &") -> "bool":
    return _gstlearn.ECst_existsKey(key)

def ECst_existsValue(value: "int") -> "bool":
    return _gstlearn.ECst_existsValue(value)

def ECst_fromKey(key: "String const &") -> "ECst const &":
    return _gstlearn.ECst_fromKey(key)

def ECst_fromValue(value: "int") -> "ECst const &":
    return _gstlearn.ECst_fromValue(value)
ECst.NTCAR = _gstlearn.cvar.ECst_NTCAR
ECst.NTDEC = _gstlearn.cvar.ECst_NTDEC
ECst.NTROW = _gstlearn.cvar.ECst_NTROW
ECst.NTCOL = _gstlearn.cvar.ECst_NTCOL
ECst.NTBATCH = _gstlearn.cvar.ECst_NTBATCH
ECst.NTNAME = _gstlearn.cvar.ECst_NTNAME
ECst.NTRANK = _gstlearn.cvar.ECst_NTRANK
ECst.NPROC = _gstlearn.cvar.ECst_NPROC
ECst.LOCMOD = _gstlearn.cvar.ECst_LOCMOD
ECst.LOCNEW = _gstlearn.cvar.ECst_LOCNEW
ECst.ASP = _gstlearn.cvar.ECst_ASP

class StdoutRedirect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _gstlearn.StdoutRedirect_swiginit(self, _gstlearn.new_StdoutRedirect(*args, **kwargs))
    __swig_destroy__ = _gstlearn.delete_StdoutRedirect

    def start(self, file: "String const &") -> "void":
        return _gstlearn.StdoutRedirect_start(self, file)

    def stop(self) -> "void":
        return _gstlearn.StdoutRedirect_stop(self)

# Register StdoutRedirect in _gstlearn:
_gstlearn.StdoutRedirect_swigregister(StdoutRedirect)


def gslFopen(*args) -> "FILE *":
    return _gstlearn.gslFopen(*args)

def gslFileExist(*args) -> "bool":
    return _gstlearn.gslFileExist(*args)

def gslBaseName(path: "String const &", keepExtension: "bool"=False) -> "String":
    return _gstlearn.gslBaseName(path, keepExtension)

def gslGetEnv(name: "String const &") -> "String":
    return _gstlearn.gslGetEnv(name)
SPACE_RN = _gstlearn.SPACE_RN
SPACE_SN = _gstlearn.SPACE_SN
class ASpace(AStringable, IClonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ASpace

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.ASpace_toString(self, strfmt)

    def clone(self) -> "IClonable *":
        return _gstlearn.ASpace_clone(self)

    def setOrigin(self, origin: "VectorDouble") -> "void":
        return _gstlearn.ASpace_setOrigin(self, origin)

    def getNDim(self) -> "unsigned int":
        return _gstlearn.ASpace_getNDim(self)

    def getOrigin(self) -> "VectorDouble const &":
        return _gstlearn.ASpace_getOrigin(self)

    def isEqual(self, space: "ASpace") -> "bool":
        return _gstlearn.ASpace_isEqual(self, space)

    def getType(self) -> "SpaceType":
        return _gstlearn.ASpace_getType(self)

    def move(self, p1: "SpacePoint", vec: "VectorDouble") -> "void":
        return _gstlearn.ASpace_move(self, p1, vec)

    def getDistance(self, *args) -> "double":
        return _gstlearn.ASpace_getDistance(self, *args)

    def getIncrement(self, p1: "SpacePoint", p2: "SpacePoint") -> "VectorDouble":
        return _gstlearn.ASpace_getIncrement(self, p1, p2)

# Register ASpace in _gstlearn:
_gstlearn.ASpace_swigregister(ASpace)

class ASpaceObject(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ASpaceObject

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.ASpaceObject_toString(self, strfmt)

    @staticmethod
    def defineDefaultSpace(type: "SpaceType", ndim: "unsigned int", param: "double"=0.) -> "void":
        return _gstlearn.ASpaceObject_defineDefaultSpace(type, ndim, param)

    @staticmethod
    def cloneDefaultSpace() -> "ASpace const *":
        return _gstlearn.ASpaceObject_cloneDefaultSpace()

    def getSpace(self) -> "ASpace const *":
        return _gstlearn.ASpaceObject_getSpace(self)

    def getUnitaryVector(self) -> "VectorDouble":
        return _gstlearn.ASpaceObject_getUnitaryVector(self)

    def isConsistent(self, *args) -> "bool":
        return _gstlearn.ASpaceObject_isConsistent(self, *args)

    def getNDim(self) -> "unsigned int":
        return _gstlearn.ASpaceObject_getNDim(self)

    def getOrigin(self) -> "VectorDouble const &":
        return _gstlearn.ASpaceObject_getOrigin(self)

    def getDistance(self, p1: "SpacePoint", p2: "SpacePoint") -> "double":
        return _gstlearn.ASpaceObject_getDistance(self, p1, p2)

    def getIncrement(self, p1: "SpacePoint", p2: "SpacePoint") -> "VectorDouble":
        return _gstlearn.ASpaceObject_getIncrement(self, p1, p2)

# Register ASpaceObject in _gstlearn:
_gstlearn.ASpaceObject_swigregister(ASpaceObject)

def ASpaceObject_defineDefaultSpace(type: "SpaceType", ndim: "unsigned int", param: "double"=0.) -> "void":
    return _gstlearn.ASpaceObject_defineDefaultSpace(type, ndim, param)

def ASpaceObject_cloneDefaultSpace() -> "ASpace const *":
    return _gstlearn.ASpaceObject_cloneDefaultSpace()

class SpacePoint(ASpaceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.SpacePoint_swiginit(self, _gstlearn.new_SpacePoint(*args))
    __swig_destroy__ = _gstlearn.delete_SpacePoint

    def __eq__(self, v: "SpacePoint") -> "bool":
        return _gstlearn.SpacePoint___eq__(self, v)

    def getCoord(self) -> "VectorDouble const &":
        return _gstlearn.SpacePoint_getCoord(self)

    def setCoord(self, *args) -> "void":
        return _gstlearn.SpacePoint_setCoord(self, *args)

    def isConsistent(self, space: "ASpace") -> "bool":
        return _gstlearn.SpacePoint_isConsistent(self, space)

    def move(self, vec: "VectorDouble") -> "void":
        return _gstlearn.SpacePoint_move(self, vec)

    def getDistance(self, pt: "SpacePoint") -> "double":
        return _gstlearn.SpacePoint_getDistance(self, pt)

    def getIncrement(self, pt: "SpacePoint") -> "VectorDouble":
        return _gstlearn.SpacePoint_getIncrement(self, pt)

    def setCoordFromAngle(self, angles: "VectorDouble") -> "void":
        return _gstlearn.SpacePoint_setCoordFromAngle(self, angles)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.SpacePoint_toString(self, strfmt)

    def __repr__(self) -> "std::string":
        return _gstlearn.SpacePoint___repr__(self)

# Register SpacePoint in _gstlearn:
_gstlearn.SpacePoint_swigregister(SpacePoint)

class SpaceRN(ASpace):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.SpaceRN_swiginit(self, _gstlearn.new_SpaceRN(*args))
    __swig_destroy__ = _gstlearn.delete_SpaceRN

    def clone(self) -> "IClonable *":
        return _gstlearn.SpaceRN_clone(self)

    def getType(self) -> "SpaceType":
        return _gstlearn.SpaceRN_getType(self)

    def move(self, p1: "SpacePoint", vec: "VectorDouble") -> "void":
        return _gstlearn.SpaceRN_move(self, p1, vec)

    def getDistance(self, *args) -> "double":
        return _gstlearn.SpaceRN_getDistance(self, *args)

    def getIncrement(self, p1: "SpacePoint", p2: "SpacePoint") -> "VectorDouble":
        return _gstlearn.SpaceRN_getIncrement(self, p1, p2)

# Register SpaceRN in _gstlearn:
_gstlearn.SpaceRN_swigregister(SpaceRN)

class ASpaceShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.ASpaceShape_swiginit(self, _gstlearn.new_ASpaceShape())
    __swig_destroy__ = _gstlearn.delete_ASpaceShape

# Register ASpaceShape in _gstlearn:
_gstlearn.ASpaceShape_swigregister(ASpaceShape)

class Cone(ASpaceShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.Cone_swiginit(self, _gstlearn.new_Cone())
    __swig_destroy__ = _gstlearn.delete_Cone
    angle = property(_gstlearn.Cone_angle_get, _gstlearn.Cone_angle_set)

# Register Cone in _gstlearn:
_gstlearn.Cone_swigregister(Cone)

class Cylinder(ASpaceShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.Cylinder_swiginit(self, _gstlearn.new_Cylinder())
    __swig_destroy__ = _gstlearn.delete_Cylinder
    radius = property(_gstlearn.Cylinder_radius_get, _gstlearn.Cylinder_radius_set)

# Register Cylinder in _gstlearn:
_gstlearn.Cylinder_swigregister(Cylinder)

class Pencil(ASpaceShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_Pencil

    def __init__(self, *args):
        _gstlearn.Pencil_swiginit(self, _gstlearn.new_Pencil(*args))

    def setAngle(self, ang: "double") -> "void":
        return _gstlearn.Pencil_setAngle(self, ang)
    angle = property(_gstlearn.Pencil_angle_get, _gstlearn.Pencil_angle_set)
    radius = property(_gstlearn.Pencil_radius_get, _gstlearn.Pencil_radius_set)

# Register Pencil in _gstlearn:
_gstlearn.Pencil_swigregister(Pencil)

class AMesh(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __swig_destroy__ = _gstlearn.delete_AMesh

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.AMesh_toString(self, strfmt)

    def getVariety(self) -> "int":
        return _gstlearn.AMesh_getVariety(self)

    def getNDim(self) -> "int":
        return _gstlearn.AMesh_getNDim(self)

    def setVariety(self, variety: "int") -> "void":
        return _gstlearn.AMesh_setVariety(self, variety)

    def setNDim(self, ndim: "int") -> "void":
        return _gstlearn.AMesh_setNDim(self, ndim)

    def getExtendMin(self, idim: "int") -> "double":
        return _gstlearn.AMesh_getExtendMin(self, idim)

    def getExtendMax(self, idim: "int") -> "double":
        return _gstlearn.AMesh_getExtendMax(self, idim)

    def getExtrema(self, idim: "int") -> "VectorDouble":
        return _gstlearn.AMesh_getExtrema(self, idim)

    def getElements(self, apices: "MatrixRectangular", meshes: "VectorInt") -> "void":
        return _gstlearn.AMesh_getElements(self, apices, meshes)

    def setExtend(self, extendmin: "VectorDouble", extendmax: "VectorDouble") -> "int":
        return _gstlearn.AMesh_setExtend(self, extendmin, extendmax)

    def getDuplicates(self, verbose: "int", dbin: "Db", dbout: "Db", nbdupl: "int *", dupl1: "int **", dupl2: "int **") -> "void":
        return _gstlearn.AMesh_getDuplicates(self, verbose, dbin, dbout, nbdupl, dupl1, dupl2)

    def isCompatibleDb(self, db: "Db") -> "int":
        return _gstlearn.AMesh_isCompatibleDb(self, db)

    def getMeshSizes(self) -> "VectorDouble":
        return _gstlearn.AMesh_getMeshSizes(self)

    def getNApexPerMesh(self) -> "int":
        return _gstlearn.AMesh_getNApexPerMesh(self)

    def getNApices(self) -> "int":
        return _gstlearn.AMesh_getNApices(self)

    def getNMeshes(self) -> "int":
        return _gstlearn.AMesh_getNMeshes(self)

    def getApex(self, imesh: "int", rank: "int") -> "int":
        return _gstlearn.AMesh_getApex(self, imesh, rank)

    def getCoor(self, imesh: "int", rank: "int", idim: "int") -> "double":
        return _gstlearn.AMesh_getCoor(self, imesh, rank, idim)

    def getApexCoor(self, i: "int", idim: "int") -> "double":
        return _gstlearn.AMesh_getApexCoor(self, i, idim)

    def getMeshSize(self, imesh: "int") -> "double":
        return _gstlearn.AMesh_getMeshSize(self, imesh)

    def getMeshToDb(self, db: "Db", verbose: "int"=0) -> "cs *":
        return _gstlearn.AMesh_getMeshToDb(self, db, verbose)

    def interpolateMeshToDb(self, db: "Db", mtab: "double *") -> "double *":
        return _gstlearn.AMesh_interpolateMeshToDb(self, db, mtab)

    def printMeshes(self, imesh: "int") -> "void":
        return _gstlearn.AMesh_printMeshes(self, imesh)

    def _convertToOldMesh(self, a_mesh: "AMesh") -> "SPDE_Mesh *":
        return _gstlearn.AMesh__convertToOldMesh(self, a_mesh)

    def getCoordinates(self, idim: "int") -> "VectorDouble":
        return _gstlearn.AMesh_getCoordinates(self, idim)

    def getMeshByApexPair(self, apex1: "int", apex2: "int") -> "VectorInt":
        return _gstlearn.AMesh_getMeshByApexPair(self, apex1, apex2)

    def getCoordinatesPerMesh(self, imesh: "int", idim: "int", flagClose: "bool"=False) -> "VectorDouble":
        return _gstlearn.AMesh_getCoordinatesPerMesh(self, imesh, idim, flagClose)

    def __repr__(self) -> "std::string":
        return _gstlearn.AMesh___repr__(self)

# Register AMesh in _gstlearn:
_gstlearn.AMesh_swigregister(AMesh)

class MeshFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.MeshFactory_swiginit(self, _gstlearn.new_MeshFactory())
    __swig_destroy__ = _gstlearn.delete_MeshFactory

    @staticmethod
    def createMesh(variety: "int", extendmin: "VectorDouble", extendmax: "VectorDouble", cellsize: "VectorDouble", rotmat: "VectorDouble", extperc: "VectorDouble", dbin: "Db", dbout: "Db", triswitch: "String const &", apices: "MatrixRectangular", meshes: "VectorInt", flag_polarize: "bool", verbose: "int"=0) -> "AMesh *":
        return _gstlearn.MeshFactory_createMesh(variety, extendmin, extendmax, cellsize, rotmat, extperc, dbin, dbout, triswitch, apices, meshes, flag_polarize, verbose)

# Register MeshFactory in _gstlearn:
_gstlearn.MeshFactory_swigregister(MeshFactory)

def MeshFactory_createMesh(variety: "int", extendmin: "VectorDouble", extendmax: "VectorDouble", cellsize: "VectorDouble", rotmat: "VectorDouble", extperc: "VectorDouble", dbin: "Db", dbout: "Db", triswitch: "String const &", apices: "MatrixRectangular", meshes: "VectorInt", flag_polarize: "bool", verbose: "int"=0) -> "AMesh *":
    return _gstlearn.MeshFactory_createMesh(variety, extendmin, extendmax, cellsize, rotmat, extperc, dbin, dbout, triswitch, apices, meshes, flag_polarize, verbose)

class MeshEStandard(AMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.MeshEStandard_swiginit(self, _gstlearn.new_MeshEStandard(*args))
    __swig_destroy__ = _gstlearn.delete_MeshEStandard

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.MeshEStandard_toString(self, strfmt)

    def getNApices(self) -> "int":
        return _gstlearn.MeshEStandard_getNApices(self)

    def getNMeshes(self) -> "int":
        return _gstlearn.MeshEStandard_getNMeshes(self)

    def getApex(self, imesh: "int", rank: "int") -> "int":
        return _gstlearn.MeshEStandard_getApex(self, imesh, rank)

    def getCoor(self, imesh: "int", rank: "int", idim: "int") -> "double":
        return _gstlearn.MeshEStandard_getCoor(self, imesh, rank, idim)

    def getApexCoor(self, i: "int", idim: "int") -> "double":
        return _gstlearn.MeshEStandard_getApexCoor(self, i, idim)

    def getMeshSize(self, imesh: "int") -> "double":
        return _gstlearn.MeshEStandard_getMeshSize(self, imesh)

    def getMeshList(self) -> "VectorInt":
        return _gstlearn.MeshEStandard_getMeshList(self)

    def getPointList(self, byCol: "bool"=True) -> "VectorDouble":
        return _gstlearn.MeshEStandard_getPointList(self, byCol)

    def getDuplicates(self, verbose: "int", dbin: "Db", dbout: "Db", nbdupl: "int *", dupl1: "int **", dupl2: "int **") -> "void":
        return _gstlearn.MeshEStandard_getDuplicates(self, verbose, dbin, dbout, nbdupl, dupl1, dupl2)

    def resetFromDb(self, *args, **kwargs) -> "int":
        return _gstlearn.MeshEStandard_resetFromDb(self, *args, **kwargs)

    def reset(self, apices: "MatrixRectangular", meshes: "VectorInt", verbose: "bool"=False) -> "int":
        return _gstlearn.MeshEStandard_reset(self, apices, meshes, verbose)

    def resetOldStyle(self, ndim: "int", apices: "VectorDouble", meshes: "VectorInt", verbose: "bool"=False) -> "int":
        return _gstlearn.MeshEStandard_resetOldStyle(self, ndim, apices, meshes, verbose)

    def getMeshToDb(self, db: "Db", verbose: "int"=0) -> "cs *":
        return _gstlearn.MeshEStandard_getMeshToDb(self, db, verbose)

    def interpolateMeshToDb(self, db: "Db", mtab: "double *") -> "double *":
        return _gstlearn.MeshEStandard_interpolateMeshToDb(self, db, mtab)

    def convertFromOldMesh(self, s_mesh: "SPDE_Mesh", verbose: "int") -> "int":
        return _gstlearn.MeshEStandard_convertFromOldMesh(self, s_mesh, verbose)

# Register MeshEStandard in _gstlearn:
_gstlearn.MeshEStandard_swigregister(MeshEStandard)

class MeshETurbo(AMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.MeshETurbo_swiginit(self, _gstlearn.new_MeshETurbo(*args))
    __swig_destroy__ = _gstlearn.delete_MeshETurbo

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.MeshETurbo_toString(self, strfmt)

    def getNApices(self) -> "int":
        return _gstlearn.MeshETurbo_getNApices(self)

    def getNMeshes(self) -> "int":
        return _gstlearn.MeshETurbo_getNMeshes(self)

    def getApex(self, imesh: "int", rank: "int") -> "int":
        return _gstlearn.MeshETurbo_getApex(self, imesh, rank)

    def getCoor(self, imesh: "int", rank: "int", idim: "int") -> "double":
        return _gstlearn.MeshETurbo_getCoor(self, imesh, rank, idim)

    def getApexCoor(self, i: "int", idim: "int") -> "double":
        return _gstlearn.MeshETurbo_getApexCoor(self, i, idim)

    def getMeshSize(self, imesh: "int") -> "double":
        return _gstlearn.MeshETurbo_getMeshSize(self, imesh)

    def setPolarized(self, flag: "bool") -> "void":
        return _gstlearn.MeshETurbo_setPolarized(self, flag)

    def setMaskArrayFromInt(self, array: "int *") -> "void":
        return _gstlearn.MeshETurbo_setMaskArrayFromInt(self, array)

    def setMaskArrayFromDouble(self, array: "double *") -> "void":
        return _gstlearn.MeshETurbo_setMaskArrayFromDouble(self, array)

    def initFromExtend(self, *args, **kwargs) -> "int":
        return _gstlearn.MeshETurbo_initFromExtend(self, *args, **kwargs)

    def initFromGrid(self, *args, **kwargs) -> "int":
        return _gstlearn.MeshETurbo_initFromGrid(self, *args, **kwargs)

    def initFromCova(self, cova: "CovAniso", field: "DbGrid", ratio: "double", nbExt: "int"=0, useSel: "bool"=True, verbose: "int"=0) -> "int":
        return _gstlearn.MeshETurbo_initFromCova(self, cova, field, ratio, nbExt, useSel, verbose)

    def isNodeMasked(self, iabs: "int") -> "bool":
        return _gstlearn.MeshETurbo_isNodeMasked(self, iabs)

    def getMeshToDb(self, db: "Db", verbose: "int"=0) -> "cs *":
        return _gstlearn.MeshETurbo_getMeshToDb(self, db, verbose)

    def interpolateMeshToDb(self, db: "Db", mtab: "double *") -> "double *":
        return _gstlearn.MeshETurbo_interpolateMeshToDb(self, db, mtab)

    def getGrid(self) -> "Grid const &":
        return _gstlearn.MeshETurbo_getGrid(self)

    def __repr__(self) -> "std::string":
        return _gstlearn.MeshETurbo___repr__(self)

# Register MeshETurbo in _gstlearn:
_gstlearn.MeshETurbo_swigregister(MeshETurbo)


def hermitePolynomials(yc: "double", r: "double", nbpoly: "int") -> "VectorDouble":
    return _gstlearn.hermitePolynomials(yc, r, nbpoly)

def hermiteCoefIndicator(yc: "double", nbpoly: "int") -> "VectorDouble":
    return _gstlearn.hermiteCoefIndicator(yc, nbpoly)

def hermiteCoefMetal(yc: "double", phi: "VectorDouble") -> "VectorDouble":
    return _gstlearn.hermiteCoefMetal(yc, phi)

def hermiteFunction(y: "double", nbpoly: "int") -> "VectorDouble":
    return _gstlearn.hermiteFunction(y, nbpoly)

def hermiteIncompleteIntegral(yc: "double", nbpoly: "int") -> "MatrixSquareGeneral":
    return _gstlearn.hermiteIncompleteIntegral(yc, nbpoly)

def hermiteLognormal(mean: "double", sigma: "double", nbpoly: "int") -> "VectorDouble":
    return _gstlearn.hermiteLognormal(mean, sigma, nbpoly)

def hermiteSeries(an: "VectorDouble", hn: "VectorDouble") -> "double":
    return _gstlearn.hermiteSeries(an, hn)

def hermiteIndicator(yc: "double", krigest: "VectorDouble", krigstd: "VectorDouble") -> "VectorDouble":
    return _gstlearn.hermiteIndicator(yc, krigest, krigstd)

def hermiteIndicatorElement(yc: "double", krigest: "double", krigstd: "double") -> "double":
    return _gstlearn.hermiteIndicatorElement(yc, krigest, krigstd)

def hermiteIndicatorStd(yc: "double", krigest: "VectorDouble", krigstd: "VectorDouble") -> "VectorDouble":
    return _gstlearn.hermiteIndicatorStd(yc, krigest, krigstd)

def hermiteIndicatorStdElement(yc: "double", krigest: "double", krigstd: "double") -> "double":
    return _gstlearn.hermiteIndicatorStdElement(yc, krigest, krigstd)

def hermiteMetal(yc: "double", krigest: "VectorDouble", krigstd: "VectorDouble", phi: "VectorDouble") -> "VectorDouble":
    return _gstlearn.hermiteMetal(yc, krigest, krigstd, phi)

def hermiteMetalElement(yc: "double", krigest: "double", krigstd: "double", phi: "VectorDouble") -> "double":
    return _gstlearn.hermiteMetalElement(yc, krigest, krigstd, phi)

def hermiteMetalStd(yc: "double", krigest: "VectorDouble", krigstd: "VectorDouble", phi: "VectorDouble") -> "VectorDouble":
    return _gstlearn.hermiteMetalStd(yc, krigest, krigstd, phi)

def hermiteMetalStdElement(yc: "double", krigest: "double", krigstd: "double", phi: "VectorDouble") -> "double":
    return _gstlearn.hermiteMetalStdElement(yc, krigest, krigstd, phi)

def hermiteCondExp(krigest: "VectorDouble", krigstd: "VectorDouble", phi: "VectorDouble") -> "VectorDouble":
    return _gstlearn.hermiteCondExp(krigest, krigstd, phi)

def hermiteCondExpElement(krigest: "double", krigstd: "double", phi: "VectorDouble") -> "double":
    return _gstlearn.hermiteCondExpElement(krigest, krigstd, phi)

def hermiteCondStd(krigest: "VectorDouble", krigstd: "VectorDouble", phi: "VectorDouble") -> "VectorDouble":
    return _gstlearn.hermiteCondStd(krigest, krigstd, phi)

def hermiteCondStdElement(krigest: "double", krigstd: "double", phi: "VectorDouble") -> "double":
    return _gstlearn.hermiteCondStdElement(krigest, krigstd, phi)

def hermiteEvaluateZ2(*args) -> "double":
    return _gstlearn.hermiteEvaluateZ2(*args)
NBSIMU_DEF = _gstlearn.NBSIMU_DEF

def integralGaussHermite(yc: "double", r: "double", psi: "VectorDouble") -> "double":
    return _gstlearn.integralGaussHermite(yc, r, psi)

def normalizeResults(*args) -> "void":
    return _gstlearn.normalizeResults(*args)

def MCCondExp(krigest: "VectorDouble", krigstd: "VectorDouble", psi: "VectorDouble", nbsimu: "int"=1000) -> "VectorDouble":
    return _gstlearn.MCCondExp(krigest, krigstd, psi, nbsimu)

def MCCondExpElement(krigest: "double", krigstd: "double", psi: "VectorDouble", nbsimu: "int"=1000) -> "double":
    return _gstlearn.MCCondExpElement(krigest, krigstd, psi, nbsimu)

def MCCondStd(krigest: "VectorDouble", krigstd: "VectorDouble", psi: "VectorDouble", nbsimu: "int"=1000) -> "VectorDouble":
    return _gstlearn.MCCondStd(krigest, krigstd, psi, nbsimu)

def MCCondStdElement(krigest: "double", krigstd: "double", psi: "VectorDouble", nbsimu: "int"=1000) -> "double":
    return _gstlearn.MCCondStdElement(krigest, krigstd, psi, nbsimu)

def MCIndicator(yc: "double", krigest: "VectorDouble", krigstd: "VectorDouble", nbsimu: "int"=1000) -> "VectorDouble":
    return _gstlearn.MCIndicator(yc, krigest, krigstd, nbsimu)

def MCIndicatorElement(yc: "double", krigest: "double", krigstd: "double", nbsimu: "int"=1000) -> "double":
    return _gstlearn.MCIndicatorElement(yc, krigest, krigstd, nbsimu)

def MCIndicatorStd(yc: "double", krigest: "VectorDouble", krigstd: "VectorDouble", nbsimu: "int"=1000) -> "VectorDouble":
    return _gstlearn.MCIndicatorStd(yc, krigest, krigstd, nbsimu)

def MCIndicatorStdElement(yc: "double", krigest: "double", krigstd: "double", nbsimu: "int"=1000) -> "double":
    return _gstlearn.MCIndicatorStdElement(yc, krigest, krigstd, nbsimu)

def MCMetal(yc: "double", krigest: "VectorDouble", krigstd: "VectorDouble", psi: "VectorDouble", nbsimu: "int"=1000) -> "VectorDouble":
    return _gstlearn.MCMetal(yc, krigest, krigstd, psi, nbsimu)

def MCMetalElement(yc: "double", krigest: "double", krigstd: "double", psi: "VectorDouble", nbsimu: "int"=1000) -> "double":
    return _gstlearn.MCMetalElement(yc, krigest, krigstd, psi, nbsimu)

def MCMetalStd(yc: "double", krigest: "VectorDouble", krigstd: "VectorDouble", psi: "VectorDouble", nbsimu: "int"=1000) -> "VectorDouble":
    return _gstlearn.MCMetalStd(yc, krigest, krigstd, psi, nbsimu)

def MCMetalStdElement(yc: "double", krigest: "double", krigstd: "double", psi: "VectorDouble", nbsimu: "int"=1000) -> "double":
    return _gstlearn.MCMetalStdElement(yc, krigest, krigstd, psi, nbsimu)
class ALinearOp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ALinearOp

    def evalDirect(self, _in: "VectorDouble", out: "VectorDouble") -> "void":
        return _gstlearn.ALinearOp_evalDirect(self, _in, out)

    def evalInverse(self, _in: "VectorDouble", out: "VectorDouble") -> "void":
        return _gstlearn.ALinearOp_evalInverse(self, _in, out)

    def getSize(self) -> "int":
        return _gstlearn.ALinearOp_getSize(self)

    def setNIterMax(self, nitermax: "int") -> "void":
        return _gstlearn.ALinearOp_setNIterMax(self, nitermax)

    def setEps(self, eps: "double") -> "void":
        return _gstlearn.ALinearOp_setEps(self, eps)

    def setX0(self, x0: "VectorDouble") -> "void":
        return _gstlearn.ALinearOp_setX0(self, x0)

    def setPrecond(self, precond: "ALinearOp", status: "int") -> "void":
        return _gstlearn.ALinearOp_setPrecond(self, precond, status)

# Register ALinearOp in _gstlearn:
_gstlearn.ALinearOp_swigregister(ALinearOp)

class ALinearOpMulti(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ALinearOpMulti

    def evalDirect(self, _in: "VectorVectorDouble", out: "VectorVectorDouble") -> "void":
        return _gstlearn.ALinearOpMulti_evalDirect(self, _in, out)

    def evalInverse(self, _in: "VectorVectorDouble", out: "VectorVectorDouble") -> "void":
        return _gstlearn.ALinearOpMulti_evalInverse(self, _in, out)

    def sizes(self) -> "int":
        return _gstlearn.ALinearOpMulti_sizes(self)

    def size(self, arg2: "int") -> "int":
        return _gstlearn.ALinearOpMulti_size(self, arg2)

    def setNIterMax(self, nitermax: "int") -> "void":
        return _gstlearn.ALinearOpMulti_setNIterMax(self, nitermax)

    def setEps(self, eps: "double") -> "void":
        return _gstlearn.ALinearOpMulti_setEps(self, eps)

    def setPrecond(self, precond: "ALinearOpMulti", status: "int") -> "void":
        return _gstlearn.ALinearOpMulti_setPrecond(self, precond, status)

    def resetStatCG(self) -> "void":
        return _gstlearn.ALinearOpMulti_resetStatCG(self)

    def printStatCG(self) -> "void":
        return _gstlearn.ALinearOpMulti_printStatCG(self)

# Register ALinearOpMulti in _gstlearn:
_gstlearn.ALinearOpMulti_swigregister(ALinearOpMulti)

class ShiftOpCs(ALinearOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.ShiftOpCs_swiginit(self, _gstlearn.new_ShiftOpCs(*args))
    __swig_destroy__ = _gstlearn.delete_ShiftOpCs

    def _evalDirect(self, _in: "VectorDouble", out: "VectorDouble") -> "void":
        return _gstlearn.ShiftOpCs__evalDirect(self, _in, out)

    def initFromOldMesh(self, s_mesh: "SPDE_Mesh", model: "Model", dbout: "Db"=None, flagAdvection: "bool"=False, verbose: "bool"=False) -> "int":
        return _gstlearn.ShiftOpCs_initFromOldMesh(self, s_mesh, model, dbout, flagAdvection, verbose)

    def initFromMesh(self, amesh: "AMesh", model: "Model", dbout: "Db"=None, igrf: "int"=0, icov: "int"=0, flagAdvection: "bool"=False, verbose: "bool"=False) -> "int":
        return _gstlearn.ShiftOpCs_initFromMesh(self, amesh, model, dbout, igrf, icov, flagAdvection, verbose)

    def initGradFromMesh(self, amesh: "AMesh", model: "Model", dbout: "Db", igrf: "int"=0, icov: "int"=0, verbose: "bool"=False, tol: "double"=1.e-10) -> "int":
        return _gstlearn.ShiftOpCs_initGradFromMesh(self, amesh, model, dbout, igrf, icov, verbose, tol)

    def initFromCS(self, S: "cs", TildeC: "VectorDouble", Lambda: "VectorDouble", model: "Model", verbose: "bool"=False) -> "int":
        return _gstlearn.ShiftOpCs_initFromCS(self, S, TildeC, Lambda, model, verbose)

    def getSize(self) -> "int":
        return _gstlearn.ShiftOpCs_getSize(self)

    def getNDim(self) -> "int":
        return _gstlearn.ShiftOpCs_getNDim(self)

    def getNModelGradParam(self) -> "int":
        return _gstlearn.ShiftOpCs_getNModelGradParam(self)

    def prodTildeC(self, _in: "VectorDouble", out: "VectorDouble", power: "EPowerPT") -> "void":
        return _gstlearn.ShiftOpCs_prodTildeC(self, _in, out, power)

    def prodLambda(self, _in: "VectorDouble", out: "VectorDouble", power: "EPowerPT") -> "void":
        return _gstlearn.ShiftOpCs_prodLambda(self, _in, out, power)

    def prodLambdaOnSqrtTildeC(self, out: "VectorDouble", _in: "VectorDouble", puis: "double"=2) -> "void":
        return _gstlearn.ShiftOpCs_prodLambdaOnSqrtTildeC(self, out, _in, puis)

    def getMaxEigenValue(self) -> "double":
        return _gstlearn.ShiftOpCs_getMaxEigenValue(self)

    def getS(self) -> "cs *":
        return _gstlearn.ShiftOpCs_getS(self)

    def getSGrad(self, iapex: "int", igparam: "int") -> "cs *":
        return _gstlearn.ShiftOpCs_getSGrad(self, iapex, igparam)

    def getTildeC(self) -> "VectorDouble const &":
        return _gstlearn.ShiftOpCs_getTildeC(self)

    def getLambdas(self) -> "VectorDouble const &":
        return _gstlearn.ShiftOpCs_getLambdas(self)

    def getLambda(self, iapex: "int") -> "double":
        return _gstlearn.ShiftOpCs_getLambda(self, iapex)

    def getLambdaGrads(self, idim: "int") -> "VectorDouble const &":
        return _gstlearn.ShiftOpCs_getLambdaGrads(self, idim)

    def getLambdaGrad(self, idim: "int", iapex: "int") -> "double":
        return _gstlearn.ShiftOpCs_getLambdaGrad(self, idim, iapex)

    def getSGradAddress(self, iapex: "int", igparam: "int") -> "int":
        return _gstlearn.ShiftOpCs_getSGradAddress(self, iapex, igparam)

    def getFlagNoStatByHH(self) -> "bool":
        return _gstlearn.ShiftOpCs_getFlagNoStatByHH(self)

    def setFlagNoStatByHH(self, flagGradByHH: "bool") -> "void":
        return _gstlearn.ShiftOpCs_setFlagNoStatByHH(self, flagGradByHH)

    def getLambdaGradSize(self) -> "int":
        return _gstlearn.ShiftOpCs_getLambdaGradSize(self)

# Register ShiftOpCs in _gstlearn:
_gstlearn.ShiftOpCs_swigregister(ShiftOpCs)

class PrecisionOp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.PrecisionOp_swiginit(self, _gstlearn.new_PrecisionOp(*args))
    __swig_destroy__ = _gstlearn.delete_PrecisionOp

    def reset(self, *args, **kwargs) -> "int":
        return _gstlearn.PrecisionOp_reset(self, *args, **kwargs)

    def eval(self, _in: "VectorDouble", out: "VectorDouble") -> "void":
        return _gstlearn.PrecisionOp_eval(self, _in, out)

    def gradYQX(self, arg2: "VectorDouble", arg3: "VectorDouble", arg4: "VectorDouble") -> "void":
        return _gstlearn.PrecisionOp_gradYQX(self, arg2, arg3, arg4)

    def gradYQXOptim(self, arg2: "VectorDouble", arg3: "VectorDouble", arg4: "VectorDouble") -> "void":
        return _gstlearn.PrecisionOp_gradYQXOptim(self, arg2, arg3, arg4)

    def evalDeriv(self, arg2: "VectorDouble", arg3: "VectorDouble", arg4: "int", arg5: "int") -> "void":
        return _gstlearn.PrecisionOp_evalDeriv(self, arg2, arg3, arg4, arg5)

    def evalDerivOptim(self, arg2: "VectorDouble", arg3: "int", arg4: "int") -> "void":
        return _gstlearn.PrecisionOp_evalDerivOptim(self, arg2, arg3, arg4)

    def getSize(self) -> "int":
        return _gstlearn.PrecisionOp_getSize(self)

    def computeLogDet(self, nsimus: "int"=1, seed: "int"=0) -> "double":
        return _gstlearn.PrecisionOp_computeLogDet(self, nsimus, seed)

    def getTraining(self) -> "bool":
        return _gstlearn.PrecisionOp_getTraining(self)

    def setTraining(self, tr: "bool") -> "void":
        return _gstlearn.PrecisionOp_setTraining(self, tr)

    def getShiftOp(self) -> "ShiftOpCs *":
        return _gstlearn.PrecisionOp_getShiftOp(self)

# Register PrecisionOp in _gstlearn:
_gstlearn.PrecisionOp_swigregister(PrecisionOp)

class PrecisionOpCs(PrecisionOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _gstlearn.PrecisionOpCs_swiginit(self, _gstlearn.new_PrecisionOpCs(*args, **kwargs))

    def evalDeriv(self, _in: "VectorDouble", out: "VectorDouble", iapex: "int", igparam: "int") -> "void":
        return _gstlearn.PrecisionOpCs_evalDeriv(self, _in, out, iapex, igparam)

    def evalDerivOptim(self, out: "VectorDouble", iapex: "int", igparam: "int") -> "void":
        return _gstlearn.PrecisionOpCs_evalDerivOptim(self, out, iapex, igparam)

    def gradYQX(self, X: "VectorDouble", Y: "VectorDouble", result: "VectorDouble") -> "void":
        return _gstlearn.PrecisionOpCs_gradYQX(self, X, Y, result)

    def gradYQXOptim(self, X: "VectorDouble", Y: "VectorDouble", result: "VectorDouble") -> "void":
        return _gstlearn.PrecisionOpCs_gradYQXOptim(self, X, Y, result)
    __swig_destroy__ = _gstlearn.delete_PrecisionOpCs

    def getCoeffs(self) -> "VectorDouble":
        return _gstlearn.PrecisionOpCs_getCoeffs(self)

    def getQ(self) -> "cs *":
        return _gstlearn.PrecisionOpCs_getQ(self)

# Register PrecisionOpCs in _gstlearn:
_gstlearn.PrecisionOpCs_swigregister(PrecisionOpCs)

TO_ndim = _gstlearn.TO_ndim
TO_ncorner = _gstlearn.TO_ncorner
TO_npercell = _gstlearn.TO_npercell
class TripletND(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rows = property(_gstlearn.TripletND_rows_get, _gstlearn.TripletND_rows_set)
    cols = property(_gstlearn.TripletND_cols_get, _gstlearn.TripletND_cols_set)
    values = property(_gstlearn.TripletND_values_get, _gstlearn.TripletND_values_set)

    def __init__(self):
        _gstlearn.TripletND_swiginit(self, _gstlearn.new_TripletND())
    __swig_destroy__ = _gstlearn.delete_TripletND

# Register TripletND in _gstlearn:
_gstlearn.TripletND_swigregister(TripletND)

class TurboOptimizer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.TurboOptimizer_swiginit(self, _gstlearn.new_TurboOptimizer(*args))
    __swig_destroy__ = _gstlearn.delete_TurboOptimizer

    def setGrid(self, nx: "int"=2, ny: "int"=2, dx: "double"=1., dy: "double"=1., x0: "double"=0., y0: "double"=0.) -> "void":
        return _gstlearn.TurboOptimizer_setGrid(self, nx, ny, dx, dy, x0, y0)

    def setModelByRange(self, range: "double"=1., sill: "double"=1., param: "int"=1) -> "void":
        return _gstlearn.TurboOptimizer_setModelByRange(self, range, sill, param)

    def setModelByScale(self, scale: "double"=1., sill: "double"=1., param: "int"=1) -> "void":
        return _gstlearn.TurboOptimizer_setModelByScale(self, scale, sill, param)

    def setEnviron(self, flagOne: "int"=1) -> "void":
        return _gstlearn.TurboOptimizer_setEnviron(self, flagOne)

    def run(self, verbose: "bool"=False) -> "void":
        return _gstlearn.TurboOptimizer_run(self, verbose)

    def getBlin(self) -> "VectorDouble":
        return _gstlearn.TurboOptimizer_getBlin(self)

    def getTildeC(self) -> "VectorDouble":
        return _gstlearn.TurboOptimizer_getTildeC(self)

    def getLambda(self) -> "VectorDouble":
        return _gstlearn.TurboOptimizer_getLambda(self)

    def getS(self) -> "TripletND":
        return _gstlearn.TurboOptimizer_getS(self)

    def getQ(self) -> "TripletND":
        return _gstlearn.TurboOptimizer_getQ(self)

    def interpolate(self, x: "VectorDouble", y: "VectorDouble") -> "TripletND":
        return _gstlearn.TurboOptimizer_interpolate(self, x, y)

    def interpolate_rows(self, x: "VectorDouble", y: "VectorDouble") -> "VectorInt":
        return _gstlearn.TurboOptimizer_interpolate_rows(self, x, y)

    def interpolate_cols(self, x: "VectorDouble", y: "VectorDouble") -> "VectorInt":
        return _gstlearn.TurboOptimizer_interpolate_cols(self, x, y)

    def interpolate_values(self, x: "VectorDouble", y: "VectorDouble") -> "VectorDouble":
        return _gstlearn.TurboOptimizer_interpolate_values(self, x, y)

    def getQ_rows(self) -> "VectorInt":
        return _gstlearn.TurboOptimizer_getQ_rows(self)

    def getQ_cols(self) -> "VectorInt":
        return _gstlearn.TurboOptimizer_getQ_cols(self)

    def getQ_values(self) -> "VectorDouble":
        return _gstlearn.TurboOptimizer_getQ_values(self)

    def printClass(self) -> "void":
        return _gstlearn.TurboOptimizer_printClass(self)

    def printMeshes(self) -> "void":
        return _gstlearn.TurboOptimizer_printMeshes(self)

    def printS(self, nper_batch: "int"=5, row_begin: "int"=0, row_end: "int"=0, col_begin: "int"=0, col_end: "int"=0) -> "void":
        return _gstlearn.TurboOptimizer_printS(self, nper_batch, row_begin, row_end, col_begin, col_end)

    def printQ(self, nper_batch: "int"=5, row_begin: "int"=0, row_end: "int"=0, col_begin: "int"=0, col_end: "int"=0) -> "void":
        return _gstlearn.TurboOptimizer_printQ(self, nper_batch, row_begin, row_end, col_begin, col_end)

    def getHalf(self) -> "int":
        return _gstlearn.TurboOptimizer_getHalf(self)

    def getCenter(self) -> "int":
        return _gstlearn.TurboOptimizer_getCenter(self)

    def getNxred(self) -> "int":
        return _gstlearn.TurboOptimizer_getNxred(self)

    def getPoncif(self) -> "int":
        return _gstlearn.TurboOptimizer_getPoncif(self)

    def getTildeCT(self) -> "VectorDouble const &":
        return _gstlearn.TurboOptimizer_getTildeCT(self)

    def getLambdaT(self) -> "VectorDouble const &":
        return _gstlearn.TurboOptimizer_getLambdaT(self)

    def getQT(self) -> "VectorDouble const &":
        return _gstlearn.TurboOptimizer_getQT(self)

    def getST(self) -> "VectorDouble const &":
        return _gstlearn.TurboOptimizer_getST(self)

# Register TurboOptimizer in _gstlearn:
_gstlearn.TurboOptimizer_swigregister(TurboOptimizer)

class IProjMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_IProjMatrix

    def point2mesh(self, _in: "VectorDouble", out: "VectorDouble") -> "int":
        return _gstlearn.IProjMatrix_point2mesh(self, _in, out)

    def mesh2point(self, _in: "VectorDouble", out: "VectorDouble") -> "int":
        return _gstlearn.IProjMatrix_mesh2point(self, _in, out)

    def getApexNumber(self) -> "int":
        return _gstlearn.IProjMatrix_getApexNumber(self)

    def getPointNumber(self) -> "int":
        return _gstlearn.IProjMatrix_getPointNumber(self)

# Register IProjMatrix in _gstlearn:
_gstlearn.IProjMatrix_swigregister(IProjMatrix)

class ProjMatrix(IProjMatrix, AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.ProjMatrix_swiginit(self, _gstlearn.new_ProjMatrix(*args))
    __swig_destroy__ = _gstlearn.delete_ProjMatrix

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.ProjMatrix_toString(self, strfmt)

    def resetFromDb(self, db: "Db", a_mesh: "AMesh", verbose: "int"=0) -> "int":
        return _gstlearn.ProjMatrix_resetFromDb(self, db, a_mesh, verbose)

    def resetFromPoints(self, npoint: "int", napices: "int", aproj: "cs") -> "int":
        return _gstlearn.ProjMatrix_resetFromPoints(self, npoint, napices, aproj)

    def resetFromDbOldStyle(self, db: "Db", s_mesh: "SPDE_Mesh", verbose: "int"=0) -> "int":
        return _gstlearn.ProjMatrix_resetFromDbOldStyle(self, db, s_mesh, verbose)

    def resetFromDbByNeighOldStyle(self, db: "Db", s_mesh: "SPDE_Mesh", radius: "double", flag_exact: "int"=0, verbose: "int"=0) -> "int":
        return _gstlearn.ProjMatrix_resetFromDbByNeighOldStyle(self, db, s_mesh, radius, flag_exact, verbose)

    def point2mesh(self, _in: "VectorDouble", out: "VectorDouble") -> "int":
        return _gstlearn.ProjMatrix_point2mesh(self, _in, out)

    def mesh2point(self, _in: "VectorDouble", out: "VectorDouble") -> "int":
        return _gstlearn.ProjMatrix_mesh2point(self, _in, out)

    def getApexNumber(self) -> "int":
        return _gstlearn.ProjMatrix_getApexNumber(self)

    def getPointNumber(self) -> "int":
        return _gstlearn.ProjMatrix_getPointNumber(self)

    def getAproj(self) -> "cs const *":
        return _gstlearn.ProjMatrix_getAproj(self)

    def __repr__(self) -> "std::string":
        return _gstlearn.ProjMatrix___repr__(self)

# Register ProjMatrix in _gstlearn:
_gstlearn.ProjMatrix_swigregister(ProjMatrix)

class PrecisionOpMultiConditional(ALinearOpMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.PrecisionOpMultiConditional_swiginit(self, _gstlearn.new_PrecisionOpMultiConditional())
    __swig_destroy__ = _gstlearn.delete_PrecisionOpMultiConditional

    def push_back(self, pmatElem: "PrecisionOp", projDataElem: "IProjMatrix"=None) -> "void":
        return _gstlearn.PrecisionOpMultiConditional_push_back(self, pmatElem, projDataElem)

    def getAllVarianceData(self) -> "VectorDouble":
        return _gstlearn.PrecisionOpMultiConditional_getAllVarianceData(self)

    def getVarianceData(self, iech: "int") -> "double":
        return _gstlearn.PrecisionOpMultiConditional_getVarianceData(self, iech)

    def setVarianceData(self, nugg: "double") -> "void":
        return _gstlearn.PrecisionOpMultiConditional_setVarianceData(self, nugg)

    def setVarianceDataVector(self, nugg: "VectorDouble") -> "void":
        return _gstlearn.PrecisionOpMultiConditional_setVarianceDataVector(self, nugg)

    def sizes(self) -> "int":
        return _gstlearn.PrecisionOpMultiConditional_sizes(self)

    def size(self, i: "int") -> "int":
        return _gstlearn.PrecisionOpMultiConditional_size(self, i)

    def computeRhs(self, datVal: "VectorDouble") -> "VectorVectorDouble":
        return _gstlearn.PrecisionOpMultiConditional_computeRhs(self, datVal)

    def computeRhsInPlace(self, datVal: "VectorDouble", rhs: "VectorVectorDouble") -> "void":
        return _gstlearn.PrecisionOpMultiConditional_computeRhsInPlace(self, datVal, rhs)

    def simulateOnMeshing(self, gauss: "VectorDouble", result: "VectorVectorDouble") -> "void":
        return _gstlearn.PrecisionOpMultiConditional_simulateOnMeshing(self, gauss, result)

    def simulateOnDataPointFromMeshings(self, simus: "VectorVectorDouble", result: "VectorDouble") -> "void":
        return _gstlearn.PrecisionOpMultiConditional_simulateOnDataPointFromMeshings(self, simus, result)

    def evalInvCov(self, _in: "VectorDouble", result: "VectorDouble") -> "void":
        return _gstlearn.PrecisionOpMultiConditional_evalInvCov(self, _in, result)

    def computeCoeffs(self, Y: "VectorDouble", X: "VectorVectorDouble") -> "VectorDouble":
        return _gstlearn.PrecisionOpMultiConditional_computeCoeffs(self, Y, X)

# Register PrecisionOpMultiConditional in _gstlearn:
_gstlearn.PrecisionOpMultiConditional_swigregister(PrecisionOpMultiConditional)

class IOptimCost(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_IOptimCost

    def calculateGradient(self, indic: "VectorDouble", sval: "VectorDouble", normgrad: "double *") -> "void":
        return _gstlearn.IOptimCost_calculateGradient(self, indic, sval, normgrad)

# Register IOptimCost in _gstlearn:
_gstlearn.IOptimCost_swigregister(IOptimCost)

class OptimCostBinary(IOptimCost):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.OptimCostBinary_swiginit(self, _gstlearn.new_OptimCostBinary(*args))
    __swig_destroy__ = _gstlearn.delete_OptimCostBinary

    def reset(self, *args, **kwargs) -> "void":
        return _gstlearn.OptimCostBinary_reset(self, *args, **kwargs)

    def minimize(self, indic: "VectorDouble", verbose: "bool"=False, maxiter: "int"=100, eps: "double"=5.e-4) -> "VectorDouble":
        return _gstlearn.OptimCostBinary_minimize(self, indic, verbose, maxiter, eps)

    def calculateGradient(self, indic: "VectorDouble", _lambda: "VectorDouble", out: "double *") -> "void":
        return _gstlearn.OptimCostBinary_calculateGradient(self, indic, _lambda, out)

    def setMeanProportion(self, meanprop: "double") -> "int":
        return _gstlearn.OptimCostBinary_setMeanProportion(self, meanprop)

    def setCGParams(self, cgmaxiter: "int"=100, cgeps: "double"=1.e-08) -> "void":
        return _gstlearn.OptimCostBinary_setCGParams(self, cgmaxiter, cgeps)

    def setPreCondParams(self, chebncmax: "int"=10001, chebtol: "double"=5.e-3) -> "void":
        return _gstlearn.OptimCostBinary_setPreCondParams(self, chebncmax, chebtol)

    def isInitialized(self) -> "int":
        return _gstlearn.OptimCostBinary_isInitialized(self)

    def getNPoint(self) -> "int":
        return _gstlearn.OptimCostBinary_getNPoint(self)

    def getNVertex(self) -> "int":
        return _gstlearn.OptimCostBinary_getNVertex(self)

    def toggleSeismic(self, status: "bool") -> "void":
        return _gstlearn.OptimCostBinary_toggleSeismic(self, status)

# Register OptimCostBinary in _gstlearn:
_gstlearn.OptimCostBinary_swigregister(OptimCostBinary)

class OptimCostColored(OptimCostBinary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.OptimCostColored_swiginit(self, _gstlearn.new_OptimCostColored(*args))
    __swig_destroy__ = _gstlearn.delete_OptimCostColored

    def reset(self, *args, **kwargs) -> "void":
        return _gstlearn.OptimCostColored_reset(self, *args, **kwargs)

    def minimize(self, *args, **kwargs) -> "VectorVectorDouble":
        return _gstlearn.OptimCostColored_minimize(self, *args, **kwargs)

    def initSplit(self, nfacies: "int", verbose: "bool"=False) -> "VectorVectorInt":
        return _gstlearn.OptimCostColored_initSplit(self, nfacies, verbose)

    def printSplits(self, *args, **kwargs) -> "void":
        return _gstlearn.OptimCostColored_printSplits(self, *args, **kwargs)

    def setMeanProps(self, meanProps: "VectorDouble") -> "void":
        return _gstlearn.OptimCostColored_setMeanProps(self, meanProps)

    def setSplits(self, splits: "VectorVectorInt") -> "void":
        return _gstlearn.OptimCostColored_setSplits(self, splits)

# Register OptimCostColored in _gstlearn:
_gstlearn.OptimCostColored_swigregister(OptimCostColored)

class EPowerPTIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EPowerPTIterator

    def __init__(self, arg2: "EPowerPTIterator"):
        _gstlearn.EPowerPTIterator_swiginit(self, _gstlearn.new_EPowerPTIterator(arg2))

    def __ref__(self) -> "EPowerPT const &":
        return _gstlearn.EPowerPTIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.EPowerPTIterator_hasNext(self)

    def toNext(self) -> "EPowerPT const &":
        return _gstlearn.EPowerPTIterator_toNext(self)

    def toFront(self) -> "EPowerPT const &":
        return _gstlearn.EPowerPTIterator_toFront(self)

    def getEnum(self) -> "EPowerPT const &":
        return _gstlearn.EPowerPTIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.EPowerPTIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.EPowerPTIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.EPowerPTIterator_getDescr(self)

# Register EPowerPTIterator in _gstlearn:
_gstlearn.EPowerPTIterator_swigregister(EPowerPTIterator)

class EPowerPT(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EPowerPT

    def __init__(self, *args):
        _gstlearn.EPowerPT_swiginit(self, _gstlearn.new_EPowerPT(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.EPowerPT_getSize()

    @staticmethod
    def getIterator() -> "EPowerPTIterator":
        return _gstlearn.EPowerPT_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.EPowerPT_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.EPowerPT_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "EPowerPT const &":
        return _gstlearn.EPowerPT_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "EPowerPT const &":
        return _gstlearn.EPowerPT_fromValue(value)
    E_UNDEFINED = _gstlearn.EPowerPT_E_UNDEFINED
    E_ONE = _gstlearn.EPowerPT_E_ONE
    E_MINUSONE = _gstlearn.EPowerPT_E_MINUSONE
    E_MINUSHALF = _gstlearn.EPowerPT_E_MINUSHALF
    E_HALF = _gstlearn.EPowerPT_E_HALF
    E_LOG = _gstlearn.EPowerPT_E_LOG

    def toEnum(self) -> "EPowerPT::EEPowerPT":
        return _gstlearn.EPowerPT_toEnum(self)

# Register EPowerPT in _gstlearn:
_gstlearn.EPowerPT_swigregister(EPowerPT)

def EPowerPT_getSize() -> "size_t":
    return _gstlearn.EPowerPT_getSize()

def EPowerPT_getIterator() -> "EPowerPTIterator":
    return _gstlearn.EPowerPT_getIterator()

def EPowerPT_existsKey(key: "String const &") -> "bool":
    return _gstlearn.EPowerPT_existsKey(key)

def EPowerPT_existsValue(value: "int") -> "bool":
    return _gstlearn.EPowerPT_existsValue(value)

def EPowerPT_fromKey(key: "String const &") -> "EPowerPT const &":
    return _gstlearn.EPowerPT_fromKey(key)

def EPowerPT_fromValue(value: "int") -> "EPowerPT const &":
    return _gstlearn.EPowerPT_fromValue(value)
EPowerPT.UNDEFINED = _gstlearn.cvar.EPowerPT_UNDEFINED
EPowerPT.ONE = _gstlearn.cvar.EPowerPT_ONE
EPowerPT.MINUSONE = _gstlearn.cvar.EPowerPT_MINUSONE
EPowerPT.MINUSHALF = _gstlearn.cvar.EPowerPT_MINUSHALF
EPowerPT.HALF = _gstlearn.cvar.EPowerPT_HALF
EPowerPT.LOG = _gstlearn.cvar.EPowerPT_LOG

class ANoStat(AStringable, IClonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ANoStat

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.ANoStat_toString(self, strfmt)

    def clone(self) -> "IClonable *":
        return _gstlearn.ANoStat_clone(self)

    def isNotEmpty(self) -> "bool":
        return _gstlearn.ANoStat_isNotEmpty(self)

    def isDefinedByCov(self, igrf: "int", icov: "int") -> "bool":
        return _gstlearn.ANoStat_isDefinedByCov(self, igrf, icov)

    def isDefinedByType(self, igrf: "int", type: "EConsElem") -> "bool":
        return _gstlearn.ANoStat_isDefinedByType(self, igrf, type)

    def isDefinedByCovType(self, igrf: "int", icov: "int", type: "EConsElem") -> "bool":
        return _gstlearn.ANoStat_isDefinedByCovType(self, igrf, icov, type)

    def isDefined(self, igrf: "int", icov: "int", type: "EConsElem", iv1: "int"=0, iv2: "int"=0) -> "bool":
        return _gstlearn.ANoStat_isDefined(self, igrf, icov, type, iv1, iv2)

    def isDefinedforAnisotropy(self, igrf: "int", icov: "int") -> "bool":
        return _gstlearn.ANoStat_isDefinedforAnisotropy(self, igrf, icov)

    def isDefinedforRotation(self, igrf: "int", icov: "int") -> "bool":
        return _gstlearn.ANoStat_isDefinedforRotation(self, igrf, icov)

    def getValue(self, igrf: "int", icov: "int", type: "EConsElem", iv1: "int", iv2: "int", icas: "int", rank: "int") -> "double":
        return _gstlearn.ANoStat_getValue(self, igrf, icov, type, iv1, iv2, icas, rank)

    def getValueByParam(self, ipar: "int", icas: "int", iech: "int") -> "double":
        return _gstlearn.ANoStat_getValueByParam(self, ipar, icas, iech)

    def attachToMesh(self, mesh: "AMesh", verbose: "bool"=False) -> "int":
        return _gstlearn.ANoStat_attachToMesh(self, mesh, verbose)

    def detachFromMesh(self) -> "void":
        return _gstlearn.ANoStat_detachFromMesh(self)

    def attachToDb(self, db: "Db", icas: "int", verbose: "bool"=False) -> "int":
        return _gstlearn.ANoStat_attachToDb(self, db, icas, verbose)

    def detachFromDb(self, db: "Db", icas: "int") -> "void":
        return _gstlearn.ANoStat_detachFromDb(self, db, icas)

    def addNoStatElem(self, igrf: "int", icov: "int", type: "EConsElem", iv1: "int", iv2: "int") -> "int":
        return _gstlearn.ANoStat_addNoStatElem(self, igrf, icov, type, iv1, iv2)

    def addNoStatElemByItem(self, item: "CovParamId") -> "int":
        return _gstlearn.ANoStat_addNoStatElemByItem(self, item)

    def addNoStatElems(self, codes: "VectorString") -> "int":
        return _gstlearn.ANoStat_addNoStatElems(self, codes)

    def deleteNoStatElem(self, ipar: "int") -> "void":
        return _gstlearn.ANoStat_deleteNoStatElem(self, ipar)

    def deleteAllNoStatElem(self) -> "void":
        return _gstlearn.ANoStat_deleteAllNoStatElem(self)

    def getRank(self, igrf: "int", icov: "int", type: "EConsElem", iv1: "int", iv2: "int") -> "int":
        return _gstlearn.ANoStat_getRank(self, igrf, icov, type, iv1, iv2)

    def getIGrf(self, ipar: "int") -> "int":
        return _gstlearn.ANoStat_getIGrf(self, ipar)

    def getICov(self, ipar: "int") -> "int":
        return _gstlearn.ANoStat_getICov(self, ipar)

    def getType(self, ipar: "int") -> "EConsElem const &":
        return _gstlearn.ANoStat_getType(self, ipar)

    def getIV1(self, ipar: "int") -> "int":
        return _gstlearn.ANoStat_getIV1(self, ipar)

    def getIV2(self, ipar: "int") -> "int":
        return _gstlearn.ANoStat_getIV2(self, ipar)

    def getNoStatElemNumber(self) -> "int":
        return _gstlearn.ANoStat_getNoStatElemNumber(self)

    def getNoStats(self) -> "std::vector< CovParamId,std::allocator< CovParamId > > const &":
        return _gstlearn.ANoStat_getNoStats(self)

    def getNoStat(self, ipar: "int") -> "CovParamId const":
        return _gstlearn.ANoStat_getNoStat(self, ipar)

    def attachModel(self, model: "Model") -> "int":
        return _gstlearn.ANoStat_attachModel(self, model)

    def matchIGrf(self, ipar: "int", igrf0: "int") -> "bool":
        return _gstlearn.ANoStat_matchIGrf(self, ipar, igrf0)

    def matchICov(self, ipar: "int", icov0: "int") -> "bool":
        return _gstlearn.ANoStat_matchICov(self, ipar, icov0)

    def matchType(self, ipar: "int", type0: "EConsElem") -> "bool":
        return _gstlearn.ANoStat_matchType(self, ipar, type0)

    def matchIV1(self, ipar: "int", iv10: "int") -> "bool":
        return _gstlearn.ANoStat_matchIV1(self, ipar, iv10)

    def matchIV2(self, ipar: "int", iv20: "int") -> "bool":
        return _gstlearn.ANoStat_matchIV2(self, ipar, iv20)

    def getAllItems(self) -> "std::vector< CovParamId,std::allocator< CovParamId > > const &":
        return _gstlearn.ANoStat_getAllItems(self)

    def getItems(self, ipar: "int") -> "CovParamId const":
        return _gstlearn.ANoStat_getItems(self, ipar)

    def updateModel(self, model: "Model", icas1: "int", iech1: "int", icas2: "int", iech2: "int") -> "void":
        return _gstlearn.ANoStat_updateModel(self, model, icas1, iech1, icas2, iech2)

    def updateModelByVertex(self, model: "Model", vertex: "int") -> "void":
        return _gstlearn.ANoStat_updateModelByVertex(self, model, vertex)

# Register ANoStat in _gstlearn:
_gstlearn.ANoStat_swigregister(ANoStat)

class NoStatArray(ANoStat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.NoStatArray_swiginit(self, _gstlearn.new_NoStatArray(*args))
    __swig_destroy__ = _gstlearn.delete_NoStatArray

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.NoStatArray_toString(self, strfmt)

    def clone(self) -> "IClonable *":
        return _gstlearn.NoStatArray_clone(self)

    def getValue(self, igrf: "int", icov: "int", type: "EConsElem", iv1: "int", iv2: "int", icas: "int", rank: "int") -> "double":
        return _gstlearn.NoStatArray_getValue(self, igrf, icov, type, iv1, iv2, icas, rank)

    def getValueByParam(self, ipar: "int", icas: "int", rank: "int") -> "double":
        return _gstlearn.NoStatArray_getValueByParam(self, ipar, icas, rank)

    def attachToMesh(self, mesh: "AMesh", verbose: "bool"=False) -> "int":
        return _gstlearn.NoStatArray_attachToMesh(self, mesh, verbose)

    def detachFromMesh(self) -> "void":
        return _gstlearn.NoStatArray_detachFromMesh(self)

    def attachToDb(self, db: "Db", icas: "int", verbose: "bool"=False) -> "int":
        return _gstlearn.NoStatArray_attachToDb(self, db, icas, verbose)

    def detachFromDb(self, db: "Db", icas: "int") -> "void":
        return _gstlearn.NoStatArray_detachFromDb(self, db, icas)

    def isEmpty(self, icas: "int") -> "bool":
        return _gstlearn.NoStatArray_isEmpty(self, icas)

    def __repr__(self) -> "std::string":
        return _gstlearn.NoStatArray___repr__(self)

# Register NoStatArray in _gstlearn:
_gstlearn.NoStatArray_swigregister(NoStatArray)

class NoStatFunctional(ANoStat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.NoStatFunctional_swiginit(self, _gstlearn.new_NoStatFunctional(*args))
    __swig_destroy__ = _gstlearn.delete_NoStatFunctional

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.NoStatFunctional_toString(self, strfmt)

    def clone(self) -> "IClonable *":
        return _gstlearn.NoStatFunctional_clone(self)

    def attachToMesh(self, mesh: "AMesh", verbose: "bool"=False) -> "int":
        return _gstlearn.NoStatFunctional_attachToMesh(self, mesh, verbose)

    def attachToDb(self, db: "Db", icas: "int", verbose: "bool"=False) -> "int":
        return _gstlearn.NoStatFunctional_attachToDb(self, db, icas, verbose)

    def getValue(self, igrf: "int", icov: "int", type: "EConsElem", iv1: "int", iv2: "int", icas: "int", rank: "int") -> "double":
        return _gstlearn.NoStatFunctional_getValue(self, igrf, icov, type, iv1, iv2, icas, rank)

    def getValueByParam(self, ipar: "int", icas: "int", rank: "int") -> "double":
        return _gstlearn.NoStatFunctional_getValueByParam(self, ipar, icas, rank)

# Register NoStatFunctional in _gstlearn:
_gstlearn.NoStatFunctional_swigregister(NoStatFunctional)

class ANeighParam(AStringable, ASerializable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ANeighParam

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.ANeighParam_toString(self, strfmt)

    def getMaxSampleNumber(self, db: "Db") -> "int":
        return _gstlearn.ANeighParam_getMaxSampleNumber(self, db)

    def getType(self) -> "ENeigh":
        return _gstlearn.ANeighParam_getType(self)

    def getNDim(self) -> "int":
        return _gstlearn.ANeighParam_getNDim(self)

    def getDistCont(self) -> "double":
        return _gstlearn.ANeighParam_getDistCont(self)

    def getFlagContinuous(self) -> "bool":
        return _gstlearn.ANeighParam_getFlagContinuous(self)

    def getFlagXvalid(self) -> "bool":
        return _gstlearn.ANeighParam_getFlagXvalid(self)

    def getFlagKFold(self) -> "bool":
        return _gstlearn.ANeighParam_getFlagKFold(self)

    def setDistCont(self, distCont: "double") -> "void":
        return _gstlearn.ANeighParam_setDistCont(self, distCont)

    def setFlagXvalid(self, flagXvalid: "bool") -> "void":
        return _gstlearn.ANeighParam_setFlagXvalid(self, flagXvalid)

    def setNDim(self, dim: "int") -> "void":
        return _gstlearn.ANeighParam_setNDim(self, dim)

    def setFlagContinuous(self, flagContinuous: "bool") -> "void":
        return _gstlearn.ANeighParam_setFlagContinuous(self, flagContinuous)

    def setFlagKFold(self, flagKFold: "bool") -> "void":
        return _gstlearn.ANeighParam_setFlagKFold(self, flagKFold)

# Register ANeighParam in _gstlearn:
_gstlearn.ANeighParam_swigregister(ANeighParam)

class NeighUnique(ANeighParam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.NeighUnique_swiginit(self, _gstlearn.new_NeighUnique(*args))
    __swig_destroy__ = _gstlearn.delete_NeighUnique

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.NeighUnique_toString(self, strfmt)

    def getType(self) -> "ENeigh":
        return _gstlearn.NeighUnique_getType(self)

    def getMaxSampleNumber(self, db: "Db") -> "int":
        return _gstlearn.NeighUnique_getMaxSampleNumber(self, db)

    def reset(self, ndim: "int", flag_xvalid: "bool"=False) -> "int":
        return _gstlearn.NeighUnique_reset(self, ndim, flag_xvalid)

    @staticmethod
    def create(ndim: "int", flag_xvalid: "bool"=False) -> "NeighUnique *":
        return _gstlearn.NeighUnique_create(ndim, flag_xvalid)

    @staticmethod
    def createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "NeighUnique *":
        return _gstlearn.NeighUnique_createFromNF(neutralFilename, verbose)

    def dumpToNF(self, neutralFilename: "String const &", verbose: "bool"=False) -> "int":
        return _gstlearn.NeighUnique_dumpToNF(self, neutralFilename, verbose)

    def __repr__(self) -> "std::string":
        return _gstlearn.NeighUnique___repr__(self)

# Register NeighUnique in _gstlearn:
_gstlearn.NeighUnique_swigregister(NeighUnique)

def NeighUnique_create(ndim: "int", flag_xvalid: "bool"=False) -> "NeighUnique *":
    return _gstlearn.NeighUnique_create(ndim, flag_xvalid)

def NeighUnique_createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "NeighUnique *":
    return _gstlearn.NeighUnique_createFromNF(neutralFilename, verbose)

class NeighImage(ANeighParam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.NeighImage_swiginit(self, _gstlearn.new_NeighImage(*args))
    __swig_destroy__ = _gstlearn.delete_NeighImage

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.NeighImage_toString(self, strfmt)

    def getMaxSampleNumber(self, db: "Db") -> "int":
        return _gstlearn.NeighImage_getMaxSampleNumber(self, db)

    def getType(self) -> "ENeigh":
        return _gstlearn.NeighImage_getType(self)

    def reset(self, *args, **kwargs) -> "int":
        return _gstlearn.NeighImage_reset(self, *args, **kwargs)

    @staticmethod
    def create(ndim: "int", skip: "int", image: "VectorInt") -> "NeighImage *":
        return _gstlearn.NeighImage_create(ndim, skip, image)

    @staticmethod
    def createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "NeighImage *":
        return _gstlearn.NeighImage_createFromNF(neutralFilename, verbose)

    def dumpToNF(self, neutralFilename: "String const &", verbose: "bool"=False) -> "int":
        return _gstlearn.NeighImage_dumpToNF(self, neutralFilename, verbose)

    def getSkip(self) -> "int":
        return _gstlearn.NeighImage_getSkip(self)

    def getImageRadius(self, *args) -> "int":
        return _gstlearn.NeighImage_getImageRadius(self, *args)

    def setImageRadius(self, imageRadius: "VectorInt") -> "void":
        return _gstlearn.NeighImage_setImageRadius(self, imageRadius)

    def setSkip(self, skip: "int") -> "void":
        return _gstlearn.NeighImage_setSkip(self, skip)

    def __repr__(self) -> "std::string":
        return _gstlearn.NeighImage___repr__(self)

# Register NeighImage in _gstlearn:
_gstlearn.NeighImage_swigregister(NeighImage)

def NeighImage_create(ndim: "int", skip: "int", image: "VectorInt") -> "NeighImage *":
    return _gstlearn.NeighImage_create(ndim, skip, image)

def NeighImage_createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "NeighImage *":
    return _gstlearn.NeighImage_createFromNF(neutralFilename, verbose)

class NeighMoving(ANeighParam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.NeighMoving_swiginit(self, _gstlearn.new_NeighMoving(*args))
    __swig_destroy__ = _gstlearn.delete_NeighMoving

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.NeighMoving_toString(self, strfmt)

    def getMaxSampleNumber(self, db: "Db") -> "int":
        return _gstlearn.NeighMoving_getMaxSampleNumber(self, db)

    def getType(self) -> "ENeigh":
        return _gstlearn.NeighMoving_getType(self)

    def reset(self, *args, **kwargs) -> "int":
        return _gstlearn.NeighMoving_reset(self, *args, **kwargs)

    def dumpToNF(self, neutralFilename: "String const &", verbose: "bool"=False) -> "int":
        return _gstlearn.NeighMoving_dumpToNF(self, neutralFilename, verbose)

    @staticmethod
    def create(*args, **kwargs) -> "NeighMoving *":
        return _gstlearn.NeighMoving_create(*args, **kwargs)

    @staticmethod
    def createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "NeighMoving *":
        return _gstlearn.NeighMoving_createFromNF(neutralFilename, verbose)

    def getAnisoCoeffs(self) -> "VectorDouble const &":
        return _gstlearn.NeighMoving_getAnisoCoeffs(self)

    def getAnisoCoeff(self, i: "int") -> "double":
        return _gstlearn.NeighMoving_getAnisoCoeff(self, i)

    def getAnisoRotMats(self) -> "VectorDouble const &":
        return _gstlearn.NeighMoving_getAnisoRotMats(self)

    def getAnisoRotMat(self, i: "int") -> "double":
        return _gstlearn.NeighMoving_getAnisoRotMat(self, i)

    def getFlagAniso(self) -> "int":
        return _gstlearn.NeighMoving_getFlagAniso(self)

    def getFlagRotation(self) -> "int":
        return _gstlearn.NeighMoving_getFlagRotation(self)

    def getFlagSector(self) -> "int":
        return _gstlearn.NeighMoving_getFlagSector(self)

    def getNMaxi(self) -> "int":
        return _gstlearn.NeighMoving_getNMaxi(self)

    def getNMini(self) -> "int":
        return _gstlearn.NeighMoving_getNMini(self)

    def getNSect(self) -> "int":
        return _gstlearn.NeighMoving_getNSect(self)

    def getNSMax(self) -> "int":
        return _gstlearn.NeighMoving_getNSMax(self)

    def getRadius(self) -> "double":
        return _gstlearn.NeighMoving_getRadius(self)

    def setAnisoCoeffs(self, anisoCoeffs: "VectorDouble") -> "void":
        return _gstlearn.NeighMoving_setAnisoCoeffs(self, anisoCoeffs)

    def setAnisoCoeff(self, idim: "int", value: "double") -> "void":
        return _gstlearn.NeighMoving_setAnisoCoeff(self, idim, value)

    def anisoRescale(self) -> "void":
        return _gstlearn.NeighMoving_anisoRescale(self)

    def setAnisoRotMat(self, anisoRotMat: "VectorDouble") -> "void":
        return _gstlearn.NeighMoving_setAnisoRotMat(self, anisoRotMat)

    def setFlagAniso(self, flagAniso: "int") -> "void":
        return _gstlearn.NeighMoving_setFlagAniso(self, flagAniso)

    def setFlagRotation(self, flagRotation: "int") -> "void":
        return _gstlearn.NeighMoving_setFlagRotation(self, flagRotation)

    def setFlagSector(self, flagSector: "int") -> "void":
        return _gstlearn.NeighMoving_setFlagSector(self, flagSector)

    def setNMaxi(self, nmaxi: "int") -> "void":
        return _gstlearn.NeighMoving_setNMaxi(self, nmaxi)

    def setNMini(self, nmini: "int") -> "void":
        return _gstlearn.NeighMoving_setNMini(self, nmini)

    def setNSect(self, nsect: "int") -> "void":
        return _gstlearn.NeighMoving_setNSect(self, nsect)

    def setNSMax(self, nsmax: "int") -> "void":
        return _gstlearn.NeighMoving_setNSMax(self, nsmax)

    def setRadius(self, radius: "double") -> "void":
        return _gstlearn.NeighMoving_setRadius(self, radius)

    def __repr__(self) -> "std::string":
        return _gstlearn.NeighMoving___repr__(self)

# Register NeighMoving in _gstlearn:
_gstlearn.NeighMoving_swigregister(NeighMoving)

def NeighMoving_create(*args, **kwargs) -> "NeighMoving *":
    return _gstlearn.NeighMoving_create(*args, **kwargs)

def NeighMoving_createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "NeighMoving *":
    return _gstlearn.NeighMoving_createFromNF(neutralFilename, verbose)

class NeighBench(ANeighParam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.NeighBench_swiginit(self, _gstlearn.new_NeighBench(*args))
    __swig_destroy__ = _gstlearn.delete_NeighBench

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.NeighBench_toString(self, strfmt)

    def reset(self, ndim: "int"=2, flag_xvalid: "bool"=False, width: "double"=0) -> "int":
        return _gstlearn.NeighBench_reset(self, ndim, flag_xvalid, width)

    def dumpToNF(self, neutralFilename: "String const &", verbose: "bool"=False) -> "int":
        return _gstlearn.NeighBench_dumpToNF(self, neutralFilename, verbose)

    @staticmethod
    def create(ndim: "int"=2, flag_xvalid: "bool"=False, width: "double"=0) -> "NeighBench *":
        return _gstlearn.NeighBench_create(ndim, flag_xvalid, width)

    @staticmethod
    def createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "NeighBench *":
        return _gstlearn.NeighBench_createFromNF(neutralFilename, verbose)

    def getMaxSampleNumber(self, db: "Db") -> "int":
        return _gstlearn.NeighBench_getMaxSampleNumber(self, db)

    def getType(self) -> "ENeigh":
        return _gstlearn.NeighBench_getType(self)

    def getWidth(self) -> "double":
        return _gstlearn.NeighBench_getWidth(self)

    def setWidth(self, width: "double") -> "void":
        return _gstlearn.NeighBench_setWidth(self, width)

    def __repr__(self) -> "std::string":
        return _gstlearn.NeighBench___repr__(self)

# Register NeighBench in _gstlearn:
_gstlearn.NeighBench_swigregister(NeighBench)

def NeighBench_create(ndim: "int"=2, flag_xvalid: "bool"=False, width: "double"=0) -> "NeighBench *":
    return _gstlearn.NeighBench_create(ndim, flag_xvalid, width)

def NeighBench_createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "NeighBench *":
    return _gstlearn.NeighBench_createFromNF(neutralFilename, verbose)

class ENeighIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ENeighIterator

    def __init__(self, arg2: "ENeighIterator"):
        _gstlearn.ENeighIterator_swiginit(self, _gstlearn.new_ENeighIterator(arg2))

    def __ref__(self) -> "ENeigh const &":
        return _gstlearn.ENeighIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.ENeighIterator_hasNext(self)

    def toNext(self) -> "ENeigh const &":
        return _gstlearn.ENeighIterator_toNext(self)

    def toFront(self) -> "ENeigh const &":
        return _gstlearn.ENeighIterator_toFront(self)

    def getEnum(self) -> "ENeigh const &":
        return _gstlearn.ENeighIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.ENeighIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.ENeighIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.ENeighIterator_getDescr(self)

# Register ENeighIterator in _gstlearn:
_gstlearn.ENeighIterator_swigregister(ENeighIterator)

class ENeigh(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ENeigh

    def __init__(self, *args):
        _gstlearn.ENeigh_swiginit(self, _gstlearn.new_ENeigh(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.ENeigh_getSize()

    @staticmethod
    def getIterator() -> "ENeighIterator":
        return _gstlearn.ENeigh_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.ENeigh_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.ENeigh_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "ENeigh const &":
        return _gstlearn.ENeigh_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "ENeigh const &":
        return _gstlearn.ENeigh_fromValue(value)
    E_UNIQUE = _gstlearn.ENeigh_E_UNIQUE
    E_BENCH = _gstlearn.ENeigh_E_BENCH
    E_MOVING = _gstlearn.ENeigh_E_MOVING
    E_IMAGE = _gstlearn.ENeigh_E_IMAGE

    def toEnum(self) -> "ENeigh::EENeigh":
        return _gstlearn.ENeigh_toEnum(self)

# Register ENeigh in _gstlearn:
_gstlearn.ENeigh_swigregister(ENeigh)

def ENeigh_getSize() -> "size_t":
    return _gstlearn.ENeigh_getSize()

def ENeigh_getIterator() -> "ENeighIterator":
    return _gstlearn.ENeigh_getIterator()

def ENeigh_existsKey(key: "String const &") -> "bool":
    return _gstlearn.ENeigh_existsKey(key)

def ENeigh_existsValue(value: "int") -> "bool":
    return _gstlearn.ENeigh_existsValue(value)

def ENeigh_fromKey(key: "String const &") -> "ENeigh const &":
    return _gstlearn.ENeigh_fromKey(key)

def ENeigh_fromValue(value: "int") -> "ENeigh const &":
    return _gstlearn.ENeigh_fromValue(value)
ENeigh.UNIQUE = _gstlearn.cvar.ENeigh_UNIQUE
ENeigh.BENCH = _gstlearn.cvar.ENeigh_BENCH
ENeigh.MOVING = _gstlearn.cvar.ENeigh_MOVING
ENeigh.IMAGE = _gstlearn.cvar.ENeigh_IMAGE

class NeighWork(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.NeighWork_swiginit(self, _gstlearn.new_NeighWork(*args))
    __swig_destroy__ = _gstlearn.delete_NeighWork

    def initialize(self, dbin: "Db", neighparam: "ANeighParam") -> "void":
        return _gstlearn.NeighWork_initialize(self, dbin, neighparam)

    def clear(self) -> "void":
        return _gstlearn.NeighWork_clear(self)

    def select(self, *args, **kwargs) -> "VectorInt":
        return _gstlearn.NeighWork_select(self, *args, **kwargs)

    def isUnchanged(self) -> "bool":
        return _gstlearn.NeighWork_isUnchanged(self)

    def summary(self, *args, **kwargs) -> "VectorDouble":
        return _gstlearn.NeighWork_summary(self, *args, **kwargs)

    def setFlagSimu(self, flagSimu: "bool") -> "void":
        return _gstlearn.NeighWork_setFlagSimu(self, flagSimu)

# Register NeighWork in _gstlearn:
_gstlearn.NeighWork_swigregister(NeighWork)

class VarioParam(AStringable, IClonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.VarioParam_swiginit(self, _gstlearn.new_VarioParam(*args))
    __swig_destroy__ = _gstlearn.delete_VarioParam

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.VarioParam_toString(self, strfmt)

    def clone(self) -> "IClonable *":
        return _gstlearn.VarioParam_clone(self)

    def addDirs(self, dirparam: "DirParam") -> "void":
        return _gstlearn.VarioParam_addDirs(self, dirparam)

    def addMultiDirs(self, dirparams: "VectorDir") -> "void":
        return _gstlearn.VarioParam_addMultiDirs(self, dirparams)

    def delDir(self, rank: "int") -> "void":
        return _gstlearn.VarioParam_delDir(self, rank)

    def delAllDirs(self) -> "void":
        return _gstlearn.VarioParam_delAllDirs(self)

    def getScale(self) -> "double":
        return _gstlearn.VarioParam_getScale(self)

    def getDateNumber(self) -> "int":
        return _gstlearn.VarioParam_getDateNumber(self)

    def getDirectionNumber(self) -> "int":
        return _gstlearn.VarioParam_getDirectionNumber(self)

    def getDates(self) -> "VectorDouble const &":
        return _gstlearn.VarioParam_getDates(self)

    def getDate(self, idate: "int", icas: "int") -> "double":
        return _gstlearn.VarioParam_getDate(self, idate, icas)

    def hasDate(self) -> "int":
        return _gstlearn.VarioParam_hasDate(self)

    def setScale(self, scale: "double") -> "void":
        return _gstlearn.VarioParam_setScale(self, scale)

    def getLagNumber(self, idir: "int") -> "int":
        return _gstlearn.VarioParam_getLagNumber(self, idir)

    def getCodir(self, idir: "int"=0) -> "VectorDouble":
        return _gstlearn.VarioParam_getCodir(self, idir)

    def setDates(self, dates: "VectorDouble") -> "void":
        return _gstlearn.VarioParam_setDates(self, dates)

    def getDirParams(self) -> "std::vector< DirParam,std::allocator< DirParam > > const &":
        return _gstlearn.VarioParam_getDirParams(self)

    def getDirParam(self, idir: "int") -> "DirParam const &":
        return _gstlearn.VarioParam_getDirParam(self, idir)

    def setDPas(self, idir: "int", db: "DbGrid") -> "void":
        return _gstlearn.VarioParam_setDPas(self, idir, db)

    def setGrincr(self, idir: "int", grincr: "VectorInt") -> "void":
        return _gstlearn.VarioParam_setGrincr(self, idir, grincr)

    def getDimensionNumber(self) -> "int":
        return _gstlearn.VarioParam_getDimensionNumber(self)

    def toStringMain(self, strfmt: "AStringFormat") -> "String":
        return _gstlearn.VarioParam_toStringMain(self, strfmt)

    def __repr__(self) -> "std::string":
        return _gstlearn.VarioParam___repr__(self)

# Register VarioParam in _gstlearn:
_gstlearn.VarioParam_swigregister(VarioParam)

class Vario(AStringable, ASerializable, IClonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Vario_swiginit(self, _gstlearn.new_Vario(*args))
    __swig_destroy__ = _gstlearn.delete_Vario

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.Vario_toString(self, strfmt)

    def clone(self) -> "IClonable *":
        return _gstlearn.Vario_clone(self)

    def dumpToNF(self, neutralFilename: "String const &", verbose: "bool"=False) -> "int":
        return _gstlearn.Vario_dumpToNF(self, neutralFilename, verbose)

    @staticmethod
    def create(*args, **kwargs) -> "Vario *":
        return _gstlearn.Vario_create(*args, **kwargs)

    @staticmethod
    def createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "Vario *":
        return _gstlearn.Vario_createFromNF(neutralFilename, verbose)

    def reduce(self, varcols: "VectorInt", dircols: "VectorInt", asSymmetric: "bool"=False) -> "void":
        return _gstlearn.Vario_reduce(self, varcols, dircols, asSymmetric)

    def getCalcul(self) -> "ECalcVario const &":
        return _gstlearn.Vario_getCalcul(self)

    def getCalculType(self, calcul_name: "String const &") -> "ECalcVario":
        return _gstlearn.Vario_getCalculType(self, calcul_name)

    def getFlagAsym(self) -> "bool":
        return _gstlearn.Vario_getFlagAsym(self)

    def getVariableNumber(self) -> "int":
        return _gstlearn.Vario_getVariableNumber(self)

    def getMeans(self) -> "VectorDouble const &":
        return _gstlearn.Vario_getMeans(self)

    def getMean(self, ivar: "int") -> "double":
        return _gstlearn.Vario_getMean(self, ivar)

    def getVar(self, ivar: "int", jvar: "int") -> "double":
        return _gstlearn.Vario_getVar(self, ivar, jvar)

    def getVarIndex(self, ijvar: "int") -> "double":
        return _gstlearn.Vario_getVarIndex(self, ijvar)

    def getVars(self) -> "VectorDouble const &":
        return _gstlearn.Vario_getVars(self)

    def setMeans(self, means: "VectorDouble") -> "void":
        return _gstlearn.Vario_setMeans(self, means)

    def setMean(self, ivar: "int", mean: "double") -> "void":
        return _gstlearn.Vario_setMean(self, ivar, mean)

    def setVar(self, ivar: "int", jvar: "int", value: "double") -> "void":
        return _gstlearn.Vario_setVar(self, ivar, jvar, value)

    def setVars(self, vars: "VectorDouble") -> "void":
        return _gstlearn.Vario_setVars(self, vars)

    def setVarIndex(self, ijvar: "int", value: "double") -> "void":
        return _gstlearn.Vario_setVarIndex(self, ijvar, value)

    def getDirSize(self, idir: "int") -> "int":
        return _gstlearn.Vario_getDirSize(self, idir)

    def getGgByIndex(self, idir: "int"=0, i: "int"=0) -> "double":
        return _gstlearn.Vario_getGgByIndex(self, idir, i)

    def getHhByIndex(self, idir: "int"=0, i: "int"=0) -> "double":
        return _gstlearn.Vario_getHhByIndex(self, idir, i)

    def getSwByIndex(self, idir: "int"=0, i: "int"=0) -> "double":
        return _gstlearn.Vario_getSwByIndex(self, idir, i)

    def getUtilizeByIndex(self, idir: "int"=0, i: "int"=0) -> "double":
        return _gstlearn.Vario_getUtilizeByIndex(self, idir, i)

    def getGg(self, idir: "int"=0, ivar: "int"=0, jvar: "int"=0, ipas: "int"=0, asCov: "bool"=False, flagNormalized: "bool"=False) -> "double":
        return _gstlearn.Vario_getGg(self, idir, ivar, jvar, ipas, asCov, flagNormalized)

    def getHh(self, idir: "int"=0, ivar: "int"=0, jvar: "int"=0, ipas: "int"=0) -> "double":
        return _gstlearn.Vario_getHh(self, idir, ivar, jvar, ipas)

    def getSw(self, idir: "int"=0, ivar: "int"=0, jvar: "int"=0, ipas: "int"=0) -> "double":
        return _gstlearn.Vario_getSw(self, idir, ivar, jvar, ipas)

    def getUtilize(self, idir: "int"=0, ivar: "int"=0, jvar: "int"=0, ipas: "int"=0) -> "double":
        return _gstlearn.Vario_getUtilize(self, idir, ivar, jvar, ipas)

    def getVec(self, idir: "int"=0, ivar: "int"=0, jvar: "int"=0) -> "VectorVectorDouble":
        return _gstlearn.Vario_getVec(self, idir, ivar, jvar)

    def getGgVec(self, idir: "int"=0, ivar: "int"=0, jvar: "int"=0, asCov: "bool"=False, flagNormalized: "bool"=False) -> "VectorDouble":
        return _gstlearn.Vario_getGgVec(self, idir, ivar, jvar, asCov, flagNormalized)

    def getHhVec(self, idir: "int"=0, ivar: "int"=0, jvar: "int"=0) -> "VectorDouble":
        return _gstlearn.Vario_getHhVec(self, idir, ivar, jvar)

    def getSwVec(self, idir: "int"=0, ivar: "int"=0, jvar: "int"=0) -> "VectorDouble":
        return _gstlearn.Vario_getSwVec(self, idir, ivar, jvar)

    def getUtilizeVec(self, idir: "int"=0, ivar: "int"=0, jvar: "int"=0) -> "VectorDouble":
        return _gstlearn.Vario_getUtilizeVec(self, idir, ivar, jvar)

    def getAllGg(self, idir: "int"=0) -> "VectorDouble const &":
        return _gstlearn.Vario_getAllGg(self, idir)

    def getAllHh(self, idir: "int"=0) -> "VectorDouble const &":
        return _gstlearn.Vario_getAllHh(self, idir)

    def getAllSw(self, idir: "int"=0) -> "VectorDouble const &":
        return _gstlearn.Vario_getAllSw(self, idir)

    def getAllUtilize(self, idir: "int"=0) -> "VectorDouble const &":
        return _gstlearn.Vario_getAllUtilize(self, idir)

    def setGgByIndex(self, idir: "int", i: "int", gg: "double") -> "void":
        return _gstlearn.Vario_setGgByIndex(self, idir, i, gg)

    def setHhByIndex(self, idir: "int", i: "int", hh: "double") -> "void":
        return _gstlearn.Vario_setHhByIndex(self, idir, i, hh)

    def setSwByIndex(self, idir: "int", i: "int", sw: "double") -> "void":
        return _gstlearn.Vario_setSwByIndex(self, idir, i, sw)

    def setUtilizeByIndex(self, idir: "int", i: "int", utilize: "double") -> "void":
        return _gstlearn.Vario_setUtilizeByIndex(self, idir, i, utilize)

    def setSw(self, idir: "int", ivar: "int", jvar: "int", ipas: "int", sw: "double") -> "void":
        return _gstlearn.Vario_setSw(self, idir, ivar, jvar, ipas, sw)

    def setHh(self, idir: "int", ivar: "int", jvar: "int", ipas: "int", hh: "double") -> "void":
        return _gstlearn.Vario_setHh(self, idir, ivar, jvar, ipas, hh)

    def setGg(self, idir: "int", ivar: "int", jvar: "int", ipas: "int", gg: "double") -> "void":
        return _gstlearn.Vario_setGg(self, idir, ivar, jvar, ipas, gg)

    def setUtilize(self, idir: "int", ivar: "int", jvar: "int", ipas: "int", utilize: "double") -> "void":
        return _gstlearn.Vario_setUtilize(self, idir, ivar, jvar, ipas, utilize)

    def updateSwByIndex(self, idir: "int", i: "int", sw: "double") -> "void":
        return _gstlearn.Vario_updateSwByIndex(self, idir, i, sw)

    def updateHhByIndex(self, idir: "int", i: "int", hh: "double") -> "void":
        return _gstlearn.Vario_updateHhByIndex(self, idir, i, hh)

    def updateGgByIndex(self, idir: "int", i: "int", gg: "double") -> "void":
        return _gstlearn.Vario_updateGgByIndex(self, idir, i, gg)

    def getCenter(self, ivar: "int"=0, jvar: "int"=0, idir: "int"=0) -> "int":
        return _gstlearn.Vario_getCenter(self, ivar, jvar, idir)

    def internalVariableResize(self) -> "int":
        return _gstlearn.Vario_internalVariableResize(self)

    def internalDirectionResize(self, ndir: "int"=0, flagDirs: "bool"=True) -> "void":
        return _gstlearn.Vario_internalDirectionResize(self, ndir, flagDirs)

    def getHmax(self, ivar: "int"=-1, jvar: "int"=-1, idir: "int"=-1) -> "double":
        return _gstlearn.Vario_getHmax(self, ivar, jvar, idir)

    def getHRange(self, ivar: "int"=-1, jvar: "int"=-1, idir: "int"=-1) -> "VectorDouble":
        return _gstlearn.Vario_getHRange(self, ivar, jvar, idir)

    def getGmax(self, ivar: "int"=-1, jvar: "int"=-1, idir: "int"=-1, flagAbs: "bool"=False, flagSill: "bool"=False) -> "double":
        return _gstlearn.Vario_getGmax(self, ivar, jvar, idir, flagAbs, flagSill)

    def getGRange(self, ivar: "int"=-1, jvar: "int"=-1, idir: "int"=-1, flagSill: "bool"=False) -> "VectorDouble":
        return _gstlearn.Vario_getGRange(self, ivar, jvar, idir, flagSill)

    def patchCenter(self, idir: "int", nech: "int", rho: "double") -> "void":
        return _gstlearn.Vario_patchCenter(self, idir, nech, rho)

    def fill(self, idir: "int", sw: "VectorDouble", gg: "VectorDouble", hh: "VectorDouble") -> "int":
        return _gstlearn.Vario_fill(self, idir, sw, gg, hh)

    def getDirAddress(self, idir: "int", ivar: "int", jvar: "int", ipas: "int", flag_abs: "bool"=False, sens: "int"=0) -> "int":
        return _gstlearn.Vario_getDirAddress(self, idir, ivar, jvar, ipas, flag_abs, sens)

    def getVarAddress(self, ivar: "int", jvar: "int") -> "int":
        return _gstlearn.Vario_getVarAddress(self, ivar, jvar)

    def getLagTotalNumber(self, idir: "int") -> "int":
        return _gstlearn.Vario_getLagTotalNumber(self, idir)

    def attachDb(self, *args, **kwargs) -> "int":
        return _gstlearn.Vario_attachDb(self, *args, **kwargs)

    def computeByKey(self, *args, **kwargs) -> "int":
        return _gstlearn.Vario_computeByKey(self, *args, **kwargs)

    def computeIndicByKey(self, *args, **kwargs) -> "int":
        return _gstlearn.Vario_computeIndicByKey(self, *args, **kwargs)

    def compute(self, *args, **kwargs) -> "int":
        return _gstlearn.Vario_compute(self, *args, **kwargs)

    def computeIndic(self, *args, **kwargs) -> "int":
        return _gstlearn.Vario_computeIndic(self, *args, **kwargs)

    def getDirParam(self, idir: "int") -> "DirParam const &":
        return _gstlearn.Vario_getDirParam(self, idir)

    def getDirectionNumber(self) -> "int":
        return _gstlearn.Vario_getDirectionNumber(self)

    def hasDate(self) -> "bool":
        return _gstlearn.Vario_hasDate(self)

    def getDates(self, *args) -> "double":
        return _gstlearn.Vario_getDates(self, *args)

    def getDateNumber(self) -> "int":
        return _gstlearn.Vario_getDateNumber(self)

    def getScale(self) -> "double":
        return _gstlearn.Vario_getScale(self)

    def setScale(self, scale: "double") -> "void":
        return _gstlearn.Vario_setScale(self, scale)

    def addDirs(self, dirparam: "DirParam") -> "void":
        return _gstlearn.Vario_addDirs(self, dirparam)

    def getLagNumber(self, idir: "int") -> "int":
        return _gstlearn.Vario_getLagNumber(self, idir)

    def getDPas(self, idir: "int") -> "double":
        return _gstlearn.Vario_getDPas(self, idir)

    def getDimensionNumber(self, *args) -> "int":
        return _gstlearn.Vario_getDimensionNumber(self, *args)

    def getCodir(self, *args) -> "double":
        return _gstlearn.Vario_getCodir(self, *args)

    def getMaximumDistance(self, idir: "int") -> "double":
        return _gstlearn.Vario_getMaximumDistance(self, idir)

    def getIdate(self, idir: "int") -> "int":
        return _gstlearn.Vario_getIdate(self, idir)

    def getGrincr(self, idir: "int", idim: "int") -> "double":
        return _gstlearn.Vario_getGrincr(self, idir, idim)

    def setNVar(self, nvar: "int") -> "void":
        return _gstlearn.Vario_setNVar(self, nvar)

    def setCalculName(self, calcul_name: "String const") -> "void":
        return _gstlearn.Vario_setCalculName(self, calcul_name)

    def getVarioParam(self) -> "VarioParam const &":
        return _gstlearn.Vario_getVarioParam(self)

    def __repr__(self) -> "std::string":
        return _gstlearn.Vario___repr__(self)

# Register Vario in _gstlearn:
_gstlearn.Vario_swigregister(Vario)

def Vario_create(*args, **kwargs) -> "Vario *":
    return _gstlearn.Vario_create(*args, **kwargs)

def Vario_createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "Vario *":
    return _gstlearn.Vario_createFromNF(neutralFilename, verbose)

class DirParam(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DirParam_swiginit(self, _gstlearn.new_DirParam(*args))
    __swig_destroy__ = _gstlearn.delete_DirParam

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.DirParam_toString(self, strfmt)

    def init(self, *args, **kwargs) -> "void":
        return _gstlearn.DirParam_init(self, *args, **kwargs)

    def getBench(self) -> "double":
        return _gstlearn.DirParam_getBench(self)

    def getBreaks(self) -> "VectorDouble const &":
        return _gstlearn.DirParam_getBreaks(self)

    def getBreak(self, i: "int") -> "double":
        return _gstlearn.DirParam_getBreak(self, i)

    def getCodir(self, *args) -> "double":
        return _gstlearn.DirParam_getCodir(self, *args)

    def getCylRad(self) -> "double":
        return _gstlearn.DirParam_getCylRad(self)

    def getDPas(self) -> "double":
        return _gstlearn.DirParam_getDPas(self)

    def getLag(self) -> "double":
        return _gstlearn.DirParam_getLag(self)

    def getIdate(self) -> "int":
        return _gstlearn.DirParam_getIdate(self)

    def getLagNumber(self) -> "int":
        return _gstlearn.DirParam_getLagNumber(self)

    def getOptionCode(self) -> "int":
        return _gstlearn.DirParam_getOptionCode(self)

    def getTolAngle(self) -> "double":
        return _gstlearn.DirParam_getTolAngle(self)

    def getTolCode(self) -> "double":
        return _gstlearn.DirParam_getTolCode(self)

    def getTolDist(self) -> "double":
        return _gstlearn.DirParam_getTolDist(self)

    def getDimensionNumber(self) -> "int":
        return _gstlearn.DirParam_getDimensionNumber(self)

    def getGrincr(self, *args) -> "int":
        return _gstlearn.DirParam_getGrincr(self, *args)

    def getMaximumDistance(self) -> "double":
        return _gstlearn.DirParam_getMaximumDistance(self)

    def getBreakNumber(self) -> "int":
        return _gstlearn.DirParam_getBreakNumber(self)

    def getFlagRegular(self) -> "bool":
        return _gstlearn.DirParam_getFlagRegular(self)

    def setLagNumber(self, npas: "int") -> "void":
        return _gstlearn.DirParam_setLagNumber(self, npas)

    def setOptionCode(self, option_code: "int") -> "void":
        return _gstlearn.DirParam_setOptionCode(self, option_code)

    def setIdate(self, idate: "int") -> "void":
        return _gstlearn.DirParam_setIdate(self, idate)

    def setDLag(self, dlag: "double") -> "void":
        return _gstlearn.DirParam_setDLag(self, dlag)

    def setDPas(self, *args) -> "void":
        return _gstlearn.DirParam_setDPas(self, *args)

    def setBench(self, bench: "double") -> "void":
        return _gstlearn.DirParam_setBench(self, bench)

    def setCylRad(self, cylrad: "double") -> "void":
        return _gstlearn.DirParam_setCylRad(self, cylrad)

    def setTolDist(self, toldist: "double") -> "void":
        return _gstlearn.DirParam_setTolDist(self, toldist)

    def setTolAngle(self, tolang: "double") -> "void":
        return _gstlearn.DirParam_setTolAngle(self, tolang)

    def setTolCode(self, tolcode: "double") -> "void":
        return _gstlearn.DirParam_setTolCode(self, tolcode)

    def setBreaks(self, breaks: "VectorDouble") -> "void":
        return _gstlearn.DirParam_setBreaks(self, breaks)

    def setCodir(self, codir: "VectorDouble") -> "void":
        return _gstlearn.DirParam_setCodir(self, codir)

    def setGrincr(self, grincr: "VectorInt") -> "void":
        return _gstlearn.DirParam_setGrincr(self, grincr)

    def isLagValid(self, ilag: "int") -> "bool":
        return _gstlearn.DirParam_isLagValid(self, ilag)

    def isDimensionValid(self, idim: "int") -> "bool":
        return _gstlearn.DirParam_isDimensionValid(self, idim)

# Register DirParam in _gstlearn:
_gstlearn.DirParam_swigregister(DirParam)


def generateMultipleDirs(ndim: "int", ndir: "int", npas: "int"=0, dpas: "double"=0., toldis: "double"=0.5) -> "std::vector< DirParam,std::allocator< DirParam > >":
    return _gstlearn.generateMultipleDirs(ndim, ndir, npas, dpas, toldis)

def generateMultipleGridDirs(ndim: "int", npas: "int") -> "std::vector< DirParam,std::allocator< DirParam > >":
    return _gstlearn.generateMultipleGridDirs(ndim, npas)
class ECalcVarioIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ECalcVarioIterator

    def __init__(self, arg2: "ECalcVarioIterator"):
        _gstlearn.ECalcVarioIterator_swiginit(self, _gstlearn.new_ECalcVarioIterator(arg2))

    def __ref__(self) -> "ECalcVario const &":
        return _gstlearn.ECalcVarioIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.ECalcVarioIterator_hasNext(self)

    def toNext(self) -> "ECalcVario const &":
        return _gstlearn.ECalcVarioIterator_toNext(self)

    def toFront(self) -> "ECalcVario const &":
        return _gstlearn.ECalcVarioIterator_toFront(self)

    def getEnum(self) -> "ECalcVario const &":
        return _gstlearn.ECalcVarioIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.ECalcVarioIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.ECalcVarioIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.ECalcVarioIterator_getDescr(self)

# Register ECalcVarioIterator in _gstlearn:
_gstlearn.ECalcVarioIterator_swigregister(ECalcVarioIterator)

class ECalcVario(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ECalcVario

    def __init__(self, *args):
        _gstlearn.ECalcVario_swiginit(self, _gstlearn.new_ECalcVario(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.ECalcVario_getSize()

    @staticmethod
    def getIterator() -> "ECalcVarioIterator":
        return _gstlearn.ECalcVario_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.ECalcVario_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.ECalcVario_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "ECalcVario const &":
        return _gstlearn.ECalcVario_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "ECalcVario const &":
        return _gstlearn.ECalcVario_fromValue(value)
    E_UNDEFINED = _gstlearn.ECalcVario_E_UNDEFINED
    E_VARIOGRAM = _gstlearn.ECalcVario_E_VARIOGRAM
    E_COVARIANCE = _gstlearn.ECalcVario_E_COVARIANCE
    E_COVARIOGRAM = _gstlearn.ECalcVario_E_COVARIOGRAM
    E_MADOGRAM = _gstlearn.ECalcVario_E_MADOGRAM
    E_RODOGRAM = _gstlearn.ECalcVario_E_RODOGRAM
    E_POISSON = _gstlearn.ECalcVario_E_POISSON
    E_GENERAL1 = _gstlearn.ECalcVario_E_GENERAL1
    E_GENERAL2 = _gstlearn.ECalcVario_E_GENERAL2
    E_GENERAL3 = _gstlearn.ECalcVario_E_GENERAL3
    E_COVARIANCE_NC = _gstlearn.ECalcVario_E_COVARIANCE_NC
    E_ORDER4 = _gstlearn.ECalcVario_E_ORDER4
    E_TRANS1 = _gstlearn.ECalcVario_E_TRANS1
    E_TRANS2 = _gstlearn.ECalcVario_E_TRANS2
    E_BINORMAL = _gstlearn.ECalcVario_E_BINORMAL

    def toEnum(self) -> "ECalcVario::EECalcVario":
        return _gstlearn.ECalcVario_toEnum(self)

# Register ECalcVario in _gstlearn:
_gstlearn.ECalcVario_swigregister(ECalcVario)

def ECalcVario_getSize() -> "size_t":
    return _gstlearn.ECalcVario_getSize()

def ECalcVario_getIterator() -> "ECalcVarioIterator":
    return _gstlearn.ECalcVario_getIterator()

def ECalcVario_existsKey(key: "String const &") -> "bool":
    return _gstlearn.ECalcVario_existsKey(key)

def ECalcVario_existsValue(value: "int") -> "bool":
    return _gstlearn.ECalcVario_existsValue(value)

def ECalcVario_fromKey(key: "String const &") -> "ECalcVario const &":
    return _gstlearn.ECalcVario_fromKey(key)

def ECalcVario_fromValue(value: "int") -> "ECalcVario const &":
    return _gstlearn.ECalcVario_fromValue(value)
ECalcVario.UNDEFINED = _gstlearn.cvar.ECalcVario_UNDEFINED
ECalcVario.VARIOGRAM = _gstlearn.cvar.ECalcVario_VARIOGRAM
ECalcVario.COVARIANCE = _gstlearn.cvar.ECalcVario_COVARIANCE
ECalcVario.COVARIOGRAM = _gstlearn.cvar.ECalcVario_COVARIOGRAM
ECalcVario.MADOGRAM = _gstlearn.cvar.ECalcVario_MADOGRAM
ECalcVario.RODOGRAM = _gstlearn.cvar.ECalcVario_RODOGRAM
ECalcVario.POISSON = _gstlearn.cvar.ECalcVario_POISSON
ECalcVario.GENERAL1 = _gstlearn.cvar.ECalcVario_GENERAL1
ECalcVario.GENERAL2 = _gstlearn.cvar.ECalcVario_GENERAL2
ECalcVario.GENERAL3 = _gstlearn.cvar.ECalcVario_GENERAL3
ECalcVario.COVARIANCE_NC = _gstlearn.cvar.ECalcVario_COVARIANCE_NC
ECalcVario.ORDER4 = _gstlearn.cvar.ECalcVario_ORDER4
ECalcVario.TRANS1 = _gstlearn.cvar.ECalcVario_TRANS1
ECalcVario.TRANS2 = _gstlearn.cvar.ECalcVario_TRANS2
ECalcVario.BINORMAL = _gstlearn.cvar.ECalcVario_BINORMAL

class Model(AStringable, ASerializable, IClonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Model_swiginit(self, _gstlearn.new_Model(*args))
    __swig_destroy__ = _gstlearn.delete_Model

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.Model_toString(self, strfmt)

    def clone(self) -> "IClonable *":
        return _gstlearn.Model_clone(self)

    def resetFromDb(self, db: "Db") -> "int":
        return _gstlearn.Model_resetFromDb(self, db)

    def dumpToNF(self, neutralFilename: "String const &", verbose: "bool"=False) -> "int":
        return _gstlearn.Model_dumpToNF(self, neutralFilename, verbose)

    @staticmethod
    def create(*args, **kwargs) -> "Model *":
        return _gstlearn.Model_create(*args, **kwargs)

    @staticmethod
    def createFromDb(db: "Db") -> "Model *":
        return _gstlearn.Model_createFromDb(db)

    @staticmethod
    def createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "Model *":
        return _gstlearn.Model_createFromNF(neutralFilename, verbose)

    def setCovList(self, covalist: "ACovAnisoList") -> "void":
        return _gstlearn.Model_setCovList(self, covalist)

    def addCov(self, cov: "CovAniso") -> "void":
        return _gstlearn.Model_addCov(self, cov)

    def delCova(self, rank: "int") -> "void":
        return _gstlearn.Model_delCova(self, rank)

    def delAllCovas(self) -> "void":
        return _gstlearn.Model_delAllCovas(self)

    def setDriftList(self, driftlist: "DriftList") -> "void":
        return _gstlearn.Model_setDriftList(self, driftlist)

    def addDrift(self, *args) -> "void":
        return _gstlearn.Model_addDrift(self, *args)

    def delDrift(self, rank: "int") -> "void":
        return _gstlearn.Model_delDrift(self, rank)

    def delAllDrifts(self) -> "void":
        return _gstlearn.Model_delAllDrifts(self)

    def addNoStat(self, anostat: "ANoStat") -> "int":
        return _gstlearn.Model_addNoStat(self, anostat)

    def isFlagGradient(self) -> "bool":
        return _gstlearn.Model_isFlagGradient(self)

    def isFlagGradientNumerical(self) -> "bool":
        return _gstlearn.Model_isFlagGradientNumerical(self)

    def isFlagGradientFunctional(self) -> "bool":
        return _gstlearn.Model_isFlagGradientFunctional(self)

    def isFlagLinked(self) -> "bool":
        return _gstlearn.Model_isFlagLinked(self)

    def getCovAnisoList(self, *args) -> "ACovAnisoList *":
        return _gstlearn.Model_getCovAnisoList(self, *args)

    def getCova(self, *args) -> "CovAniso *":
        return _gstlearn.Model_getCova(self, *args)

    def getCovaNumber(self) -> "int":
        return _gstlearn.Model_getCovaNumber(self)

    def getCovaType(self, icov: "int") -> "ECov const &":
        return _gstlearn.Model_getCovaType(self, icov)

    def getSill(self, *args) -> "double":
        return _gstlearn.Model_getSill(self, *args)

    def getParam(self, icov: "int") -> "double":
        return _gstlearn.Model_getParam(self, icov)

    def isCovaFiltered(self, icov: "int") -> "bool":
        return _gstlearn.Model_isCovaFiltered(self, icov)

    def getCovName(self, icov: "int") -> "String":
        return _gstlearn.Model_getCovName(self, icov)

    def getGradParamNumber(self, icov: "int") -> "int":
        return _gstlearn.Model_getGradParamNumber(self, icov)

    def getTotalSill(self, ivar: "int", jvar: "int") -> "double":
        return _gstlearn.Model_getTotalSill(self, ivar, jvar)

    def getBallRadius(self) -> "double":
        return _gstlearn.Model_getBallRadius(self)

    def setSill(self, icov: "int", ivar: "int", jvar: "int", value: "double") -> "void":
        return _gstlearn.Model_setSill(self, icov, ivar, jvar, value)

    def setCovaFiltered(self, icov: "int", filtered: "bool") -> "void":
        return _gstlearn.Model_setCovaFiltered(self, icov, filtered)

    def getMaximumDistance(self) -> "double":
        return _gstlearn.Model_getMaximumDistance(self)

    def getDriftList(self) -> "DriftList const *":
        return _gstlearn.Model_getDriftList(self)

    def getDriftNumber(self) -> "int":
        return _gstlearn.Model_getDriftNumber(self)

    def getExternalDriftNumber(self) -> "int":
        return _gstlearn.Model_getExternalDriftNumber(self)

    def getDriftType(self, il: "int") -> "EDrift const &":
        return _gstlearn.Model_getDriftType(self, il)

    def getRankFext(self, il: "int") -> "int":
        return _gstlearn.Model_getRankFext(self, il)

    def getCoefDrifts(self) -> "VectorDouble const &":
        return _gstlearn.Model_getCoefDrifts(self)

    def getCoefDrift(self, ivar: "int", il: "int", ib: "int") -> "double":
        return _gstlearn.Model_getCoefDrift(self, ivar, il, ib)

    def getDriftEquationNumber(self) -> "int":
        return _gstlearn.Model_getDriftEquationNumber(self)

    def isDriftFiltered(self, il: "unsigned int") -> "bool":
        return _gstlearn.Model_isDriftFiltered(self, il)

    def isDriftDefined(self, type0: "EDrift") -> "bool":
        return _gstlearn.Model_isDriftDefined(self, type0)

    def isDriftDifferentDefined(self, type0: "EDrift") -> "bool":
        return _gstlearn.Model_isDriftDifferentDefined(self, type0)

    def getMaximumOrder(self) -> "int":
        return _gstlearn.Model_getMaximumOrder(self)

    def setCoefDrift(self, ivar: "int", il: "int", ib: "int", coeff: "double") -> "void":
        return _gstlearn.Model_setCoefDrift(self, ivar, il, ib, coeff)

    def setCoefDriftByRank(self, rank: "int", coeff: "double") -> "void":
        return _gstlearn.Model_setCoefDriftByRank(self, rank, coeff)

    def setDriftFiltered(self, il: "int", filtered: "bool") -> "void":
        return _gstlearn.Model_setDriftFiltered(self, il, filtered)

    def getDrift(self, *args) -> "VectorDouble":
        return _gstlearn.Model_getDrift(self, *args)

    def getDrifts(self, db: "Db", useSel: "bool"=True) -> "VectorVectorDouble":
        return _gstlearn.Model_getDrifts(self, db, useSel)

    def evalDrift(self, *args, **kwargs) -> "double":
        return _gstlearn.Model_evalDrift(self, *args, **kwargs)

    def evalDriftVec(self, *args, **kwargs) -> "VectorDouble":
        return _gstlearn.Model_evalDriftVec(self, *args, **kwargs)

    def evalDrifts(self, db: "Db", coeffs: "VectorDouble", ivar: "int"=0, useSel: "bool"=False) -> "VectorDouble":
        return _gstlearn.Model_evalDrifts(self, db, coeffs, ivar, useSel)

    def evalDriftVecInPlace(self, db: "Db", iech: "int", member: "ECalcMember const &", drftab: "VectorDouble") -> "void":
        return _gstlearn.Model_evalDriftVecInPlace(self, db, iech, member, drftab)

    def _evalDriftCoef(self, db: "Db", iech: "int", ivar: "int", coef: "double const *") -> "double":
        return _gstlearn.Model__evalDriftCoef(self, db, iech, ivar, coef)

    def getContext(self) -> "CovContext const &":
        return _gstlearn.Model_getContext(self)

    def getMeans(self) -> "VectorDouble const &":
        return _gstlearn.Model_getMeans(self)

    def getMean(self, ivar: "int") -> "double":
        return _gstlearn.Model_getMean(self, ivar)

    def getCovar0s(self) -> "VectorDouble const &":
        return _gstlearn.Model_getCovar0s(self)

    def getCovar0(self, ivar: "int", jvar: "int") -> "double":
        return _gstlearn.Model_getCovar0(self, ivar, jvar)

    def setMeans(self, mean: "VectorDouble") -> "void":
        return _gstlearn.Model_setMeans(self, mean)

    def setMean(self, ivar: "int", mean: "double") -> "void":
        return _gstlearn.Model_setMean(self, ivar, mean)

    def setCovar0s(self, covar0: "VectorDouble") -> "void":
        return _gstlearn.Model_setCovar0s(self, covar0)

    def setCovar0(self, ivar: "int", jvar: "int", covar0: "double") -> "void":
        return _gstlearn.Model_setCovar0(self, ivar, jvar, covar0)

    def isNoStat(self) -> "int":
        return _gstlearn.Model_isNoStat(self)

    def getNoStat(self) -> "ANoStat const *":
        return _gstlearn.Model_getNoStat(self)

    def getNoStatElemNumber(self) -> "int":
        return _gstlearn.Model_getNoStatElemNumber(self)

    def addNoStatElem(self, igrf: "int", icov: "int", type: "EConsElem", iv1: "int", iv2: "int") -> "int":
        return _gstlearn.Model_addNoStatElem(self, igrf, icov, type, iv1, iv2)

    def addNoStatElems(self, codes: "VectorString") -> "int":
        return _gstlearn.Model_addNoStatElems(self, codes)

    def getNoStatElemIcov(self, ipar: "int") -> "int":
        return _gstlearn.Model_getNoStatElemIcov(self, ipar)

    def getNoStatElemType(self, ipar: "int") -> "EConsElem const &":
        return _gstlearn.Model_getNoStatElemType(self, ipar)

    def getCovParamId(self, ipar: "int") -> "CovParamId":
        return _gstlearn.Model_getCovParamId(self, ipar)

    def getField(self) -> "double":
        return _gstlearn.Model_getField(self)

    def getDimensionNumber(self) -> "int":
        return _gstlearn.Model_getDimensionNumber(self)

    def setField(self, field: "double") -> "void":
        return _gstlearn.Model_setField(self, field)

    def getCovMode(self) -> "EModelProperty const &":
        return _gstlearn.Model_getCovMode(self)

    def duplicate(self) -> "Model *":
        return _gstlearn.Model_duplicate(self)

    def getVariableNumber(self) -> "int":
        return _gstlearn.Model_getVariableNumber(self)

    def hasExternalCov(self) -> "int":
        return _gstlearn.Model_hasExternalCov(self)

    def covMatrix(self, covmat: "VectorDouble", db1: "Db", db2: "Db"=None, ivar0: "int"=0, jvar0: "int"=0, flag_norm: "int"=0, flag_cov: "int"=1) -> "void":
        return _gstlearn.Model_covMatrix(self, covmat, db1, db2, ivar0, jvar0, flag_norm, flag_cov)

    def sample(self, *args, **kwargs) -> "VectorDouble":
        return _gstlearn.Model_sample(self, *args, **kwargs)

    def fitFromCovIndices(self, *args, **kwargs) -> "int":
        return _gstlearn.Model_fitFromCovIndices(self, *args, **kwargs)

    def fit(self, *args, **kwargs) -> "int":
        return _gstlearn.Model_fit(self, *args, **kwargs)

    def gofToVario(self, vario: "Vario") -> "double":
        return _gstlearn.Model_gofToVario(self, vario)

    def __repr__(self) -> "std::string":
        return _gstlearn.Model___repr__(self)

# Register Model in _gstlearn:
_gstlearn.Model_swigregister(Model)

def Model_create(*args, **kwargs) -> "Model *":
    return _gstlearn.Model_create(*args, **kwargs)

def Model_createFromDb(db: "Db") -> "Model *":
    return _gstlearn.Model_createFromDb(db)

def Model_createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "Model *":
    return _gstlearn.Model_createFromNF(neutralFilename, verbose)

class Option_AutoFit(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Option_AutoFit_swiginit(self, _gstlearn.new_Option_AutoFit(*args))
    __swig_destroy__ = _gstlearn.delete_Option_AutoFit

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.Option_AutoFit_toString(self, strfmt)

    def getConstantSillValue(self) -> "double":
        return _gstlearn.Option_AutoFit_getConstantSillValue(self)

    def getEpsdelta(self) -> "double":
        return _gstlearn.Option_AutoFit_getEpsdelta(self)

    def getFlagIntrinsic(self) -> "int":
        return _gstlearn.Option_AutoFit_getFlagIntrinsic(self)

    def getInitdelta(self) -> "double":
        return _gstlearn.Option_AutoFit_getInitdelta(self)

    def getMaxiter(self) -> "int":
        return _gstlearn.Option_AutoFit_getMaxiter(self)

    def getTolred(self) -> "double":
        return _gstlearn.Option_AutoFit_getTolred(self)

    def getTolsigma(self) -> "double":
        return _gstlearn.Option_AutoFit_getTolsigma(self)

    def getTolstop(self) -> "double":
        return _gstlearn.Option_AutoFit_getTolstop(self)

    def getVerbose(self) -> "bool":
        return _gstlearn.Option_AutoFit_getVerbose(self)

    def getWmode(self) -> "int":
        return _gstlearn.Option_AutoFit_getWmode(self)

    def getConstantSills(self, *args) -> "double":
        return _gstlearn.Option_AutoFit_getConstantSills(self, *args)

    def setConstantSillValue(self, value: "double") -> "void":
        return _gstlearn.Option_AutoFit_setConstantSillValue(self, value)

    def setEpsdelta(self, epsdelta: "double") -> "void":
        return _gstlearn.Option_AutoFit_setEpsdelta(self, epsdelta)

    def setFlagIntrinsic(self, flagIntrinsic: "int") -> "void":
        return _gstlearn.Option_AutoFit_setFlagIntrinsic(self, flagIntrinsic)

    def setInitdelta(self, initdelta: "double") -> "void":
        return _gstlearn.Option_AutoFit_setInitdelta(self, initdelta)

    def setMaxiter(self, maxiter: "int") -> "void":
        return _gstlearn.Option_AutoFit_setMaxiter(self, maxiter)

    def setTolred(self, tolred: "double") -> "void":
        return _gstlearn.Option_AutoFit_setTolred(self, tolred)

    def setTolsigma(self, tolsigma: "double") -> "void":
        return _gstlearn.Option_AutoFit_setTolsigma(self, tolsigma)

    def setTolstop(self, tolstop: "double") -> "void":
        return _gstlearn.Option_AutoFit_setTolstop(self, tolstop)

    def setVerbose(self, verbose: "bool") -> "void":
        return _gstlearn.Option_AutoFit_setVerbose(self, verbose)

    def setWmode(self, wmode: "int") -> "void":
        return _gstlearn.Option_AutoFit_setWmode(self, wmode)

    def setConstantSills(self, nvar: "int") -> "void":
        return _gstlearn.Option_AutoFit_setConstantSills(self, nvar)

    def __repr__(self) -> "std::string":
        return _gstlearn.Option_AutoFit___repr__(self)

# Register Option_AutoFit in _gstlearn:
_gstlearn.Option_AutoFit_swigregister(Option_AutoFit)

class Option_VarioFit(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Option_VarioFit_swiginit(self, _gstlearn.new_Option_VarioFit(*args))
    __swig_destroy__ = _gstlearn.delete_Option_VarioFit

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.Option_VarioFit_toString(self, strfmt)

    def getAuthAniso(self) -> "int":
        return _gstlearn.Option_VarioFit_getAuthAniso(self)

    def setAuthAniso(self, authAniso: "int") -> "void":
        return _gstlearn.Option_VarioFit_setAuthAniso(self, authAniso)

    def getAuthRotation(self) -> "int":
        return _gstlearn.Option_VarioFit_getAuthRotation(self)

    def setAuthRotation(self, authRotation: "int") -> "void":
        return _gstlearn.Option_VarioFit_setAuthRotation(self, authRotation)

    def getFlagCheckBounds(self) -> "int":
        return _gstlearn.Option_VarioFit_getFlagCheckBounds(self)

    def setFlagCheckBounds(self, flagCheckBounds: "int") -> "void":
        return _gstlearn.Option_VarioFit_setFlagCheckBounds(self, flagCheckBounds)

    def getFlagGoulardUsed(self) -> "int":
        return _gstlearn.Option_VarioFit_getFlagGoulardUsed(self)

    def setFlagGoulardUsed(self, flagGoulardUsed: "int") -> "void":
        return _gstlearn.Option_VarioFit_setFlagGoulardUsed(self, flagGoulardUsed)

    def getFlagNoreduce(self) -> "int":
        return _gstlearn.Option_VarioFit_getFlagNoreduce(self)

    def setFlagNoreduce(self, flagNoreduce: "int") -> "void":
        return _gstlearn.Option_VarioFit_setFlagNoreduce(self, flagNoreduce)

    def getKeepIntstr(self) -> "int":
        return _gstlearn.Option_VarioFit_getKeepIntstr(self)

    def setKeepIntstr(self, keepIntstr: "int") -> "void":
        return _gstlearn.Option_VarioFit_setKeepIntstr(self, keepIntstr)

    def getLockIso2d(self) -> "int":
        return _gstlearn.Option_VarioFit_getLockIso2d(self)

    def setLockIso2d(self, lockIso2d: "int") -> "void":
        return _gstlearn.Option_VarioFit_setLockIso2d(self, lockIso2d)

    def getLockNo3d(self) -> "int":
        return _gstlearn.Option_VarioFit_getLockNo3d(self)

    def setLockNo3d(self, lockNo3d: "int") -> "void":
        return _gstlearn.Option_VarioFit_setLockNo3d(self, lockNo3d)

    def getLockRot2d(self) -> "int":
        return _gstlearn.Option_VarioFit_getLockRot2d(self)

    def setLockRot2d(self, lockRot2d: "int") -> "void":
        return _gstlearn.Option_VarioFit_setLockRot2d(self, lockRot2d)

    def getLockSamerot(self) -> "int":
        return _gstlearn.Option_VarioFit_getLockSamerot(self)

    def setLockSamerot(self, lockSamerot: "int") -> "void":
        return _gstlearn.Option_VarioFit_setLockSamerot(self, lockSamerot)

    def __repr__(self) -> "std::string":
        return _gstlearn.Option_VarioFit___repr__(self)

# Register Option_VarioFit in _gstlearn:
_gstlearn.Option_VarioFit_swigregister(Option_VarioFit)

class Constraints(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Constraints_swiginit(self, _gstlearn.new_Constraints(*args))
    __swig_destroy__ = _gstlearn.delete_Constraints

    def addItem(self, item: "ConsItem") -> "void":
        return _gstlearn.Constraints_addItem(self, item)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.Constraints_toString(self, strfmt)

    def isDefined(self) -> "int":
        return _gstlearn.Constraints_isDefined(self)

    def isDefinedForSill(self) -> "int":
        return _gstlearn.Constraints_isDefinedForSill(self)

    def getConsItemNumber(self) -> "int":
        return _gstlearn.Constraints_getConsItemNumber(self)

    def getConsItems(self, *args) -> "ConsItem const *":
        return _gstlearn.Constraints_getConsItems(self, *args)

    def modifyConstraintsForSill(self) -> "void":
        return _gstlearn.Constraints_modifyConstraintsForSill(self)

    def setValue(self, item: "int", value: "double") -> "void":
        return _gstlearn.Constraints_setValue(self, item, value)

    def __repr__(self) -> "std::string":
        return _gstlearn.Constraints___repr__(self)

# Register Constraints in _gstlearn:
_gstlearn.Constraints_swigregister(Constraints)

class ConsItem(AStringable, IClonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.ConsItem_swiginit(self, _gstlearn.new_ConsItem(*args))
    __swig_destroy__ = _gstlearn.delete_ConsItem

    def init(self, paramid: "CovParamId", type: "EConsType", value: "double"=1.234e30) -> "int":
        return _gstlearn.ConsItem_init(self, paramid, type, value)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.ConsItem_toString(self, strfmt)

    def clone(self) -> "IClonable *":
        return _gstlearn.ConsItem_clone(self)

    def getType(self) -> "EConsElem const &":
        return _gstlearn.ConsItem_getType(self)

    def getIGrf(self) -> "int":
        return _gstlearn.ConsItem_getIGrf(self)

    def getICov(self) -> "int":
        return _gstlearn.ConsItem_getICov(self)

    def getIV1(self) -> "int":
        return _gstlearn.ConsItem_getIV1(self)

    def getIV2(self) -> "int":
        return _gstlearn.ConsItem_getIV2(self)

    def setValue(self, value: "double") -> "void":
        return _gstlearn.ConsItem_setValue(self, value)

    def setIcase(self, type: "EConsType") -> "void":
        return _gstlearn.ConsItem_setIcase(self, type)

    def getIcase(self) -> "EConsType const &":
        return _gstlearn.ConsItem_getIcase(self)

    def getValue(self) -> "double":
        return _gstlearn.ConsItem_getValue(self)

    def matchIGrf(self, igrf0: "int") -> "bool":
        return _gstlearn.ConsItem_matchIGrf(self, igrf0)

    def matchICov(self, icov0: "int") -> "bool":
        return _gstlearn.ConsItem_matchICov(self, icov0)

    def matchType(self, type0: "EConsElem") -> "bool":
        return _gstlearn.ConsItem_matchType(self, type0)

    def matchIV1(self, iv10: "int") -> "bool":
        return _gstlearn.ConsItem_matchIV1(self, iv10)

    def matchIV2(self, iv20: "int") -> "bool":
        return _gstlearn.ConsItem_matchIV2(self, iv20)

    def getParamId(self) -> "CovParamId const &":
        return _gstlearn.ConsItem_getParamId(self)

    @staticmethod
    def define(*args, **kwargs) -> "ConsItem":
        return _gstlearn.ConsItem_define(*args, **kwargs)

# Register ConsItem in _gstlearn:
_gstlearn.ConsItem_swigregister(ConsItem)

def ConsItem_define(*args, **kwargs) -> "ConsItem":
    return _gstlearn.ConsItem_define(*args, **kwargs)

class CovParamId(AStringable, IClonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovParamId_swiginit(self, _gstlearn.new_CovParamId(*args))
    __swig_destroy__ = _gstlearn.delete_CovParamId

    def init(self, igrf: "int", icov: "int", type: "EConsElem", iv1: "int", iv2: "int") -> "int":
        return _gstlearn.CovParamId_init(self, igrf, icov, type, iv1, iv2)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.CovParamId_toString(self, strfmt)

    def clone(self) -> "IClonable *":
        return _gstlearn.CovParamId_clone(self)

    def getType(self) -> "EConsElem const &":
        return _gstlearn.CovParamId_getType(self)

    def getIGrf(self) -> "int":
        return _gstlearn.CovParamId_getIGrf(self)

    def getICov(self) -> "int":
        return _gstlearn.CovParamId_getICov(self)

    def getIV1(self) -> "int":
        return _gstlearn.CovParamId_getIV1(self)

    def getIV2(self) -> "int":
        return _gstlearn.CovParamId_getIV2(self)

    def setType(self, type: "EConsElem") -> "void":
        return _gstlearn.CovParamId_setType(self, type)

    def matchIGrf(self, igrf0: "int") -> "bool":
        return _gstlearn.CovParamId_matchIGrf(self, igrf0)

    def matchICov(self, icov0: "int") -> "bool":
        return _gstlearn.CovParamId_matchICov(self, icov0)

    def matchType(self, type0: "EConsElem") -> "bool":
        return _gstlearn.CovParamId_matchType(self, type0)

    def matchIV1(self, iv10: "int") -> "bool":
        return _gstlearn.CovParamId_matchIV1(self, iv10)

    def matchIV2(self, iv20: "int") -> "bool":
        return _gstlearn.CovParamId_matchIV2(self, iv20)

# Register CovParamId in _gstlearn:
_gstlearn.CovParamId_swigregister(CovParamId)

class EModelPropertyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EModelPropertyIterator

    def __init__(self, arg2: "EModelPropertyIterator"):
        _gstlearn.EModelPropertyIterator_swiginit(self, _gstlearn.new_EModelPropertyIterator(arg2))

    def __ref__(self) -> "EModelProperty const &":
        return _gstlearn.EModelPropertyIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.EModelPropertyIterator_hasNext(self)

    def toNext(self) -> "EModelProperty const &":
        return _gstlearn.EModelPropertyIterator_toNext(self)

    def toFront(self) -> "EModelProperty const &":
        return _gstlearn.EModelPropertyIterator_toFront(self)

    def getEnum(self) -> "EModelProperty const &":
        return _gstlearn.EModelPropertyIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.EModelPropertyIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.EModelPropertyIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.EModelPropertyIterator_getDescr(self)

# Register EModelPropertyIterator in _gstlearn:
_gstlearn.EModelPropertyIterator_swigregister(EModelPropertyIterator)

class EModelProperty(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EModelProperty

    def __init__(self, *args):
        _gstlearn.EModelProperty_swiginit(self, _gstlearn.new_EModelProperty(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.EModelProperty_getSize()

    @staticmethod
    def getIterator() -> "EModelPropertyIterator":
        return _gstlearn.EModelProperty_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.EModelProperty_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.EModelProperty_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "EModelProperty const &":
        return _gstlearn.EModelProperty_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "EModelProperty const &":
        return _gstlearn.EModelProperty_fromValue(value)
    E_NONE = _gstlearn.EModelProperty_E_NONE
    E_CONV = _gstlearn.EModelProperty_E_CONV
    E_ANAM = _gstlearn.EModelProperty_E_ANAM
    E_TAPE = _gstlearn.EModelProperty_E_TAPE
    E_GRAD = _gstlearn.EModelProperty_E_GRAD

    def toEnum(self) -> "EModelProperty::EEModelProperty":
        return _gstlearn.EModelProperty_toEnum(self)

# Register EModelProperty in _gstlearn:
_gstlearn.EModelProperty_swigregister(EModelProperty)

def EModelProperty_getSize() -> "size_t":
    return _gstlearn.EModelProperty_getSize()

def EModelProperty_getIterator() -> "EModelPropertyIterator":
    return _gstlearn.EModelProperty_getIterator()

def EModelProperty_existsKey(key: "String const &") -> "bool":
    return _gstlearn.EModelProperty_existsKey(key)

def EModelProperty_existsValue(value: "int") -> "bool":
    return _gstlearn.EModelProperty_existsValue(value)

def EModelProperty_fromKey(key: "String const &") -> "EModelProperty const &":
    return _gstlearn.EModelProperty_fromKey(key)

def EModelProperty_fromValue(value: "int") -> "EModelProperty const &":
    return _gstlearn.EModelProperty_fromValue(value)
EModelProperty.NONE = _gstlearn.cvar.EModelProperty_NONE
EModelProperty.CONV = _gstlearn.cvar.EModelProperty_CONV
EModelProperty.ANAM = _gstlearn.cvar.EModelProperty_ANAM
EModelProperty.TAPE = _gstlearn.cvar.EModelProperty_TAPE
EModelProperty.GRAD = _gstlearn.cvar.EModelProperty_GRAD

class EConsElemIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EConsElemIterator

    def __init__(self, arg2: "EConsElemIterator"):
        _gstlearn.EConsElemIterator_swiginit(self, _gstlearn.new_EConsElemIterator(arg2))

    def __ref__(self) -> "EConsElem const &":
        return _gstlearn.EConsElemIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.EConsElemIterator_hasNext(self)

    def toNext(self) -> "EConsElem const &":
        return _gstlearn.EConsElemIterator_toNext(self)

    def toFront(self) -> "EConsElem const &":
        return _gstlearn.EConsElemIterator_toFront(self)

    def getEnum(self) -> "EConsElem const &":
        return _gstlearn.EConsElemIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.EConsElemIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.EConsElemIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.EConsElemIterator_getDescr(self)

# Register EConsElemIterator in _gstlearn:
_gstlearn.EConsElemIterator_swigregister(EConsElemIterator)

class EConsElem(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EConsElem

    def __init__(self, *args):
        _gstlearn.EConsElem_swiginit(self, _gstlearn.new_EConsElem(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.EConsElem_getSize()

    @staticmethod
    def getIterator() -> "EConsElemIterator":
        return _gstlearn.EConsElem_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.EConsElem_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.EConsElem_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "EConsElem const &":
        return _gstlearn.EConsElem_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "EConsElem const &":
        return _gstlearn.EConsElem_fromValue(value)
    E_UNKNOWN = _gstlearn.EConsElem_E_UNKNOWN
    E_RANGE = _gstlearn.EConsElem_E_RANGE
    E_ANGLE = _gstlearn.EConsElem_E_ANGLE
    E_PARAM = _gstlearn.EConsElem_E_PARAM
    E_SILL = _gstlearn.EConsElem_E_SILL
    E_SCALE = _gstlearn.EConsElem_E_SCALE
    E_T_RANGE = _gstlearn.EConsElem_E_T_RANGE
    E_VELOCITY = _gstlearn.EConsElem_E_VELOCITY
    E_SPHEROT = _gstlearn.EConsElem_E_SPHEROT
    E_TENSOR = _gstlearn.EConsElem_E_TENSOR

    def toEnum(self) -> "EConsElem::EEConsElem":
        return _gstlearn.EConsElem_toEnum(self)

# Register EConsElem in _gstlearn:
_gstlearn.EConsElem_swigregister(EConsElem)

def EConsElem_getSize() -> "size_t":
    return _gstlearn.EConsElem_getSize()

def EConsElem_getIterator() -> "EConsElemIterator":
    return _gstlearn.EConsElem_getIterator()

def EConsElem_existsKey(key: "String const &") -> "bool":
    return _gstlearn.EConsElem_existsKey(key)

def EConsElem_existsValue(value: "int") -> "bool":
    return _gstlearn.EConsElem_existsValue(value)

def EConsElem_fromKey(key: "String const &") -> "EConsElem const &":
    return _gstlearn.EConsElem_fromKey(key)

def EConsElem_fromValue(value: "int") -> "EConsElem const &":
    return _gstlearn.EConsElem_fromValue(value)
EConsElem.UNKNOWN = _gstlearn.cvar.EConsElem_UNKNOWN
EConsElem.RANGE = _gstlearn.cvar.EConsElem_RANGE
EConsElem.ANGLE = _gstlearn.cvar.EConsElem_ANGLE
EConsElem.PARAM = _gstlearn.cvar.EConsElem_PARAM
EConsElem.SILL = _gstlearn.cvar.EConsElem_SILL
EConsElem.SCALE = _gstlearn.cvar.EConsElem_SCALE
EConsElem.T_RANGE = _gstlearn.cvar.EConsElem_T_RANGE
EConsElem.VELOCITY = _gstlearn.cvar.EConsElem_VELOCITY
EConsElem.SPHEROT = _gstlearn.cvar.EConsElem_SPHEROT
EConsElem.TENSOR = _gstlearn.cvar.EConsElem_TENSOR

class EConsTypeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EConsTypeIterator

    def __init__(self, arg2: "EConsTypeIterator"):
        _gstlearn.EConsTypeIterator_swiginit(self, _gstlearn.new_EConsTypeIterator(arg2))

    def __ref__(self) -> "EConsType const &":
        return _gstlearn.EConsTypeIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.EConsTypeIterator_hasNext(self)

    def toNext(self) -> "EConsType const &":
        return _gstlearn.EConsTypeIterator_toNext(self)

    def toFront(self) -> "EConsType const &":
        return _gstlearn.EConsTypeIterator_toFront(self)

    def getEnum(self) -> "EConsType const &":
        return _gstlearn.EConsTypeIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.EConsTypeIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.EConsTypeIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.EConsTypeIterator_getDescr(self)

# Register EConsTypeIterator in _gstlearn:
_gstlearn.EConsTypeIterator_swigregister(EConsTypeIterator)

class EConsType(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EConsType

    def __init__(self, *args):
        _gstlearn.EConsType_swiginit(self, _gstlearn.new_EConsType(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.EConsType_getSize()

    @staticmethod
    def getIterator() -> "EConsTypeIterator":
        return _gstlearn.EConsType_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.EConsType_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.EConsType_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "EConsType const &":
        return _gstlearn.EConsType_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "EConsType const &":
        return _gstlearn.EConsType_fromValue(value)
    E_LOWER = _gstlearn.EConsType_E_LOWER
    E_DEFAULT = _gstlearn.EConsType_E_DEFAULT
    E_UPPER = _gstlearn.EConsType_E_UPPER
    E_EQUAL = _gstlearn.EConsType_E_EQUAL

    def toEnum(self) -> "EConsType::EEConsType":
        return _gstlearn.EConsType_toEnum(self)

# Register EConsType in _gstlearn:
_gstlearn.EConsType_swigregister(EConsType)

def EConsType_getSize() -> "size_t":
    return _gstlearn.EConsType_getSize()

def EConsType_getIterator() -> "EConsTypeIterator":
    return _gstlearn.EConsType_getIterator()

def EConsType_existsKey(key: "String const &") -> "bool":
    return _gstlearn.EConsType_existsKey(key)

def EConsType_existsValue(value: "int") -> "bool":
    return _gstlearn.EConsType_existsValue(value)

def EConsType_fromKey(key: "String const &") -> "EConsType const &":
    return _gstlearn.EConsType_fromKey(key)

def EConsType_fromValue(value: "int") -> "EConsType const &":
    return _gstlearn.EConsType_fromValue(value)
EConsType.LOWER = _gstlearn.cvar.EConsType_LOWER
EConsType.DEFAULT = _gstlearn.cvar.EConsType_DEFAULT
EConsType.UPPER = _gstlearn.cvar.EConsType_UPPER
EConsType.EQUAL = _gstlearn.cvar.EConsType_EQUAL

class ACov(ASpaceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ACov

    def getNVariables(self) -> "int":
        return _gstlearn.ACov_getNVariables(self)

    def isGradientCompatible(self) -> "bool":
        return _gstlearn.ACov_isGradientCompatible(self)

    def eval0(self, *args) -> "MatrixSquareGeneral":
        return _gstlearn.ACov_eval0(self, *args)

    def eval(self, *args) -> "MatrixSquareGeneral":
        return _gstlearn.ACov_eval(self, *args)

    def evalIvarIpas(self, *args, **kwargs) -> "double":
        return _gstlearn.ACov_evalIvarIpas(self, *args, **kwargs)

    def evalIvarNpas(self, *args, **kwargs) -> "VectorDouble":
        return _gstlearn.ACov_evalIvarNpas(self, *args, **kwargs)

    def evalNvarIpas(self, *args, **kwargs) -> "MatrixSquareGeneral":
        return _gstlearn.ACov_evalNvarIpas(self, *args, **kwargs)

    def evalIsoIvarIpas(self, *args, **kwargs) -> "double":
        return _gstlearn.ACov_evalIsoIvarIpas(self, *args, **kwargs)

    def evalIsoIvarNpas(self, *args, **kwargs) -> "VectorDouble":
        return _gstlearn.ACov_evalIsoIvarNpas(self, *args, **kwargs)

    def evalIsoNvarIpas(self, *args, **kwargs) -> "MatrixSquareGeneral":
        return _gstlearn.ACov_evalIsoNvarIpas(self, *args, **kwargs)

# Register ACov in _gstlearn:
_gstlearn.ACov_swigregister(ACov)

class ACovFunc(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ACovFunc

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.ACovFunc_toString(self, strfmt)

    def getFormula(self) -> "String":
        return _gstlearn.ACovFunc_getFormula(self)

    def isConsistent(self) -> "bool":
        return _gstlearn.ACovFunc_isConsistent(self)

    def getScadef(self) -> "double":
        return _gstlearn.ACovFunc_getScadef(self)

    def getParMax(self) -> "double":
        return _gstlearn.ACovFunc_getParMax(self)

    def getMaxNDim(self) -> "unsigned int":
        return _gstlearn.ACovFunc_getMaxNDim(self)

    def getMinOrder(self) -> "int":
        return _gstlearn.ACovFunc_getMinOrder(self)

    def hasInt1D(self) -> "bool":
        return _gstlearn.ACovFunc_hasInt1D(self)

    def hasInt2D(self) -> "bool":
        return _gstlearn.ACovFunc_hasInt2D(self)

    def hasRange(self) -> "int":
        return _gstlearn.ACovFunc_hasRange(self)

    def hasParam(self) -> "bool":
        return _gstlearn.ACovFunc_hasParam(self)

    def getCovName(self) -> "String":
        return _gstlearn.ACovFunc_getCovName(self)

    def hasCovDerivative(self) -> "bool":
        return _gstlearn.ACovFunc_hasCovDerivative(self)

    def setParam(self, param: "double") -> "void":
        return _gstlearn.ACovFunc_setParam(self, param)

    def setField(self, field: "double") -> "void":
        return _gstlearn.ACovFunc_setField(self, field)

    def evalCov(self, h: "double") -> "double":
        return _gstlearn.ACovFunc_evalCov(self, h)

    def evalCovDerivative(self, degree: "int", h: "double") -> "double":
        return _gstlearn.ACovFunc_evalCovDerivative(self, degree, h)

    def evalCovVec(self, vech: "VectorDouble") -> "VectorDouble":
        return _gstlearn.ACovFunc_evalCovVec(self, vech)

    def evalCovDerivativeVec(self, degree: "int", vech: "VectorDouble") -> "VectorDouble":
        return _gstlearn.ACovFunc_evalCovDerivativeVec(self, degree, vech)

    def getType(self) -> "ECov const &":
        return _gstlearn.ACovFunc_getType(self)

    def getContext(self) -> "CovContext const &":
        return _gstlearn.ACovFunc_getContext(self)

    def getParam(self) -> "double":
        return _gstlearn.ACovFunc_getParam(self)

# Register ACovFunc in _gstlearn:
_gstlearn.ACovFunc_swigregister(ACovFunc)

class ACovAnisoList(ACov, IClonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ACovAnisoList

    def clone(self) -> "IClonable *":
        return _gstlearn.ACovAnisoList_clone(self)

    def addCov(self, cov: "CovAniso") -> "void":
        return _gstlearn.ACovAnisoList_addCov(self, cov)

    def isConsistent(self, space: "ASpace") -> "bool":
        return _gstlearn.ACovAnisoList_isConsistent(self, space)

    def getNVariables(self) -> "int":
        return _gstlearn.ACovAnisoList_getNVariables(self)

    def eval0(self, *args, **kwargs) -> "double":
        return _gstlearn.ACovAnisoList_eval0(self, *args, **kwargs)

    def eval(self, *args, **kwargs) -> "double":
        return _gstlearn.ACovAnisoList_eval(self, *args, **kwargs)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.ACovAnisoList_toString(self, strfmt)

    def addCovList(self, covs: "ACovAnisoList") -> "void":
        return _gstlearn.ACovAnisoList_addCovList(self, covs)

    def delCov(self, i: "unsigned int") -> "void":
        return _gstlearn.ACovAnisoList_delCov(self, i)

    def delAllCov(self) -> "void":
        return _gstlearn.ACovAnisoList_delAllCov(self)

    def setFiltered(self, i: "unsigned int", filtered: "bool") -> "void":
        return _gstlearn.ACovAnisoList_setFiltered(self, i, filtered)

    def getCovNumber(self) -> "int":
        return _gstlearn.ACovAnisoList_getCovNumber(self)

    def isFiltered(self, i: "unsigned int") -> "bool":
        return _gstlearn.ACovAnisoList_isFiltered(self, i)

    def hasRange(self) -> "bool":
        return _gstlearn.ACovAnisoList_hasRange(self)

    def isStationary(self) -> "bool":
        return _gstlearn.ACovAnisoList_isStationary(self)

    def getMaximumDistance(self) -> "double":
        return _gstlearn.ACovAnisoList_getMaximumDistance(self)

    def getTotalSill(self, *args) -> "MatrixSquareGeneral":
        return _gstlearn.ACovAnisoList_getTotalSill(self, *args)

    def getCova(self, *args) -> "CovAniso *":
        return _gstlearn.ACovAnisoList_getCova(self, *args)

    def getType(self, icov: "unsigned int") -> "ECov const &":
        return _gstlearn.ACovAnisoList_getType(self, icov)

    def getCovName(self, icov: "unsigned int") -> "String":
        return _gstlearn.ACovAnisoList_getCovName(self, icov)

    def getParam(self, icov: "unsigned int") -> "double":
        return _gstlearn.ACovAnisoList_getParam(self, icov)

    def getSill(self, *args) -> "double":
        return _gstlearn.ACovAnisoList_getSill(self, *args)

    def getGradParamNumber(self, icov: "unsigned int") -> "int":
        return _gstlearn.ACovAnisoList_getGradParamNumber(self, icov)

    def setSill(self, icov: "unsigned int", ivar: "int", jvar: "int", value: "double") -> "void":
        return _gstlearn.ACovAnisoList_setSill(self, icov, ivar, jvar, value)

    def setType(self, icov: "unsigned int", type: "ECov") -> "void":
        return _gstlearn.ACovAnisoList_setType(self, icov, type)

# Register ACovAnisoList in _gstlearn:
_gstlearn.ACovAnisoList_swigregister(ACovAnisoList)

class CovAniso(ACov, IClonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovAniso_swiginit(self, _gstlearn.new_CovAniso(*args))
    __swig_destroy__ = _gstlearn.delete_CovAniso

    def clone(self) -> "IClonable *":
        return _gstlearn.CovAniso_clone(self)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.CovAniso_toString(self, strfmt)

    def isConsistent(self, space: "ASpace") -> "bool":
        return _gstlearn.CovAniso_isConsistent(self, space)

    def getNVariables(self) -> "int":
        return _gstlearn.CovAniso_getNVariables(self)

    def eval0(self, *args, **kwargs) -> "double":
        return _gstlearn.CovAniso_eval0(self, *args, **kwargs)

    def eval(self, *args, **kwargs) -> "double":
        return _gstlearn.CovAniso_eval(self, *args, **kwargs)

    def getIntegralRange(self, ndisc: "int", hmax: "double") -> "double":
        return _gstlearn.CovAniso_getIntegralRange(self, ndisc, hmax)

    def getFormula(self) -> "String":
        return _gstlearn.CovAniso_getFormula(self)

    def getBallRadius(self) -> "double":
        return _gstlearn.CovAniso_getBallRadius(self)

    @staticmethod
    def createIsotropic(ctxt: "CovContext", type: "ECov", range: "double", sill: "double"=1., param: "double"=1.) -> "CovAniso *":
        return _gstlearn.CovAniso_createIsotropic(ctxt, type, range, sill, param)

    @staticmethod
    def createAnisotropic(ctxt: "CovContext", type: "ECov", ranges: "VectorDouble", sill: "double"=1., param: "double"=1.) -> "CovAniso *":
        return _gstlearn.CovAniso_createAnisotropic(ctxt, type, ranges, sill, param)

    @staticmethod
    def createIsotropicMulti(ctxt: "CovContext", type: "ECov", range: "double", sills: "MatrixSquareGeneral", param: "double"=1.) -> "CovAniso *":
        return _gstlearn.CovAniso_createIsotropicMulti(ctxt, type, range, sills, param)

    @staticmethod
    def createAnisotropicMulti(ctxt: "CovContext", type: "ECov", ranges: "VectorDouble", sills: "MatrixSquareGeneral", param: "double"=1.) -> "CovAniso *":
        return _gstlearn.CovAniso_createAnisotropicMulti(ctxt, type, ranges, sills, param)

    def setContext(self, ctxt: "CovContext") -> "void":
        return _gstlearn.CovAniso_setContext(self, ctxt)

    def setParam(self, param: "double") -> "void":
        return _gstlearn.CovAniso_setParam(self, param)

    def setSill(self, *args) -> "void":
        return _gstlearn.CovAniso_setSill(self, *args)

    def initSill(self, value: "double"=0.) -> "void":
        return _gstlearn.CovAniso_initSill(self, value)

    def setRange(self, *args) -> "void":
        return _gstlearn.CovAniso_setRange(self, *args)

    def setRanges(self, range: "VectorDouble") -> "void":
        return _gstlearn.CovAniso_setRanges(self, range)

    def setScale(self, *args) -> "void":
        return _gstlearn.CovAniso_setScale(self, *args)

    def setScales(self, scale: "VectorDouble") -> "void":
        return _gstlearn.CovAniso_setScales(self, scale)

    def setAnisoRotation(self, *args) -> "void":
        return _gstlearn.CovAniso_setAnisoRotation(self, *args)

    def setAnisoAngles(self, angles: "VectorDouble") -> "void":
        return _gstlearn.CovAniso_setAnisoAngles(self, angles)

    def setAnisoAngle(self, idim: "int", angle: "double") -> "void":
        return _gstlearn.CovAniso_setAnisoAngle(self, idim, angle)

    def getSill(self, *args) -> "double":
        return _gstlearn.CovAniso_getSill(self, *args)

    def getSlope(self, ivar: "int", jvar: "int") -> "double":
        return _gstlearn.CovAniso_getSlope(self, ivar, jvar)

    def getRanges(self) -> "VectorDouble":
        return _gstlearn.CovAniso_getRanges(self)

    def getAnisoRotation(self) -> "Rotation const &":
        return _gstlearn.CovAniso_getAnisoRotation(self)

    def getScales(self) -> "VectorDouble const &":
        return _gstlearn.CovAniso_getScales(self)

    def setType(self, type: "ECov") -> "void":
        return _gstlearn.CovAniso_setType(self, type)

    def getTheoretical(self) -> "double":
        return _gstlearn.CovAniso_getTheoretical(self)

    def getFlagAniso(self) -> "bool":
        return _gstlearn.CovAniso_getFlagAniso(self)

    def getFlagRotation(self) -> "bool":
        return _gstlearn.CovAniso_getFlagRotation(self)

    def getRange(self, *args) -> "double":
        return _gstlearn.CovAniso_getRange(self, *args)

    def getScale(self, idim: "int") -> "double":
        return _gstlearn.CovAniso_getScale(self, idim)

    def getAnisoRotMatVec(self) -> "VectorDouble const":
        return _gstlearn.CovAniso_getAnisoRotMatVec(self)

    def getAnisoInvMat(self) -> "MatrixSquareGeneral const &":
        return _gstlearn.CovAniso_getAnisoInvMat(self)

    def getAnisoInvMatVec(self) -> "VectorDouble const":
        return _gstlearn.CovAniso_getAnisoInvMatVec(self)

    def getAnisoAngles(self, *args) -> "double":
        return _gstlearn.CovAniso_getAnisoAngles(self, *args)

    def getAnisoRotMat(self, *args) -> "double":
        return _gstlearn.CovAniso_getAnisoRotMat(self, *args)

    def getAnisoCoeffs(self, *args) -> "double":
        return _gstlearn.CovAniso_getAnisoCoeffs(self, *args)

    def getContext(self) -> "CovContext const &":
        return _gstlearn.CovAniso_getContext(self)

    def getType(self) -> "ECov const &":
        return _gstlearn.CovAniso_getType(self)

    def getParam(self) -> "double":
        return _gstlearn.CovAniso_getParam(self)

    def getScadef(self) -> "double":
        return _gstlearn.CovAniso_getScadef(self)

    def getParMax(self) -> "double":
        return _gstlearn.CovAniso_getParMax(self)

    def getMaxNDim(self) -> "int":
        return _gstlearn.CovAniso_getMaxNDim(self)

    def getMinOrder(self) -> "int":
        return _gstlearn.CovAniso_getMinOrder(self)

    def hasInt1D(self) -> "bool":
        return _gstlearn.CovAniso_hasInt1D(self)

    def hasInt2D(self) -> "bool":
        return _gstlearn.CovAniso_hasInt2D(self)

    def hasRange(self) -> "int":
        return _gstlearn.CovAniso_hasRange(self)

    def hasParam(self) -> "int":
        return _gstlearn.CovAniso_hasParam(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovAniso_getCovName(self)

    def isIsotropic(self) -> "bool":
        return _gstlearn.CovAniso_isIsotropic(self)

    def isAsymptotic(self) -> "bool":
        return _gstlearn.CovAniso_isAsymptotic(self)

    def hasRotation(self) -> "bool":
        return _gstlearn.CovAniso_hasRotation(self)

    def getAniso(self) -> "Tensor const &":
        return _gstlearn.CovAniso_getAniso(self)

    def setAniso(self, aniso: "Tensor") -> "void":
        return _gstlearn.CovAniso_setAniso(self, aniso)

    def getCova(self) -> "ACovFunc const *":
        return _gstlearn.CovAniso_getCova(self)

    def getGradParamNumber(self) -> "int":
        return _gstlearn.CovAniso_getGradParamNumber(self)

    def hasCovDerivative(self) -> "bool":
        return _gstlearn.CovAniso_hasCovDerivative(self)

    @staticmethod
    def scale2range(type: "ECov", scale: "double", param: "double"=1.) -> "double":
        return _gstlearn.CovAniso_scale2range(type, scale, param)

    @staticmethod
    def range2scale(type: "ECov", range: "double", param: "double"=1.) -> "double":
        return _gstlearn.CovAniso_range2scale(type, range, param)

# Register CovAniso in _gstlearn:
_gstlearn.CovAniso_swigregister(CovAniso)

def CovAniso_createIsotropic(ctxt: "CovContext", type: "ECov", range: "double", sill: "double"=1., param: "double"=1.) -> "CovAniso *":
    return _gstlearn.CovAniso_createIsotropic(ctxt, type, range, sill, param)

def CovAniso_createAnisotropic(ctxt: "CovContext", type: "ECov", ranges: "VectorDouble", sill: "double"=1., param: "double"=1.) -> "CovAniso *":
    return _gstlearn.CovAniso_createAnisotropic(ctxt, type, ranges, sill, param)

def CovAniso_createIsotropicMulti(ctxt: "CovContext", type: "ECov", range: "double", sills: "MatrixSquareGeneral", param: "double"=1.) -> "CovAniso *":
    return _gstlearn.CovAniso_createIsotropicMulti(ctxt, type, range, sills, param)

def CovAniso_createAnisotropicMulti(ctxt: "CovContext", type: "ECov", ranges: "VectorDouble", sills: "MatrixSquareGeneral", param: "double"=1.) -> "CovAniso *":
    return _gstlearn.CovAniso_createAnisotropicMulti(ctxt, type, ranges, sills, param)

def CovAniso_scale2range(type: "ECov", scale: "double", param: "double"=1.) -> "double":
    return _gstlearn.CovAniso_scale2range(type, scale, param)

def CovAniso_range2scale(type: "ECov", range: "double", param: "double"=1.) -> "double":
    return _gstlearn.CovAniso_range2scale(type, range, param)

class ACovGradient(CovAniso):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ACovGradient

    def evalZAndGradients(self, *args, **kwargs) -> "void":
        return _gstlearn.ACovGradient_evalZAndGradients(self, *args, **kwargs)

# Register ACovGradient in _gstlearn:
_gstlearn.ACovGradient_swigregister(ACovGradient)

class CovLMC(ACovAnisoList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovLMC_swiginit(self, _gstlearn.new_CovLMC(*args))
    __swig_destroy__ = _gstlearn.delete_CovLMC

    def clone(self) -> "IClonable *":
        return _gstlearn.CovLMC_clone(self)

# Register CovLMC in _gstlearn:
_gstlearn.CovLMC_swigregister(CovLMC)

class Def_Tapering(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_gstlearn.Def_Tapering_name_get, _gstlearn.Def_Tapering_name_set)
    maxNDim = property(_gstlearn.Def_Tapering_maxNDim_get, _gstlearn.Def_Tapering_maxNDim_set)
    tapeFunc = property(_gstlearn.Def_Tapering_tapeFunc_get, _gstlearn.Def_Tapering_tapeFunc_set)

    def __init__(self):
        _gstlearn.Def_Tapering_swiginit(self, _gstlearn.new_Def_Tapering())
    __swig_destroy__ = _gstlearn.delete_Def_Tapering

# Register Def_Tapering in _gstlearn:
_gstlearn.Def_Tapering_swigregister(Def_Tapering)


def _tape_spherical(arg1: "double") -> "double":
    return _gstlearn._tape_spherical(arg1)

def _tape_cubic(arg1: "double") -> "double":
    return _gstlearn._tape_cubic(arg1)

def _tape_triangle(arg1: "double") -> "double":
    return _gstlearn._tape_triangle(arg1)

def _tape_penta(arg1: "double") -> "double":
    return _gstlearn._tape_penta(arg1)

def _tape_storkey(arg1: "double") -> "double":
    return _gstlearn._tape_storkey(arg1)

def _tape_wendland1(arg1: "double") -> "double":
    return _gstlearn._tape_wendland1(arg1)

def _tape_wendland2(arg1: "double") -> "double":
    return _gstlearn._tape_wendland2(arg1)

def D_TAPE(rank: "int") -> "Def_Tapering &":
    return _gstlearn.D_TAPE(rank)
class CovLMCTapering(CovLMC):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovLMCTapering_swiginit(self, _gstlearn.new_CovLMCTapering(*args))
    __swig_destroy__ = _gstlearn.delete_CovLMCTapering

    def clone(self) -> "IClonable *":
        return _gstlearn.CovLMCTapering_clone(self)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.CovLMCTapering_toString(self, strfmt)

    def eval0(self, *args, **kwargs) -> "double":
        return _gstlearn.CovLMCTapering_eval0(self, *args, **kwargs)

    def eval(self, *args, **kwargs) -> "double":
        return _gstlearn.CovLMCTapering_eval(self, *args, **kwargs)

    def init(self, tapetype: "ETape", taperange: "double") -> "int":
        return _gstlearn.CovLMCTapering_init(self, tapetype, taperange)

    def getName(self) -> "String const &":
        return _gstlearn.CovLMCTapering_getName(self)

    def getTapeRange(self) -> "double":
        return _gstlearn.CovLMCTapering_getTapeRange(self)

    def setTapeRange(self, range: "double") -> "void":
        return _gstlearn.CovLMCTapering_setTapeRange(self, range)

# Register CovLMCTapering in _gstlearn:
_gstlearn.CovLMCTapering_swigregister(CovLMCTapering)

class Def_Convolution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    convName = property(_gstlearn.Def_Convolution_convName_get, _gstlearn.Def_Convolution_convName_set)
    convScale = property(_gstlearn.Def_Convolution_convScale_get, _gstlearn.Def_Convolution_convScale_set)
    convFunc = property(_gstlearn.Def_Convolution_convFunc_get, _gstlearn.Def_Convolution_convFunc_set)

    def __init__(self):
        _gstlearn.Def_Convolution_swiginit(self, _gstlearn.new_Def_Convolution())
    __swig_destroy__ = _gstlearn.delete_Def_Convolution

# Register Def_Convolution in _gstlearn:
_gstlearn.Def_Convolution_swigregister(Def_Convolution)


def _conv_uniform(v: "double") -> "double":
    return _gstlearn._conv_uniform(v)

def _conv_exponential(v: "double") -> "double":
    return _gstlearn._conv_exponential(v)

def _conv_gaussian(v: "double") -> "double":
    return _gstlearn._conv_gaussian(v)

def _conv_sincard(v: "double") -> "double":
    return _gstlearn._conv_sincard(v)

def D_CONV(rank: "int") -> "Def_Convolution &":
    return _gstlearn.D_CONV(rank)
class CovLMCConvolution(CovLMC):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovLMCConvolution_swiginit(self, _gstlearn.new_CovLMCConvolution(*args))
    __swig_destroy__ = _gstlearn.delete_CovLMCConvolution

    def clone(self) -> "IClonable *":
        return _gstlearn.CovLMCConvolution_clone(self)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.CovLMCConvolution_toString(self, strfmt)

    def eval0(self, *args, **kwargs) -> "double":
        return _gstlearn.CovLMCConvolution_eval0(self, *args, **kwargs)

    def eval(self, *args, **kwargs) -> "double":
        return _gstlearn.CovLMCConvolution_eval(self, *args, **kwargs)

    def init(self, conv_type: "EConvType", conv_idir: "EConvDir", conv_range: "double", conv_ndisc: "int") -> "int":
        return _gstlearn.CovLMCConvolution_init(self, conv_type, conv_idir, conv_range, conv_ndisc)

    def getConvRange(self) -> "double":
        return _gstlearn.CovLMCConvolution_getConvRange(self)

    def getConvWeight(self) -> "VectorDouble const &":
        return _gstlearn.CovLMCConvolution_getConvWeight(self)

    def getConvIncr(self, *args) -> "VectorDouble":
        return _gstlearn.CovLMCConvolution_getConvIncr(self, *args)

    def getConvNumber(self) -> "int":
        return _gstlearn.CovLMCConvolution_getConvNumber(self)

# Register CovLMCConvolution in _gstlearn:
_gstlearn.CovLMCConvolution_swigregister(CovLMCConvolution)

class CovLMCAnamorphosis(CovLMC):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovLMCAnamorphosis_swiginit(self, _gstlearn.new_CovLMCAnamorphosis(*args))
    __swig_destroy__ = _gstlearn.delete_CovLMCAnamorphosis

    def clone(self) -> "IClonable *":
        return _gstlearn.CovLMCAnamorphosis_clone(self)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.CovLMCAnamorphosis_toString(self, strfmt)

    def eval0(self, *args, **kwargs) -> "double":
        return _gstlearn.CovLMCAnamorphosis_eval0(self, *args, **kwargs)

    def eval(self, *args, **kwargs) -> "double":
        return _gstlearn.CovLMCAnamorphosis_eval(self, *args, **kwargs)

    def init(self, anam_type: "EAnam", anam_nclass: "int", anam_iclass: "int", anam_var: "int", anam_coefr: "double", anam_coefs: "double", anam_strcnt: "VectorDouble", anam_stats: "VectorDouble") -> "int":
        return _gstlearn.CovLMCAnamorphosis_init(self, anam_type, anam_nclass, anam_iclass, anam_var, anam_coefr, anam_coefs, anam_strcnt, anam_stats)

    def getAnamIClass(self) -> "int":
        return _gstlearn.CovLMCAnamorphosis_getAnamIClass(self)

    def getAnamMeans(self, *args) -> "double":
        return _gstlearn.CovLMCAnamorphosis_getAnamMeans(self, *args)

    def getAnamNClass(self) -> "int":
        return _gstlearn.CovLMCAnamorphosis_getAnamNClass(self)

    def getAnamPointBlock(self) -> "int":
        return _gstlearn.CovLMCAnamorphosis_getAnamPointBlock(self)

    def getAnamStrCount(self) -> "VectorDouble const &":
        return _gstlearn.CovLMCAnamorphosis_getAnamStrCount(self)

    def getAnamType(self) -> "EAnam const":
        return _gstlearn.CovLMCAnamorphosis_getAnamType(self)

    def setAnamIClass(self, anamIClass: "int") -> "int":
        return _gstlearn.CovLMCAnamorphosis_setAnamIClass(self, anamIClass)

    def setAnamPointBlock(self, anamPointBlock: "int") -> "void":
        return _gstlearn.CovLMCAnamorphosis_setAnamPointBlock(self, anamPointBlock)

    def getAnam(self) -> "AAnam *":
        return _gstlearn.CovLMCAnamorphosis_getAnam(self)

# Register CovLMCAnamorphosis in _gstlearn:
_gstlearn.CovLMCAnamorphosis_swigregister(CovLMCAnamorphosis)

class CovLMGradient(ACovAnisoList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovLMGradient_swiginit(self, _gstlearn.new_CovLMGradient(*args))
    __swig_destroy__ = _gstlearn.delete_CovLMGradient

    def clone(self) -> "IClonable *":
        return _gstlearn.CovLMGradient_clone(self)

    def addCov(self, cov: "CovAniso") -> "void":
        return _gstlearn.CovLMGradient_addCov(self, cov)

    def evalZAndGradients(self, *args) -> "void":
        return _gstlearn.CovLMGradient_evalZAndGradients(self, *args)

# Register CovLMGradient in _gstlearn:
_gstlearn.CovLMGradient_swigregister(CovLMGradient)

class CovContext(ASpaceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovContext_swiginit(self, _gstlearn.new_CovContext(*args))
    __swig_destroy__ = _gstlearn.delete_CovContext

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.CovContext_toString(self, strfmt)

    def isConsistent(self, space: "ASpace") -> "bool":
        return _gstlearn.CovContext_isConsistent(self, space)

    def isEqual(self, r: "CovContext") -> "bool":
        return _gstlearn.CovContext_isEqual(self, r)

    def getNVar(self) -> "int":
        return _gstlearn.CovContext_getNVar(self)

    def getIrfMaxDegree(self) -> "int":
        return _gstlearn.CovContext_getIrfMaxDegree(self)

    def getField(self) -> "double":
        return _gstlearn.CovContext_getField(self)

    def getMean(self, *args) -> "double":
        return _gstlearn.CovContext_getMean(self, *args)

    def getCovar0(self, *args) -> "double":
        return _gstlearn.CovContext_getCovar0(self, *args)

    def setNVar(self, nvar: "int") -> "void":
        return _gstlearn.CovContext_setNVar(self, nvar)

    def setIrfMaxDegree(self, irfMaxDegree: "int") -> "void":
        return _gstlearn.CovContext_setIrfMaxDegree(self, irfMaxDegree)

    def setField(self, field: "double") -> "void":
        return _gstlearn.CovContext_setField(self, field)

    def setMean(self, *args) -> "void":
        return _gstlearn.CovContext_setMean(self, *args)

    def setCovar0(self, *args) -> "void":
        return _gstlearn.CovContext_setCovar0(self, *args)

# Register CovContext in _gstlearn:
_gstlearn.CovContext_swigregister(CovContext)

class CovCalcMode(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovCalcMode_swiginit(self, _gstlearn.new_CovCalcMode(*args))
    __swig_destroy__ = _gstlearn.delete_CovCalcMode

    def isEqual(self, r: "CovCalcMode") -> "bool":
        return _gstlearn.CovCalcMode_isEqual(self, r)

    def getMember(self) -> "ECalcMember const &":
        return _gstlearn.CovCalcMode_getMember(self)

    def getAsVario(self) -> "bool":
        return _gstlearn.CovCalcMode_getAsVario(self)

    def getNormalized(self) -> "bool":
        return _gstlearn.CovCalcMode_getNormalized(self)

    def isFilterNugget(self) -> "bool":
        return _gstlearn.CovCalcMode_isFilterNugget(self)

    def getKeepOnlyCovIdx(self) -> "unsigned int":
        return _gstlearn.CovCalcMode_getKeepOnlyCovIdx(self)

    def getUnitary(self) -> "bool":
        return _gstlearn.CovCalcMode_getUnitary(self)

    def getOrderVario(self) -> "int":
        return _gstlearn.CovCalcMode_getOrderVario(self)

    def getEnvelop(self) -> "int":
        return _gstlearn.CovCalcMode_getEnvelop(self)

    def setAsVario(self, asVario: "bool") -> "void":
        return _gstlearn.CovCalcMode_setAsVario(self, asVario)

    def setMember(self, member: "ECalcMember const &") -> "void":
        return _gstlearn.CovCalcMode_setMember(self, member)

    def setFilterNugget(self, filterNugget: "bool") -> "void":
        return _gstlearn.CovCalcMode_setFilterNugget(self, filterNugget)

    def setKeepOnlyCovIdx(self, keepOnlyCovIdx: "unsigned int") -> "void":
        return _gstlearn.CovCalcMode_setKeepOnlyCovIdx(self, keepOnlyCovIdx)

    def setUnitary(self, unitary: "bool") -> "void":
        return _gstlearn.CovCalcMode_setUnitary(self, unitary)

    def setNormalized(self, normalized: "bool") -> "void":
        return _gstlearn.CovCalcMode_setNormalized(self, normalized)

    def setEnvelop(self, envelop: "int") -> "void":
        return _gstlearn.CovCalcMode_setEnvelop(self, envelop)

    def setOrderVario(self, orderVario: "int") -> "void":
        return _gstlearn.CovCalcMode_setOrderVario(self, orderVario)

    def update(self, *args, **kwargs) -> "void":
        return _gstlearn.CovCalcMode_update(self, *args, **kwargs)

# Register CovCalcMode in _gstlearn:
_gstlearn.CovCalcMode_swigregister(CovCalcMode)

class CovBesselJ(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovBesselJ_swiginit(self, _gstlearn.new_CovBesselJ(*args))
    __swig_destroy__ = _gstlearn.delete_CovBesselJ

    def hasParam(self) -> "bool":
        return _gstlearn.CovBesselJ_hasParam(self)

    def getParMax(self) -> "double":
        return _gstlearn.CovBesselJ_getParMax(self)

    def getFormula(self) -> "String":
        return _gstlearn.CovBesselJ_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovBesselJ_getCovName(self)

# Register CovBesselJ in _gstlearn:
_gstlearn.CovBesselJ_swigregister(CovBesselJ)

class CovBesselK(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovBesselK_swiginit(self, _gstlearn.new_CovBesselK(*args))
    __swig_destroy__ = _gstlearn.delete_CovBesselK

    def getFormula(self) -> "String":
        return _gstlearn.CovBesselK_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovBesselK_getCovName(self)

    def hasParam(self) -> "bool":
        return _gstlearn.CovBesselK_hasParam(self)

    def getParMax(self) -> "double":
        return _gstlearn.CovBesselK_getParMax(self)

    def getScadef(self) -> "double":
        return _gstlearn.CovBesselK_getScadef(self)

# Register CovBesselK in _gstlearn:
_gstlearn.CovBesselK_swigregister(CovBesselK)

class CovCauchy(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovCauchy_swiginit(self, _gstlearn.new_CovCauchy(*args))
    __swig_destroy__ = _gstlearn.delete_CovCauchy

    def getFormula(self) -> "String":
        return _gstlearn.CovCauchy_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovCauchy_getCovName(self)

    def hasParam(self) -> "bool":
        return _gstlearn.CovCauchy_hasParam(self)

    def getParMax(self) -> "double":
        return _gstlearn.CovCauchy_getParMax(self)

    def getScadef(self) -> "double":
        return _gstlearn.CovCauchy_getScadef(self)

# Register CovCauchy in _gstlearn:
_gstlearn.CovCauchy_swigregister(CovCauchy)

class CovCosExp(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovCosExp_swiginit(self, _gstlearn.new_CovCosExp(*args))
    __swig_destroy__ = _gstlearn.delete_CovCosExp

    def getParMax(self) -> "double":
        return _gstlearn.CovCosExp_getParMax(self)

    def hasParam(self) -> "bool":
        return _gstlearn.CovCosExp_hasParam(self)

    def getScadef(self) -> "double":
        return _gstlearn.CovCosExp_getScadef(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovCosExp_getCovName(self)

# Register CovCosExp in _gstlearn:
_gstlearn.CovCosExp_swigregister(CovCosExp)

class CovCosinus(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovCosinus_swiginit(self, _gstlearn.new_CovCosinus(*args))
    __swig_destroy__ = _gstlearn.delete_CovCosinus

    def getMaxNDim(self) -> "unsigned int":
        return _gstlearn.CovCosinus_getMaxNDim(self)

    def getFormula(self) -> "String":
        return _gstlearn.CovCosinus_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovCosinus_getCovName(self)

# Register CovCosinus in _gstlearn:
_gstlearn.CovCosinus_swigregister(CovCosinus)

class CovCubic(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovCubic_swiginit(self, _gstlearn.new_CovCubic(*args))
    __swig_destroy__ = _gstlearn.delete_CovCubic

    def getMaxNDim(self) -> "unsigned int":
        return _gstlearn.CovCubic_getMaxNDim(self)

    def getFormula(self) -> "String":
        return _gstlearn.CovCubic_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovCubic_getCovName(self)

    def hasCovDerivative(self) -> "bool":
        return _gstlearn.CovCubic_hasCovDerivative(self)

# Register CovCubic in _gstlearn:
_gstlearn.CovCubic_swigregister(CovCubic)

class CovExponential(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovExponential_swiginit(self, _gstlearn.new_CovExponential(*args))
    __swig_destroy__ = _gstlearn.delete_CovExponential

    def getScadef(self) -> "double":
        return _gstlearn.CovExponential_getScadef(self)

    def getFormula(self) -> "String":
        return _gstlearn.CovExponential_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovExponential_getCovName(self)

# Register CovExponential in _gstlearn:
_gstlearn.CovExponential_swigregister(CovExponential)

class CovGamma(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovGamma_swiginit(self, _gstlearn.new_CovGamma(*args))
    __swig_destroy__ = _gstlearn.delete_CovGamma

    def getFormula(self) -> "String":
        return _gstlearn.CovGamma_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovGamma_getCovName(self)

    def hasParam(self) -> "bool":
        return _gstlearn.CovGamma_hasParam(self)

    def getParMax(self) -> "double":
        return _gstlearn.CovGamma_getParMax(self)

    def getScadef(self) -> "double":
        return _gstlearn.CovGamma_getScadef(self)

# Register CovGamma in _gstlearn:
_gstlearn.CovGamma_swigregister(CovGamma)

class CovGaussian(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovGaussian_swiginit(self, _gstlearn.new_CovGaussian(*args))
    __swig_destroy__ = _gstlearn.delete_CovGaussian

    def getFormula(self) -> "String":
        return _gstlearn.CovGaussian_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovGaussian_getCovName(self)

    def getScadef(self) -> "double":
        return _gstlearn.CovGaussian_getScadef(self)

    def hasCovDerivative(self) -> "bool":
        return _gstlearn.CovGaussian_hasCovDerivative(self)

# Register CovGaussian in _gstlearn:
_gstlearn.CovGaussian_swigregister(CovGaussian)

class CovGC1(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovGC1_swiginit(self, _gstlearn.new_CovGC1(*args))
    __swig_destroy__ = _gstlearn.delete_CovGC1

    def hasRange(self) -> "int":
        return _gstlearn.CovGC1_hasRange(self)

    def getMinOrder(self) -> "int":
        return _gstlearn.CovGC1_getMinOrder(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovGC1_getCovName(self)

# Register CovGC1 in _gstlearn:
_gstlearn.CovGC1_swigregister(CovGC1)

class CovGC3(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovGC3_swiginit(self, _gstlearn.new_CovGC3(*args))
    __swig_destroy__ = _gstlearn.delete_CovGC3

    def hasRange(self) -> "int":
        return _gstlearn.CovGC3_hasRange(self)

    def getMinOrder(self) -> "int":
        return _gstlearn.CovGC3_getMinOrder(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovGC3_getCovName(self)

# Register CovGC3 in _gstlearn:
_gstlearn.CovGC3_swigregister(CovGC3)

class CovGC5(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovGC5_swiginit(self, _gstlearn.new_CovGC5(*args))
    __swig_destroy__ = _gstlearn.delete_CovGC5

    def hasRange(self) -> "int":
        return _gstlearn.CovGC5_hasRange(self)

    def getMinOrder(self) -> "int":
        return _gstlearn.CovGC5_getMinOrder(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovGC5_getCovName(self)

# Register CovGC5 in _gstlearn:
_gstlearn.CovGC5_swigregister(CovGC5)

class CovGCspline2(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovGCspline2_swiginit(self, _gstlearn.new_CovGCspline2(*args))
    __swig_destroy__ = _gstlearn.delete_CovGCspline2

    def getMinOrder(self) -> "int":
        return _gstlearn.CovGCspline2_getMinOrder(self)

    def getMaxNDim(self) -> "unsigned int":
        return _gstlearn.CovGCspline2_getMaxNDim(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovGCspline2_getCovName(self)

    def hasCovDerivative(self) -> "bool":
        return _gstlearn.CovGCspline2_hasCovDerivative(self)

# Register CovGCspline2 in _gstlearn:
_gstlearn.CovGCspline2_swigregister(CovGCspline2)

class CovGCspline(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovGCspline_swiginit(self, _gstlearn.new_CovGCspline(*args))
    __swig_destroy__ = _gstlearn.delete_CovGCspline

    def hasRange(self) -> "int":
        return _gstlearn.CovGCspline_hasRange(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovGCspline_getCovName(self)

# Register CovGCspline in _gstlearn:
_gstlearn.CovGCspline_swigregister(CovGCspline)

class CovLinear(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovLinear_swiginit(self, _gstlearn.new_CovLinear(*args))
    __swig_destroy__ = _gstlearn.delete_CovLinear

    def hasRange(self) -> "int":
        return _gstlearn.CovLinear_hasRange(self)

    def getMinOrder(self) -> "int":
        return _gstlearn.CovLinear_getMinOrder(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovLinear_getCovName(self)

# Register CovLinear in _gstlearn:
_gstlearn.CovLinear_swigregister(CovLinear)

class CovNugget(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovNugget_swiginit(self, _gstlearn.new_CovNugget(*args))
    __swig_destroy__ = _gstlearn.delete_CovNugget

    def getFormula(self) -> "String":
        return _gstlearn.CovNugget_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovNugget_getCovName(self)

    def hasRange(self) -> "int":
        return _gstlearn.CovNugget_hasRange(self)

# Register CovNugget in _gstlearn:
_gstlearn.CovNugget_swigregister(CovNugget)

class CovP8(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovP8_swiginit(self, _gstlearn.new_CovP8(*args))
    __swig_destroy__ = _gstlearn.delete_CovP8

    def getMaxNDim(self) -> "unsigned int":
        return _gstlearn.CovP8_getMaxNDim(self)

    def getFormula(self) -> "String":
        return _gstlearn.CovP8_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovP8_getCovName(self)

    def hasCovDerivative(self) -> "bool":
        return _gstlearn.CovP8_hasCovDerivative(self)

# Register CovP8 in _gstlearn:
_gstlearn.CovP8_swigregister(CovP8)

class CovPenta(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovPenta_swiginit(self, _gstlearn.new_CovPenta(*args))
    __swig_destroy__ = _gstlearn.delete_CovPenta

    def getMaxNDim(self) -> "unsigned int":
        return _gstlearn.CovPenta_getMaxNDim(self)

    def getFormula(self) -> "String":
        return _gstlearn.CovPenta_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovPenta_getCovName(self)

# Register CovPenta in _gstlearn:
_gstlearn.CovPenta_swigregister(CovPenta)

class CovPower(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovPower_swiginit(self, _gstlearn.new_CovPower(*args))
    __swig_destroy__ = _gstlearn.delete_CovPower

    def hasRange(self) -> "int":
        return _gstlearn.CovPower_hasRange(self)

    def hasParam(self) -> "bool":
        return _gstlearn.CovPower_hasParam(self)

    def getParMax(self) -> "double":
        return _gstlearn.CovPower_getParMax(self)

    def getMinOrder(self) -> "int":
        return _gstlearn.CovPower_getMinOrder(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovPower_getCovName(self)

# Register CovPower in _gstlearn:
_gstlearn.CovPower_swigregister(CovPower)

class CovReg1D(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovReg1D_swiginit(self, _gstlearn.new_CovReg1D(*args))
    __swig_destroy__ = _gstlearn.delete_CovReg1D

    def getFormula(self) -> "String":
        return _gstlearn.CovReg1D_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovReg1D_getCovName(self)

    def getMaxNDim(self) -> "unsigned int":
        return _gstlearn.CovReg1D_getMaxNDim(self)

    def getScadef(self) -> "double":
        return _gstlearn.CovReg1D_getScadef(self)

# Register CovReg1D in _gstlearn:
_gstlearn.CovReg1D_swigregister(CovReg1D)

class CovSincard(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovSincard_swiginit(self, _gstlearn.new_CovSincard(*args))
    __swig_destroy__ = _gstlearn.delete_CovSincard

    def getScadef(self) -> "double":
        return _gstlearn.CovSincard_getScadef(self)

    def getFormula(self) -> "String":
        return _gstlearn.CovSincard_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovSincard_getCovName(self)

# Register CovSincard in _gstlearn:
_gstlearn.CovSincard_swigregister(CovSincard)

class CovSpherical(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovSpherical_swiginit(self, _gstlearn.new_CovSpherical(*args))
    __swig_destroy__ = _gstlearn.delete_CovSpherical

    def getMaxNDim(self) -> "unsigned int":
        return _gstlearn.CovSpherical_getMaxNDim(self)

    def getFormula(self) -> "String":
        return _gstlearn.CovSpherical_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovSpherical_getCovName(self)

# Register CovSpherical in _gstlearn:
_gstlearn.CovSpherical_swigregister(CovSpherical)

class CovStable(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovStable_swiginit(self, _gstlearn.new_CovStable(*args))
    __swig_destroy__ = _gstlearn.delete_CovStable

    def hasParam(self) -> "bool":
        return _gstlearn.CovStable_hasParam(self)

    def getScadef(self) -> "double":
        return _gstlearn.CovStable_getScadef(self)

    def getParMax(self) -> "double":
        return _gstlearn.CovStable_getParMax(self)

    def getFormula(self) -> "String":
        return _gstlearn.CovStable_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovStable_getCovName(self)

# Register CovStable in _gstlearn:
_gstlearn.CovStable_swigregister(CovStable)

class CovStorkey(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovStorkey_swiginit(self, _gstlearn.new_CovStorkey(*args))
    __swig_destroy__ = _gstlearn.delete_CovStorkey

    def getMaxNDim(self) -> "unsigned int":
        return _gstlearn.CovStorkey_getMaxNDim(self)

    def getFormula(self) -> "String":
        return _gstlearn.CovStorkey_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovStorkey_getCovName(self)

# Register CovStorkey in _gstlearn:
_gstlearn.CovStorkey_swigregister(CovStorkey)

class CovTriangle(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovTriangle_swiginit(self, _gstlearn.new_CovTriangle(*args))
    __swig_destroy__ = _gstlearn.delete_CovTriangle

    def getMaxNDim(self) -> "unsigned int":
        return _gstlearn.CovTriangle_getMaxNDim(self)

    def getFormula(self) -> "String":
        return _gstlearn.CovTriangle_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovTriangle_getCovName(self)

# Register CovTriangle in _gstlearn:
_gstlearn.CovTriangle_swigregister(CovTriangle)

class CovWendland1(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovWendland1_swiginit(self, _gstlearn.new_CovWendland1(*args))
    __swig_destroy__ = _gstlearn.delete_CovWendland1

    def getMaxNDim(self) -> "unsigned int":
        return _gstlearn.CovWendland1_getMaxNDim(self)

    def getFormula(self) -> "String":
        return _gstlearn.CovWendland1_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovWendland1_getCovName(self)

# Register CovWendland1 in _gstlearn:
_gstlearn.CovWendland1_swigregister(CovWendland1)

class CovWendland2(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovWendland2_swiginit(self, _gstlearn.new_CovWendland2(*args))
    __swig_destroy__ = _gstlearn.delete_CovWendland2

    def getMaxNDim(self) -> "unsigned int":
        return _gstlearn.CovWendland2_getMaxNDim(self)

    def getFormula(self) -> "String":
        return _gstlearn.CovWendland2_getFormula(self)

    def getCovName(self) -> "String":
        return _gstlearn.CovWendland2_getCovName(self)

# Register CovWendland2 in _gstlearn:
_gstlearn.CovWendland2_swigregister(CovWendland2)

class ECovIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ECovIterator

    def __init__(self, arg2: "ECovIterator"):
        _gstlearn.ECovIterator_swiginit(self, _gstlearn.new_ECovIterator(arg2))

    def __ref__(self) -> "ECov const &":
        return _gstlearn.ECovIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.ECovIterator_hasNext(self)

    def toNext(self) -> "ECov const &":
        return _gstlearn.ECovIterator_toNext(self)

    def toFront(self) -> "ECov const &":
        return _gstlearn.ECovIterator_toFront(self)

    def getEnum(self) -> "ECov const &":
        return _gstlearn.ECovIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.ECovIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.ECovIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.ECovIterator_getDescr(self)

# Register ECovIterator in _gstlearn:
_gstlearn.ECovIterator_swigregister(ECovIterator)

class ECov(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ECov

    def __init__(self, *args):
        _gstlearn.ECov_swiginit(self, _gstlearn.new_ECov(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.ECov_getSize()

    @staticmethod
    def getIterator() -> "ECovIterator":
        return _gstlearn.ECov_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.ECov_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.ECov_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "ECov const &":
        return _gstlearn.ECov_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "ECov const &":
        return _gstlearn.ECov_fromValue(value)
    E_UNKNOWN = _gstlearn.ECov_E_UNKNOWN
    E_FUNCTION = _gstlearn.ECov_E_FUNCTION
    E_NUGGET = _gstlearn.ECov_E_NUGGET
    E_EXPONENTIAL = _gstlearn.ECov_E_EXPONENTIAL
    E_SPHERICAL = _gstlearn.ECov_E_SPHERICAL
    E_GAUSSIAN = _gstlearn.ECov_E_GAUSSIAN
    E_CUBIC = _gstlearn.ECov_E_CUBIC
    E_SINCARD = _gstlearn.ECov_E_SINCARD
    E_BESSEL_J = _gstlearn.ECov_E_BESSEL_J
    E_BESSEL_K = _gstlearn.ECov_E_BESSEL_K
    E_GAMMA = _gstlearn.ECov_E_GAMMA
    E_CAUCHY = _gstlearn.ECov_E_CAUCHY
    E_STABLE = _gstlearn.ECov_E_STABLE
    E_LINEAR = _gstlearn.ECov_E_LINEAR
    E_POWER = _gstlearn.ECov_E_POWER
    E_ORDER1_GC = _gstlearn.ECov_E_ORDER1_GC
    E_SPLINE_GC = _gstlearn.ECov_E_SPLINE_GC
    E_ORDER3_GC = _gstlearn.ECov_E_ORDER3_GC
    E_ORDER5_GC = _gstlearn.ECov_E_ORDER5_GC
    E_COSINUS = _gstlearn.ECov_E_COSINUS
    E_TRIANGLE = _gstlearn.ECov_E_TRIANGLE
    E_COSEXP = _gstlearn.ECov_E_COSEXP
    E_REG1D = _gstlearn.ECov_E_REG1D
    E_PENTA = _gstlearn.ECov_E_PENTA
    E_SPLINE2_GC = _gstlearn.ECov_E_SPLINE2_GC
    E_STORKEY = _gstlearn.ECov_E_STORKEY
    E_WENDLAND1 = _gstlearn.ECov_E_WENDLAND1
    E_WENDLAND2 = _gstlearn.ECov_E_WENDLAND2
    E_P8 = _gstlearn.ECov_E_P8

    def toEnum(self) -> "ECov::EECov":
        return _gstlearn.ECov_toEnum(self)

# Register ECov in _gstlearn:
_gstlearn.ECov_swigregister(ECov)

def ECov_getSize() -> "size_t":
    return _gstlearn.ECov_getSize()

def ECov_getIterator() -> "ECovIterator":
    return _gstlearn.ECov_getIterator()

def ECov_existsKey(key: "String const &") -> "bool":
    return _gstlearn.ECov_existsKey(key)

def ECov_existsValue(value: "int") -> "bool":
    return _gstlearn.ECov_existsValue(value)

def ECov_fromKey(key: "String const &") -> "ECov const &":
    return _gstlearn.ECov_fromKey(key)

def ECov_fromValue(value: "int") -> "ECov const &":
    return _gstlearn.ECov_fromValue(value)
ECov.UNKNOWN = _gstlearn.cvar.ECov_UNKNOWN
ECov.FUNCTION = _gstlearn.cvar.ECov_FUNCTION
ECov.NUGGET = _gstlearn.cvar.ECov_NUGGET
ECov.EXPONENTIAL = _gstlearn.cvar.ECov_EXPONENTIAL
ECov.SPHERICAL = _gstlearn.cvar.ECov_SPHERICAL
ECov.GAUSSIAN = _gstlearn.cvar.ECov_GAUSSIAN
ECov.CUBIC = _gstlearn.cvar.ECov_CUBIC
ECov.SINCARD = _gstlearn.cvar.ECov_SINCARD
ECov.BESSEL_J = _gstlearn.cvar.ECov_BESSEL_J
ECov.BESSEL_K = _gstlearn.cvar.ECov_BESSEL_K
ECov.GAMMA = _gstlearn.cvar.ECov_GAMMA
ECov.CAUCHY = _gstlearn.cvar.ECov_CAUCHY
ECov.STABLE = _gstlearn.cvar.ECov_STABLE
ECov.LINEAR = _gstlearn.cvar.ECov_LINEAR
ECov.POWER = _gstlearn.cvar.ECov_POWER
ECov.ORDER1_GC = _gstlearn.cvar.ECov_ORDER1_GC
ECov.SPLINE_GC = _gstlearn.cvar.ECov_SPLINE_GC
ECov.ORDER3_GC = _gstlearn.cvar.ECov_ORDER3_GC
ECov.ORDER5_GC = _gstlearn.cvar.ECov_ORDER5_GC
ECov.COSINUS = _gstlearn.cvar.ECov_COSINUS
ECov.TRIANGLE = _gstlearn.cvar.ECov_TRIANGLE
ECov.COSEXP = _gstlearn.cvar.ECov_COSEXP
ECov.REG1D = _gstlearn.cvar.ECov_REG1D
ECov.PENTA = _gstlearn.cvar.ECov_PENTA
ECov.SPLINE2_GC = _gstlearn.cvar.ECov_SPLINE2_GC
ECov.STORKEY = _gstlearn.cvar.ECov_STORKEY
ECov.WENDLAND1 = _gstlearn.cvar.ECov_WENDLAND1
ECov.WENDLAND2 = _gstlearn.cvar.ECov_WENDLAND2
ECov.P8 = _gstlearn.cvar.ECov_P8

class ETapeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ETapeIterator

    def __init__(self, arg2: "ETapeIterator"):
        _gstlearn.ETapeIterator_swiginit(self, _gstlearn.new_ETapeIterator(arg2))

    def __ref__(self) -> "ETape const &":
        return _gstlearn.ETapeIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.ETapeIterator_hasNext(self)

    def toNext(self) -> "ETape const &":
        return _gstlearn.ETapeIterator_toNext(self)

    def toFront(self) -> "ETape const &":
        return _gstlearn.ETapeIterator_toFront(self)

    def getEnum(self) -> "ETape const &":
        return _gstlearn.ETapeIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.ETapeIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.ETapeIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.ETapeIterator_getDescr(self)

# Register ETapeIterator in _gstlearn:
_gstlearn.ETapeIterator_swigregister(ETapeIterator)

class ETape(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ETape

    def __init__(self, *args):
        _gstlearn.ETape_swiginit(self, _gstlearn.new_ETape(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.ETape_getSize()

    @staticmethod
    def getIterator() -> "ETapeIterator":
        return _gstlearn.ETape_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.ETape_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.ETape_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "ETape const &":
        return _gstlearn.ETape_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "ETape const &":
        return _gstlearn.ETape_fromValue(value)
    E_SPHERICAL = _gstlearn.ETape_E_SPHERICAL
    E_CUBIC = _gstlearn.ETape_E_CUBIC
    E_TRIANGLE = _gstlearn.ETape_E_TRIANGLE
    E_PENTAMODEL = _gstlearn.ETape_E_PENTAMODEL
    E_STORKEY = _gstlearn.ETape_E_STORKEY
    E_WENDLAND1 = _gstlearn.ETape_E_WENDLAND1
    E_WENDLAND2 = _gstlearn.ETape_E_WENDLAND2

    def toEnum(self) -> "ETape::EETape":
        return _gstlearn.ETape_toEnum(self)

# Register ETape in _gstlearn:
_gstlearn.ETape_swigregister(ETape)

def ETape_getSize() -> "size_t":
    return _gstlearn.ETape_getSize()

def ETape_getIterator() -> "ETapeIterator":
    return _gstlearn.ETape_getIterator()

def ETape_existsKey(key: "String const &") -> "bool":
    return _gstlearn.ETape_existsKey(key)

def ETape_existsValue(value: "int") -> "bool":
    return _gstlearn.ETape_existsValue(value)

def ETape_fromKey(key: "String const &") -> "ETape const &":
    return _gstlearn.ETape_fromKey(key)

def ETape_fromValue(value: "int") -> "ETape const &":
    return _gstlearn.ETape_fromValue(value)
ETape.SPHERICAL = _gstlearn.cvar.ETape_SPHERICAL
ETape.CUBIC = _gstlearn.cvar.ETape_CUBIC
ETape.TRIANGLE = _gstlearn.cvar.ETape_TRIANGLE
ETape.PENTAMODEL = _gstlearn.cvar.ETape_PENTAMODEL
ETape.STORKEY = _gstlearn.cvar.ETape_STORKEY
ETape.WENDLAND1 = _gstlearn.cvar.ETape_WENDLAND1
ETape.WENDLAND2 = _gstlearn.cvar.ETape_WENDLAND2

class EConvTypeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EConvTypeIterator

    def __init__(self, arg2: "EConvTypeIterator"):
        _gstlearn.EConvTypeIterator_swiginit(self, _gstlearn.new_EConvTypeIterator(arg2))

    def __ref__(self) -> "EConvType const &":
        return _gstlearn.EConvTypeIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.EConvTypeIterator_hasNext(self)

    def toNext(self) -> "EConvType const &":
        return _gstlearn.EConvTypeIterator_toNext(self)

    def toFront(self) -> "EConvType const &":
        return _gstlearn.EConvTypeIterator_toFront(self)

    def getEnum(self) -> "EConvType const &":
        return _gstlearn.EConvTypeIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.EConvTypeIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.EConvTypeIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.EConvTypeIterator_getDescr(self)

# Register EConvTypeIterator in _gstlearn:
_gstlearn.EConvTypeIterator_swigregister(EConvTypeIterator)

class EConvType(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EConvType

    def __init__(self, *args):
        _gstlearn.EConvType_swiginit(self, _gstlearn.new_EConvType(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.EConvType_getSize()

    @staticmethod
    def getIterator() -> "EConvTypeIterator":
        return _gstlearn.EConvType_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.EConvType_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.EConvType_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "EConvType const &":
        return _gstlearn.EConvType_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "EConvType const &":
        return _gstlearn.EConvType_fromValue(value)
    E_UNKNOWN = _gstlearn.EConvType_E_UNKNOWN
    E_UNIFORM = _gstlearn.EConvType_E_UNIFORM
    E_EXPONENTIAL = _gstlearn.EConvType_E_EXPONENTIAL
    E_GAUSSIAN = _gstlearn.EConvType_E_GAUSSIAN
    E_SINCARD = _gstlearn.EConvType_E_SINCARD

    def toEnum(self) -> "EConvType::EEConvType":
        return _gstlearn.EConvType_toEnum(self)

# Register EConvType in _gstlearn:
_gstlearn.EConvType_swigregister(EConvType)

def EConvType_getSize() -> "size_t":
    return _gstlearn.EConvType_getSize()

def EConvType_getIterator() -> "EConvTypeIterator":
    return _gstlearn.EConvType_getIterator()

def EConvType_existsKey(key: "String const &") -> "bool":
    return _gstlearn.EConvType_existsKey(key)

def EConvType_existsValue(value: "int") -> "bool":
    return _gstlearn.EConvType_existsValue(value)

def EConvType_fromKey(key: "String const &") -> "EConvType const &":
    return _gstlearn.EConvType_fromKey(key)

def EConvType_fromValue(value: "int") -> "EConvType const &":
    return _gstlearn.EConvType_fromValue(value)
EConvType.UNKNOWN = _gstlearn.cvar.EConvType_UNKNOWN
EConvType.UNIFORM = _gstlearn.cvar.EConvType_UNIFORM
EConvType.EXPONENTIAL = _gstlearn.cvar.EConvType_EXPONENTIAL
EConvType.GAUSSIAN = _gstlearn.cvar.EConvType_GAUSSIAN
EConvType.SINCARD = _gstlearn.cvar.EConvType_SINCARD

class EConvDirIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EConvDirIterator

    def __init__(self, arg2: "EConvDirIterator"):
        _gstlearn.EConvDirIterator_swiginit(self, _gstlearn.new_EConvDirIterator(arg2))

    def __ref__(self) -> "EConvDir const &":
        return _gstlearn.EConvDirIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.EConvDirIterator_hasNext(self)

    def toNext(self) -> "EConvDir const &":
        return _gstlearn.EConvDirIterator_toNext(self)

    def toFront(self) -> "EConvDir const &":
        return _gstlearn.EConvDirIterator_toFront(self)

    def getEnum(self) -> "EConvDir const &":
        return _gstlearn.EConvDirIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.EConvDirIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.EConvDirIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.EConvDirIterator_getDescr(self)

# Register EConvDirIterator in _gstlearn:
_gstlearn.EConvDirIterator_swigregister(EConvDirIterator)

class EConvDir(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EConvDir

    def __init__(self, *args):
        _gstlearn.EConvDir_swiginit(self, _gstlearn.new_EConvDir(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.EConvDir_getSize()

    @staticmethod
    def getIterator() -> "EConvDirIterator":
        return _gstlearn.EConvDir_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.EConvDir_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.EConvDir_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "EConvDir const &":
        return _gstlearn.EConvDir_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "EConvDir const &":
        return _gstlearn.EConvDir_fromValue(value)
    E_X = _gstlearn.EConvDir_E_X
    E_Y = _gstlearn.EConvDir_E_Y
    E_Z = _gstlearn.EConvDir_E_Z
    E_XY = _gstlearn.EConvDir_E_XY
    E_XYZ = _gstlearn.EConvDir_E_XYZ

    def toEnum(self) -> "EConvDir::EEConvDir":
        return _gstlearn.EConvDir_toEnum(self)

# Register EConvDir in _gstlearn:
_gstlearn.EConvDir_swigregister(EConvDir)

def EConvDir_getSize() -> "size_t":
    return _gstlearn.EConvDir_getSize()

def EConvDir_getIterator() -> "EConvDirIterator":
    return _gstlearn.EConvDir_getIterator()

def EConvDir_existsKey(key: "String const &") -> "bool":
    return _gstlearn.EConvDir_existsKey(key)

def EConvDir_existsValue(value: "int") -> "bool":
    return _gstlearn.EConvDir_existsValue(value)

def EConvDir_fromKey(key: "String const &") -> "EConvDir const &":
    return _gstlearn.EConvDir_fromKey(key)

def EConvDir_fromValue(value: "int") -> "EConvDir const &":
    return _gstlearn.EConvDir_fromValue(value)
EConvDir.X = _gstlearn.cvar.EConvDir_X
EConvDir.Y = _gstlearn.cvar.EConvDir_Y
EConvDir.Z = _gstlearn.cvar.EConvDir_Z
EConvDir.XY = _gstlearn.cvar.EConvDir_XY
EConvDir.XYZ = _gstlearn.cvar.EConvDir_XYZ

class ADrift(ASpaceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ADrift

    def getNVariables(self) -> "int":
        return _gstlearn.ADrift_getNVariables(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.ADrift_eval(self, db, iech)

# Register ADrift in _gstlearn:
_gstlearn.ADrift_swigregister(ADrift)

class ADriftElem(ADrift, IClonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ADriftElem

    def clone(self) -> "IClonable *":
        return _gstlearn.ADriftElem_clone(self)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.ADriftElem_toString(self, strfmt)

    def isConsistent(self, space: "ASpace") -> "bool":
        return _gstlearn.ADriftElem_isConsistent(self, space)

    def getNVariables(self) -> "int":
        return _gstlearn.ADriftElem_getNVariables(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.ADriftElem_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.ADriftElem_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.ADriftElem_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.ADriftElem_eval(self, db, iech)

    def getOrderIrf(self) -> "int":
        return _gstlearn.ADriftElem_getOrderIrf(self)

    def setOrderIrf(self, orderIrf: "int") -> "void":
        return _gstlearn.ADriftElem_setOrderIrf(self, orderIrf)

    def getRankFex(self) -> "int":
        return _gstlearn.ADriftElem_getRankFex(self)

    def setRankFex(self, rankFex: "int") -> "void":
        return _gstlearn.ADriftElem_setRankFex(self, rankFex)

    def getType(self) -> "EDrift const &":
        return _gstlearn.ADriftElem_getType(self)

    def setType(self, type: "EDrift") -> "void":
        return _gstlearn.ADriftElem_setType(self, type)

# Register ADriftElem in _gstlearn:
_gstlearn.ADriftElem_swigregister(ADriftElem)

class DriftList(ADrift, IClonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftList_swiginit(self, _gstlearn.new_DriftList(*args))
    __swig_destroy__ = _gstlearn.delete_DriftList

    def clone(self) -> "IClonable *":
        return _gstlearn.DriftList_clone(self)

    def isConsistent(self, space: "ASpace") -> "bool":
        return _gstlearn.DriftList_isConsistent(self, space)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.DriftList_toString(self, strfmt)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.DriftList_eval(self, db, iech)

    def getNVariables(self) -> "int":
        return _gstlearn.DriftList_getNVariables(self)

    def getDriftNumber(self) -> "int":
        return _gstlearn.DriftList_getDriftNumber(self)

    def addDriftList(self, drifts: "DriftList") -> "void":
        return _gstlearn.DriftList_addDriftList(self, drifts)

    def addDrift(self, drift: "ADriftElem") -> "void":
        return _gstlearn.DriftList_addDrift(self, drift)

    def delDrift(self, i: "unsigned int") -> "void":
        return _gstlearn.DriftList_delDrift(self, i)

    def delAllDrift(self) -> "void":
        return _gstlearn.DriftList_delAllDrift(self)

    def getDriftList(self) -> "std::vector< ADriftElem *,std::allocator< ADriftElem * > > const &":
        return _gstlearn.DriftList_getDriftList(self)

    def setDrifts(self, drifts: "std::vector< ADriftElem *,std::allocator< ADriftElem * > > const &") -> "void":
        return _gstlearn.DriftList_setDrifts(self, drifts)

    def getFiltered(self) -> "VectorBool const &":
        return _gstlearn.DriftList_getFiltered(self)

    def isFiltered(self, i: "int") -> "bool":
        return _gstlearn.DriftList_isFiltered(self, i)

    def setFiltered(self, *args) -> "void":
        return _gstlearn.DriftList_setFiltered(self, *args)

    def getDriftEquationNumber(self) -> "int":
        return _gstlearn.DriftList_getDriftEquationNumber(self)

    def getType(self, il: "int") -> "EDrift const &":
        return _gstlearn.DriftList_getType(self, il)

    def getRankFex(self, il: "int") -> "int":
        return _gstlearn.DriftList_getRankFex(self, il)

    def getDriftName(self, il: "int") -> "String":
        return _gstlearn.DriftList_getDriftName(self, il)

    def setType(self, il: "int", type: "EDrift") -> "void":
        return _gstlearn.DriftList_setType(self, il, type)

    def getCoefDrift(self, *args) -> "double":
        return _gstlearn.DriftList_getCoefDrift(self, *args)

    def setCoefDrift(self, ivar: "int", il: "int", ib: "int", value: "double") -> "void":
        return _gstlearn.DriftList_setCoefDrift(self, ivar, il, ib, value)

    def setCoefDriftByRank(self, rank: "int", coeff: "double") -> "void":
        return _gstlearn.DriftList_setCoefDriftByRank(self, rank, coeff)

    def getDrift(self, *args) -> "double":
        return _gstlearn.DriftList_getDrift(self, *args)

    def getDrifts(self, db: "Db", useSel: "bool"=True) -> "VectorVectorDouble":
        return _gstlearn.DriftList_getDrifts(self, db, useSel)

    def isFlagLinked(self) -> "bool":
        return _gstlearn.DriftList_isFlagLinked(self)

    def evalDrifts(self, db: "Db", coeffs: "VectorDouble", useSel: "bool"=False) -> "VectorDouble":
        return _gstlearn.DriftList_evalDrifts(self, db, coeffs, useSel)

    def getMaximumOrder(self) -> "int":
        return _gstlearn.DriftList_getMaximumOrder(self)

    def isDriftDefined(self, type0: "EDrift") -> "bool":
        return _gstlearn.DriftList_isDriftDefined(self, type0)

    def isDriftDifferentDefined(self, type0: "EDrift") -> "bool":
        return _gstlearn.DriftList_isDriftDifferentDefined(self, type0)

# Register DriftList in _gstlearn:
_gstlearn.DriftList_swigregister(DriftList)

class Drift1(ADriftElem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.Drift1_swiginit(self, _gstlearn.new_Drift1(*args))
    __swig_destroy__ = _gstlearn.delete_Drift1

    def clone(self) -> "IClonable *":
        return _gstlearn.Drift1_clone(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.Drift1_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.Drift1_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.Drift1_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.Drift1_eval(self, db, iech)

# Register Drift1 in _gstlearn:
_gstlearn.Drift1_swigregister(Drift1)

class DriftF(ADriftElem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftF_swiginit(self, _gstlearn.new_DriftF(*args))
    __swig_destroy__ = _gstlearn.delete_DriftF

    def clone(self) -> "IClonable *":
        return _gstlearn.DriftF_clone(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.DriftF_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.DriftF_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.DriftF_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.DriftF_eval(self, db, iech)

# Register DriftF in _gstlearn:
_gstlearn.DriftF_swigregister(DriftF)

class DriftFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def createDriftFunc(type: "EDrift", ctxt: "CovContext") -> "ADriftElem *":
        return _gstlearn.DriftFactory_createDriftFunc(type, ctxt)

    @staticmethod
    def duplicateDriftFunc(cov: "ADriftElem") -> "ADriftElem *":
        return _gstlearn.DriftFactory_duplicateDriftFunc(cov)

    @staticmethod
    def displayList(ctxt: "CovContext") -> "void":
        return _gstlearn.DriftFactory_displayList(ctxt)

    @staticmethod
    def identifyDrift(symbol: "String const &", rank: "int *", ctxt: "CovContext") -> "EDrift":
        return _gstlearn.DriftFactory_identifyDrift(symbol, rank, ctxt)

    def __init__(self):
        _gstlearn.DriftFactory_swiginit(self, _gstlearn.new_DriftFactory())
    __swig_destroy__ = _gstlearn.delete_DriftFactory

# Register DriftFactory in _gstlearn:
_gstlearn.DriftFactory_swigregister(DriftFactory)

def DriftFactory_createDriftFunc(type: "EDrift", ctxt: "CovContext") -> "ADriftElem *":
    return _gstlearn.DriftFactory_createDriftFunc(type, ctxt)

def DriftFactory_duplicateDriftFunc(cov: "ADriftElem") -> "ADriftElem *":
    return _gstlearn.DriftFactory_duplicateDriftFunc(cov)

def DriftFactory_displayList(ctxt: "CovContext") -> "void":
    return _gstlearn.DriftFactory_displayList(ctxt)

def DriftFactory_identifyDrift(symbol: "String const &", rank: "int *", ctxt: "CovContext") -> "EDrift":
    return _gstlearn.DriftFactory_identifyDrift(symbol, rank, ctxt)

class DriftX(ADriftElem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftX_swiginit(self, _gstlearn.new_DriftX(*args))
    __swig_destroy__ = _gstlearn.delete_DriftX

    def clone(self) -> "IClonable *":
        return _gstlearn.DriftX_clone(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.DriftX_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.DriftX_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.DriftX_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.DriftX_eval(self, db, iech)

# Register DriftX in _gstlearn:
_gstlearn.DriftX_swigregister(DriftX)

class DriftX2(ADriftElem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftX2_swiginit(self, _gstlearn.new_DriftX2(*args))
    __swig_destroy__ = _gstlearn.delete_DriftX2

    def clone(self) -> "IClonable *":
        return _gstlearn.DriftX2_clone(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.DriftX2_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.DriftX2_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.DriftX2_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.DriftX2_eval(self, db, iech)

# Register DriftX2 in _gstlearn:
_gstlearn.DriftX2_swigregister(DriftX2)

class DriftX2Y(ADriftElem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftX2Y_swiginit(self, _gstlearn.new_DriftX2Y(*args))
    __swig_destroy__ = _gstlearn.delete_DriftX2Y

    def clone(self) -> "IClonable *":
        return _gstlearn.DriftX2Y_clone(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.DriftX2Y_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.DriftX2Y_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.DriftX2Y_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.DriftX2Y_eval(self, db, iech)

# Register DriftX2Y in _gstlearn:
_gstlearn.DriftX2Y_swigregister(DriftX2Y)

class DriftX3(ADriftElem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftX3_swiginit(self, _gstlearn.new_DriftX3(*args))
    __swig_destroy__ = _gstlearn.delete_DriftX3

    def clone(self) -> "IClonable *":
        return _gstlearn.DriftX3_clone(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.DriftX3_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.DriftX3_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.DriftX3_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.DriftX3_eval(self, db, iech)

# Register DriftX3 in _gstlearn:
_gstlearn.DriftX3_swigregister(DriftX3)

class DriftXY(ADriftElem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftXY_swiginit(self, _gstlearn.new_DriftXY(*args))
    __swig_destroy__ = _gstlearn.delete_DriftXY

    def clone(self) -> "IClonable *":
        return _gstlearn.DriftXY_clone(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.DriftXY_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.DriftXY_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.DriftXY_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.DriftXY_eval(self, db, iech)

# Register DriftXY in _gstlearn:
_gstlearn.DriftXY_swigregister(DriftXY)

class DriftXY2(ADriftElem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftXY2_swiginit(self, _gstlearn.new_DriftXY2(*args))
    __swig_destroy__ = _gstlearn.delete_DriftXY2

    def clone(self) -> "IClonable *":
        return _gstlearn.DriftXY2_clone(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.DriftXY2_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.DriftXY2_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.DriftXY2_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.DriftXY2_eval(self, db, iech)

# Register DriftXY2 in _gstlearn:
_gstlearn.DriftXY2_swigregister(DriftXY2)

class DriftXZ(ADriftElem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftXZ_swiginit(self, _gstlearn.new_DriftXZ(*args))
    __swig_destroy__ = _gstlearn.delete_DriftXZ

    def clone(self) -> "IClonable *":
        return _gstlearn.DriftXZ_clone(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.DriftXZ_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.DriftXZ_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.DriftXZ_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.DriftXZ_eval(self, db, iech)

# Register DriftXZ in _gstlearn:
_gstlearn.DriftXZ_swigregister(DriftXZ)

class DriftY(ADriftElem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftY_swiginit(self, _gstlearn.new_DriftY(*args))
    __swig_destroy__ = _gstlearn.delete_DriftY

    def clone(self) -> "IClonable *":
        return _gstlearn.DriftY_clone(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.DriftY_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.DriftY_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.DriftY_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.DriftY_eval(self, db, iech)

# Register DriftY in _gstlearn:
_gstlearn.DriftY_swigregister(DriftY)

class DriftY2(ADriftElem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftY2_swiginit(self, _gstlearn.new_DriftY2(*args))
    __swig_destroy__ = _gstlearn.delete_DriftY2

    def clone(self) -> "IClonable *":
        return _gstlearn.DriftY2_clone(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.DriftY2_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.DriftY2_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.DriftY2_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.DriftY2_eval(self, db, iech)

# Register DriftY2 in _gstlearn:
_gstlearn.DriftY2_swigregister(DriftY2)

class DriftY3(ADriftElem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftY3_swiginit(self, _gstlearn.new_DriftY3(*args))
    __swig_destroy__ = _gstlearn.delete_DriftY3

    def clone(self) -> "IClonable *":
        return _gstlearn.DriftY3_clone(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.DriftY3_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.DriftY3_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.DriftY3_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.DriftY3_eval(self, db, iech)

# Register DriftY3 in _gstlearn:
_gstlearn.DriftY3_swigregister(DriftY3)

class DriftYZ(ADriftElem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftYZ_swiginit(self, _gstlearn.new_DriftYZ(*args))
    __swig_destroy__ = _gstlearn.delete_DriftYZ

    def clone(self) -> "IClonable *":
        return _gstlearn.DriftYZ_clone(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.DriftYZ_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.DriftYZ_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.DriftYZ_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.DriftYZ_eval(self, db, iech)

# Register DriftYZ in _gstlearn:
_gstlearn.DriftYZ_swigregister(DriftYZ)

class DriftZ(ADriftElem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftZ_swiginit(self, _gstlearn.new_DriftZ(*args))
    __swig_destroy__ = _gstlearn.delete_DriftZ

    def clone(self) -> "IClonable *":
        return _gstlearn.DriftZ_clone(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.DriftZ_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.DriftZ_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.DriftZ_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.DriftZ_eval(self, db, iech)

# Register DriftZ in _gstlearn:
_gstlearn.DriftZ_swigregister(DriftZ)

class DriftZ2(ADriftElem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftZ2_swiginit(self, _gstlearn.new_DriftZ2(*args))
    __swig_destroy__ = _gstlearn.delete_DriftZ2

    def clone(self) -> "IClonable *":
        return _gstlearn.DriftZ2_clone(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.DriftZ2_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.DriftZ2_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.DriftZ2_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.DriftZ2_eval(self, db, iech)

# Register DriftZ2 in _gstlearn:
_gstlearn.DriftZ2_swigregister(DriftZ2)

class DriftZ3(ADriftElem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftZ3_swiginit(self, _gstlearn.new_DriftZ3(*args))
    __swig_destroy__ = _gstlearn.delete_DriftZ3

    def clone(self) -> "IClonable *":
        return _gstlearn.DriftZ3_clone(self)

    def getDriftSymbol(self) -> "String":
        return _gstlearn.DriftZ3_getDriftSymbol(self)

    def getDriftName(self) -> "String":
        return _gstlearn.DriftZ3_getDriftName(self)

    def getOrderIRF(self) -> "int":
        return _gstlearn.DriftZ3_getOrderIRF(self)

    def eval(self, db: "Db", iech: "int") -> "double":
        return _gstlearn.DriftZ3_eval(self, db, iech)

# Register DriftZ3 in _gstlearn:
_gstlearn.DriftZ3_swigregister(DriftZ3)

class EDriftIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EDriftIterator

    def __init__(self, arg2: "EDriftIterator"):
        _gstlearn.EDriftIterator_swiginit(self, _gstlearn.new_EDriftIterator(arg2))

    def __ref__(self) -> "EDrift const &":
        return _gstlearn.EDriftIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.EDriftIterator_hasNext(self)

    def toNext(self) -> "EDrift const &":
        return _gstlearn.EDriftIterator_toNext(self)

    def toFront(self) -> "EDrift const &":
        return _gstlearn.EDriftIterator_toFront(self)

    def getEnum(self) -> "EDrift const &":
        return _gstlearn.EDriftIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.EDriftIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.EDriftIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.EDriftIterator_getDescr(self)

# Register EDriftIterator in _gstlearn:
_gstlearn.EDriftIterator_swigregister(EDriftIterator)

class EDrift(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EDrift

    def __init__(self, *args):
        _gstlearn.EDrift_swiginit(self, _gstlearn.new_EDrift(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.EDrift_getSize()

    @staticmethod
    def getIterator() -> "EDriftIterator":
        return _gstlearn.EDrift_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.EDrift_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.EDrift_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "EDrift const &":
        return _gstlearn.EDrift_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "EDrift const &":
        return _gstlearn.EDrift_fromValue(value)
    E_UNKNOWN = _gstlearn.EDrift_E_UNKNOWN
    E_UC = _gstlearn.EDrift_E_UC
    E_X = _gstlearn.EDrift_E_X
    E_Y = _gstlearn.EDrift_E_Y
    E_Z = _gstlearn.EDrift_E_Z
    E_X2 = _gstlearn.EDrift_E_X2
    E_Y2 = _gstlearn.EDrift_E_Y2
    E_XY = _gstlearn.EDrift_E_XY
    E_Z2 = _gstlearn.EDrift_E_Z2
    E_XZ = _gstlearn.EDrift_E_XZ
    E_YZ = _gstlearn.EDrift_E_YZ
    E_X3 = _gstlearn.EDrift_E_X3
    E_X2Y = _gstlearn.EDrift_E_X2Y
    E_XY2 = _gstlearn.EDrift_E_XY2
    E_Y3 = _gstlearn.EDrift_E_Y3
    E_Z3 = _gstlearn.EDrift_E_Z3
    E_F = _gstlearn.EDrift_E_F

    def toEnum(self) -> "EDrift::EEDrift":
        return _gstlearn.EDrift_toEnum(self)

# Register EDrift in _gstlearn:
_gstlearn.EDrift_swigregister(EDrift)

def EDrift_getSize() -> "size_t":
    return _gstlearn.EDrift_getSize()

def EDrift_getIterator() -> "EDriftIterator":
    return _gstlearn.EDrift_getIterator()

def EDrift_existsKey(key: "String const &") -> "bool":
    return _gstlearn.EDrift_existsKey(key)

def EDrift_existsValue(value: "int") -> "bool":
    return _gstlearn.EDrift_existsValue(value)

def EDrift_fromKey(key: "String const &") -> "EDrift const &":
    return _gstlearn.EDrift_fromKey(key)

def EDrift_fromValue(value: "int") -> "EDrift const &":
    return _gstlearn.EDrift_fromValue(value)
EDrift.UNKNOWN = _gstlearn.cvar.EDrift_UNKNOWN
EDrift.UC = _gstlearn.cvar.EDrift_UC
EDrift.X = _gstlearn.cvar.EDrift_X
EDrift.Y = _gstlearn.cvar.EDrift_Y
EDrift.Z = _gstlearn.cvar.EDrift_Z
EDrift.X2 = _gstlearn.cvar.EDrift_X2
EDrift.Y2 = _gstlearn.cvar.EDrift_Y2
EDrift.XY = _gstlearn.cvar.EDrift_XY
EDrift.Z2 = _gstlearn.cvar.EDrift_Z2
EDrift.XZ = _gstlearn.cvar.EDrift_XZ
EDrift.YZ = _gstlearn.cvar.EDrift_YZ
EDrift.X3 = _gstlearn.cvar.EDrift_X3
EDrift.X2Y = _gstlearn.cvar.EDrift_X2Y
EDrift.XY2 = _gstlearn.cvar.EDrift_XY2
EDrift.Y3 = _gstlearn.cvar.EDrift_Y3
EDrift.Z3 = _gstlearn.cvar.EDrift_Z3
EDrift.F = _gstlearn.cvar.EDrift_F

class cs_Output(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rows = property(_gstlearn.cs_Output_rows_get, _gstlearn.cs_Output_rows_set)
    cols = property(_gstlearn.cs_Output_cols_get, _gstlearn.cs_Output_cols_set)
    values = property(_gstlearn.cs_Output_values_get, _gstlearn.cs_Output_values_set)

    def __init__(self):
        _gstlearn.cs_Output_swiginit(self, _gstlearn.new_cs_Output())
    __swig_destroy__ = _gstlearn.delete_cs_Output

# Register cs_Output in _gstlearn:
_gstlearn.cs_Output_swigregister(cs_Output)

class AMatrix(AStringable, IClonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_AMatrix

    def init(self, nrows: "int", ncols: "int", sparse: "bool"=False) -> "void":
        return _gstlearn.AMatrix_init(self, nrows, ncols, sparse)

    def getNRows(self) -> "int":
        return _gstlearn.AMatrix_getNRows(self)

    def getNCols(self) -> "int":
        return _gstlearn.AMatrix_getNCols(self)

    def getNTotal(self) -> "int":
        return _gstlearn.AMatrix_getNTotal(self)

    def getValue(self, *args) -> "double":
        return _gstlearn.AMatrix_getValue(self, *args)

    def getValueRef(self, irow: "int", icol: "int") -> "double &":
        return _gstlearn.AMatrix_getValueRef(self, irow, icol)

    def getValues(self) -> "VectorDouble":
        return _gstlearn.AMatrix_getValues(self)

    def getValuesAsTriplets(self, flag_from_1: "bool"=True) -> "cs_Output":
        return _gstlearn.AMatrix_getValuesAsTriplets(self, flag_from_1)

    def getDiagonal(self, shift: "int"=0) -> "VectorDouble":
        return _gstlearn.AMatrix_getDiagonal(self, shift)

    def getRow(self, irow: "int") -> "VectorDouble":
        return _gstlearn.AMatrix_getRow(self, irow)

    def getColumn(self, icol: "int") -> "VectorDouble":
        return _gstlearn.AMatrix_getColumn(self, icol)

    def add(self, tab: "AMatrix", value: "double"=1.) -> "void":
        return _gstlearn.AMatrix_add(self, tab, value)

    def subtract(self, tab: "AMatrix", value: "double"=1.) -> "void":
        return _gstlearn.AMatrix_subtract(self, tab, value)

    def setColumn(self, icol: "int", tab: "VectorDouble") -> "void":
        return _gstlearn.AMatrix_setColumn(self, icol, tab)

    def setRow(self, irow: "int", tab: "VectorDouble") -> "void":
        return _gstlearn.AMatrix_setRow(self, irow, tab)

    def setDiagonal(self, *args) -> "void":
        return _gstlearn.AMatrix_setDiagonal(self, *args)

    def isSameSize(self, m: "AMatrix") -> "bool":
        return _gstlearn.AMatrix_isSameSize(self, m)

    def isSparse(self) -> "bool":
        return _gstlearn.AMatrix_isSparse(self)

    def isEmpty(self) -> "bool":
        return _gstlearn.AMatrix_isEmpty(self)

    def isSquare(self, printWhyNot: "bool"=False) -> "bool":
        return _gstlearn.AMatrix_isSquare(self, printWhyNot)

    def isValid(self, irow: "int", icol: "int", printWhyNot: "bool"=False) -> "bool":
        return _gstlearn.AMatrix_isValid(self, irow, icol, printWhyNot)

    def isIdentity(self, printWhyNot: "bool"=False) -> "bool":
        return _gstlearn.AMatrix_isIdentity(self, printWhyNot)

    def isSymmetric(self, printWhyNot: "bool"=False) -> "bool":
        return _gstlearn.AMatrix_isSymmetric(self, printWhyNot)

    def isDiagonal(self, printWhyNot: "bool"=False) -> "bool":
        return _gstlearn.AMatrix_isDiagonal(self, printWhyNot)

    def isDiagCst(self, printWhyNot: "bool"=False) -> "bool":
        return _gstlearn.AMatrix_isDiagCst(self, printWhyNot)

    def mustBeSymmetric(self) -> "bool":
        return _gstlearn.AMatrix_mustBeSymmetric(self)

    def mustBeDiagonal(self) -> "bool":
        return _gstlearn.AMatrix_mustBeDiagonal(self)

    def mustBeDiagCst(self) -> "bool":
        return _gstlearn.AMatrix_mustBeDiagCst(self)

    def isSame(self, m: "AMatrix", eps: "double"=1.e-10) -> "bool":
        return _gstlearn.AMatrix_isSame(self, m, eps)

    def reset(self, *args) -> "void":
        return _gstlearn.AMatrix_reset(self, *args)

    def compare(self, mat: "AMatrix") -> "double":
        return _gstlearn.AMatrix_compare(self, mat)

    def toSparseInPlace(self) -> "void":
        return _gstlearn.AMatrix_toSparseInPlace(self)

    def toSparse(self) -> "AMatrix *":
        return _gstlearn.AMatrix_toSparse(self)

    def transposeInPlace(self) -> "void":
        return _gstlearn.AMatrix_transposeInPlace(self)

    def transpose(self) -> "AMatrix *":
        return _gstlearn.AMatrix_transpose(self)

    def addScalar(self, v: "double") -> "void":
        return _gstlearn.AMatrix_addScalar(self, v)

    def addScalarDiag(self, v: "double") -> "void":
        return _gstlearn.AMatrix_addScalarDiag(self, v)

    def prodScalar(self, v: "double") -> "void":
        return _gstlearn.AMatrix_prodScalar(self, v)

    def prodVector(self, *args) -> "void":
        return _gstlearn.AMatrix_prodVector(self, *args)

    def multiplyRow(self, vec: "VectorDouble") -> "void":
        return _gstlearn.AMatrix_multiplyRow(self, vec)

    def multiplyColumn(self, vec: "VectorDouble") -> "void":
        return _gstlearn.AMatrix_multiplyColumn(self, vec)

    def divideRow(self, vec: "VectorDouble") -> "void":
        return _gstlearn.AMatrix_divideRow(self, vec)

    def divideColumn(self, vec: "VectorDouble") -> "void":
        return _gstlearn.AMatrix_divideColumn(self, vec)

    def addMatrix(self, y: "AMatrix") -> "void":
        return _gstlearn.AMatrix_addMatrix(self, y)

    def prodMatrix(self, x: "AMatrix", y: "AMatrix") -> "void":
        return _gstlearn.AMatrix_prodMatrix(self, x, y)

    def linearCombination(self, cx: "double", cy: "double", y: "AMatrix") -> "void":
        return _gstlearn.AMatrix_linearCombination(self, cx, cy, y)

    def invert(self) -> "int":
        return _gstlearn.AMatrix_invert(self)

    def solve(self, b: "VectorDouble", x: "VectorDouble") -> "int":
        return _gstlearn.AMatrix_solve(self, b, x)

    def determinant(self) -> "double":
        return _gstlearn.AMatrix_determinant(self)

    def dumpElements(self, title: "String const &", ifrom: "int", ito: "int") -> "void":
        return _gstlearn.AMatrix_dumpElements(self, title, ifrom, ito)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.AMatrix_toString(self, strfmt)

    def setValue(self, *args) -> "void":
        return _gstlearn.AMatrix_setValue(self, *args)

    def setIdentity(self, value: "double"=1.) -> "void":
        return _gstlearn.AMatrix_setIdentity(self, value)

    def fill(self, value: "double") -> "void":
        return _gstlearn.AMatrix_fill(self, value)

    def fillRandom(self, seed: "int"=432432, zeroPercent: "double"=0.1) -> "void":
        return _gstlearn.AMatrix_fillRandom(self, seed, zeroPercent)

    def setValues(self, *args) -> "void":
        return _gstlearn.AMatrix_setValues(self, *args)

# Register AMatrix in _gstlearn:
_gstlearn.AMatrix_swigregister(AMatrix)


def createIdentity(nrow: "int", sparse: "bool") -> "AMatrix *":
    return _gstlearn.createIdentity(nrow, sparse)

def transpose(mat: "AMatrix") -> "AMatrix *":
    return _gstlearn.transpose(mat)

def prodMatrix(mat1: "AMatrix", mat2: "AMatrix") -> "AMatrix *":
    return _gstlearn.prodMatrix(mat1, mat2)
class AMatrixSquare(AMatrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_AMatrixSquare

    def getNSize(self) -> "int":
        return _gstlearn.AMatrixSquare_getNSize(self)

    def normMatrix(self, x: "AMatrixSquare", y: "AMatrix") -> "void":
        return _gstlearn.AMatrixSquare_normMatrix(self, x, y)

    def innerMatrix(self, x: "AMatrixSquare", r1: "AMatrix", r2: "AMatrix") -> "void":
        return _gstlearn.AMatrixSquare_innerMatrix(self, x, r1, r2)

    def prodDiagByVector(self, diag: "VectorDouble") -> "void":
        return _gstlearn.AMatrixSquare_prodDiagByVector(self, diag)

    def divideDiagByVector(self, diag: "VectorDouble") -> "void":
        return _gstlearn.AMatrixSquare_divideDiagByVector(self, diag)

    def _determinant(self) -> "double":
        return _gstlearn.AMatrixSquare__determinant(self)

# Register AMatrixSquare in _gstlearn:
_gstlearn.AMatrixSquare_swigregister(AMatrixSquare)

class MatrixRectangular(AMatrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.MatrixRectangular_swiginit(self, _gstlearn.new_MatrixRectangular(*args))
    __swig_destroy__ = _gstlearn.delete_MatrixRectangular

    def clone(self) -> "IClonable *":
        return _gstlearn.MatrixRectangular_clone(self)

    def mustBeSymmetric(self) -> "bool":
        return _gstlearn.MatrixRectangular_mustBeSymmetric(self)

    def mustBeDiagonal(self) -> "bool":
        return _gstlearn.MatrixRectangular_mustBeDiagonal(self)

    def mustBeDiagCst(self) -> "bool":
        return _gstlearn.MatrixRectangular_mustBeDiagCst(self)

# Register MatrixRectangular in _gstlearn:
_gstlearn.MatrixRectangular_swigregister(MatrixRectangular)

class MatrixSquareDiagonal(AMatrixSquare):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.MatrixSquareDiagonal_swiginit(self, _gstlearn.new_MatrixSquareDiagonal(*args))
    __swig_destroy__ = _gstlearn.delete_MatrixSquareDiagonal

    def clone(self) -> "IClonable *":
        return _gstlearn.MatrixSquareDiagonal_clone(self)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.MatrixSquareDiagonal_toString(self, strfmt)

    def transposeInPlace(self) -> "void":
        return _gstlearn.MatrixSquareDiagonal_transposeInPlace(self)

    def isValid(self, irow: "int", icol: "int", printWhyNot: "bool"=False) -> "bool":
        return _gstlearn.MatrixSquareDiagonal_isValid(self, irow, icol, printWhyNot)

    def isSymmetric(self, arg2: "bool"=False) -> "bool":
        return _gstlearn.MatrixSquareDiagonal_isSymmetric(self, arg2)

    def isDiagonal(self, arg2: "bool"=False) -> "bool":
        return _gstlearn.MatrixSquareDiagonal_isDiagonal(self, arg2)

    def addScalar(self, v: "double") -> "void":
        return _gstlearn.MatrixSquareDiagonal_addScalar(self, v)

    def setColumn(self, icol: "int", tab: "VectorDouble") -> "void":
        return _gstlearn.MatrixSquareDiagonal_setColumn(self, icol, tab)

    def setRow(self, irow: "int", tab: "VectorDouble") -> "void":
        return _gstlearn.MatrixSquareDiagonal_setRow(self, irow, tab)

# Register MatrixSquareDiagonal in _gstlearn:
_gstlearn.MatrixSquareDiagonal_swigregister(MatrixSquareDiagonal)

class MatrixSquareDiagonalCst(AMatrixSquare):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.MatrixSquareDiagonalCst_swiginit(self, _gstlearn.new_MatrixSquareDiagonalCst(*args))
    __swig_destroy__ = _gstlearn.delete_MatrixSquareDiagonalCst

    def clone(self) -> "IClonable *":
        return _gstlearn.MatrixSquareDiagonalCst_clone(self)

    def mustBeSymmetric(self) -> "bool":
        return _gstlearn.MatrixSquareDiagonalCst_mustBeSymmetric(self)

    def mustBeDiagonal(self) -> "bool":
        return _gstlearn.MatrixSquareDiagonalCst_mustBeDiagonal(self)

    def mustBeDiagCst(self) -> "bool":
        return _gstlearn.MatrixSquareDiagonalCst_mustBeDiagCst(self)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.MatrixSquareDiagonalCst_toString(self, strfmt)

    def transposeInPlace(self) -> "void":
        return _gstlearn.MatrixSquareDiagonalCst_transposeInPlace(self)

    def addScalar(self, v: "double") -> "void":
        return _gstlearn.MatrixSquareDiagonalCst_addScalar(self, v)

    def addScalarDiag(self, v: "double") -> "void":
        return _gstlearn.MatrixSquareDiagonalCst_addScalarDiag(self, v)

    def isValid(self, irow: "int", icol: "int", printWhyNot: "bool"=False) -> "bool":
        return _gstlearn.MatrixSquareDiagonalCst_isValid(self, irow, icol, printWhyNot)

    def isSymmetric(self, arg2: "bool"=False) -> "bool":
        return _gstlearn.MatrixSquareDiagonalCst_isSymmetric(self, arg2)

    def isDiagonal(self, arg2: "bool"=False) -> "bool":
        return _gstlearn.MatrixSquareDiagonalCst_isDiagonal(self, arg2)

    def setColumn(self, icol: "int", tab: "VectorDouble") -> "void":
        return _gstlearn.MatrixSquareDiagonalCst_setColumn(self, icol, tab)

    def setRow(self, irow: "int", tab: "VectorDouble") -> "void":
        return _gstlearn.MatrixSquareDiagonalCst_setRow(self, irow, tab)

    def setDiagonal(self, tab: "VectorDouble") -> "void":
        return _gstlearn.MatrixSquareDiagonalCst_setDiagonal(self, tab)

# Register MatrixSquareDiagonalCst in _gstlearn:
_gstlearn.MatrixSquareDiagonalCst_swigregister(MatrixSquareDiagonalCst)

class MatrixSquareGeneral(AMatrixSquare):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.MatrixSquareGeneral_swiginit(self, _gstlearn.new_MatrixSquareGeneral(*args))
    __swig_destroy__ = _gstlearn.delete_MatrixSquareGeneral

    def clone(self) -> "IClonable *":
        return _gstlearn.MatrixSquareGeneral_clone(self)

    def mustBeSymmetric(self) -> "bool":
        return _gstlearn.MatrixSquareGeneral_mustBeSymmetric(self)

    def mustBeDiagonal(self) -> "bool":
        return _gstlearn.MatrixSquareGeneral_mustBeDiagonal(self)

    def mustBeDiagCst(self) -> "bool":
        return _gstlearn.MatrixSquareGeneral_mustBeDiagCst(self)

    def isSquare(self, arg2: "bool"=False) -> "bool":
        return _gstlearn.MatrixSquareGeneral_isSquare(self, arg2)

# Register MatrixSquareGeneral in _gstlearn:
_gstlearn.MatrixSquareGeneral_swigregister(MatrixSquareGeneral)

class MatrixSquareSymmetric(AMatrixSquare):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.MatrixSquareSymmetric_swiginit(self, _gstlearn.new_MatrixSquareSymmetric(*args))
    __swig_destroy__ = _gstlearn.delete_MatrixSquareSymmetric

    def clone(self) -> "IClonable *":
        return _gstlearn.MatrixSquareSymmetric_clone(self)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.MatrixSquareSymmetric_toString(self, strfmt)

    def mustBeSymmetric(self) -> "bool":
        return _gstlearn.MatrixSquareSymmetric_mustBeSymmetric(self)

    def mustBeDiagonal(self) -> "bool":
        return _gstlearn.MatrixSquareSymmetric_mustBeDiagonal(self)

    def mustBeDiagCst(self) -> "bool":
        return _gstlearn.MatrixSquareSymmetric_mustBeDiagCst(self)

    def isSymmetric(self, arg2: "bool"=False) -> "bool":
        return _gstlearn.MatrixSquareSymmetric_isSymmetric(self, arg2)

    def initMatTri(self, nsize: "int", tab: "double *") -> "void":
        return _gstlearn.MatrixSquareSymmetric_initMatTri(self, nsize, tab)

# Register MatrixSquareSymmetric in _gstlearn:
_gstlearn.MatrixSquareSymmetric_swigregister(MatrixSquareSymmetric)

class SPDE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.SPDE_swiginit(self, _gstlearn.new_SPDE(*args))
    __swig_destroy__ = _gstlearn.delete_SPDE

    def init(self, *args, **kwargs) -> "void":
        return _gstlearn.SPDE_init(self, *args, **kwargs)

    def compute(self, nbsimus: "int"=1, seed: "int"=131323) -> "void":
        return _gstlearn.SPDE_compute(self, nbsimus, seed)

    def computeKriging(self) -> "void":
        return _gstlearn.SPDE_computeKriging(self)

    def computeSimuNonCond(self, nbsimus: "int"=1, seed: "int"=131323) -> "void":
        return _gstlearn.SPDE_computeSimuNonCond(self, nbsimus, seed)

    def computeSimuCond(self, nbsimus: "int"=1, seed: "int"=131323) -> "void":
        return _gstlearn.SPDE_computeSimuCond(self, nbsimus, seed)

    def getCoeffs(self) -> "VectorDouble":
        return _gstlearn.SPDE_getCoeffs(self)

    def query(self, *args, **kwargs) -> "int":
        return _gstlearn.SPDE_query(self, *args, **kwargs)

# Register SPDE in _gstlearn:
_gstlearn.SPDE_swigregister(SPDE)

class PGSSPDE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, models: "std::vector< Model *,std::allocator< Model * > >", field: "DbGrid", ruleprop: "RuleProp", dat: "Db"=None):
        _gstlearn.PGSSPDE_swiginit(self, _gstlearn.new_PGSSPDE(models, field, ruleprop, dat))
    __swig_destroy__ = _gstlearn.delete_PGSSPDE

    def simulate(self, seed: "int"=32145, nitergibbs: "int"=0) -> "void":
        return _gstlearn.PGSSPDE_simulate(self, seed, nitergibbs)

    def simulateNonCond(self, seed: "int"=32145) -> "void":
        return _gstlearn.PGSSPDE_simulateNonCond(self, seed)

    def gibbs(self, niter: "int") -> "void":
        return _gstlearn.PGSSPDE_gibbs(self, niter)

    def query(self, db: "Db", keepGauss: "bool"=False) -> "void":
        return _gstlearn.PGSSPDE_query(self, db, keepGauss)

# Register PGSSPDE in _gstlearn:
_gstlearn.PGSSPDE_swigregister(PGSSPDE)

class ESPDECalcModeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ESPDECalcModeIterator

    def __init__(self, arg2: "ESPDECalcModeIterator"):
        _gstlearn.ESPDECalcModeIterator_swiginit(self, _gstlearn.new_ESPDECalcModeIterator(arg2))

    def __ref__(self) -> "ESPDECalcMode const &":
        return _gstlearn.ESPDECalcModeIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.ESPDECalcModeIterator_hasNext(self)

    def toNext(self) -> "ESPDECalcMode const &":
        return _gstlearn.ESPDECalcModeIterator_toNext(self)

    def toFront(self) -> "ESPDECalcMode const &":
        return _gstlearn.ESPDECalcModeIterator_toFront(self)

    def getEnum(self) -> "ESPDECalcMode const &":
        return _gstlearn.ESPDECalcModeIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.ESPDECalcModeIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.ESPDECalcModeIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.ESPDECalcModeIterator_getDescr(self)

# Register ESPDECalcModeIterator in _gstlearn:
_gstlearn.ESPDECalcModeIterator_swigregister(ESPDECalcModeIterator)

class ESPDECalcMode(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ESPDECalcMode

    def __init__(self, *args):
        _gstlearn.ESPDECalcMode_swiginit(self, _gstlearn.new_ESPDECalcMode(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.ESPDECalcMode_getSize()

    @staticmethod
    def getIterator() -> "ESPDECalcModeIterator":
        return _gstlearn.ESPDECalcMode_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.ESPDECalcMode_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.ESPDECalcMode_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "ESPDECalcMode const &":
        return _gstlearn.ESPDECalcMode_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "ESPDECalcMode const &":
        return _gstlearn.ESPDECalcMode_fromValue(value)
    E_KRIGING = _gstlearn.ESPDECalcMode_E_KRIGING
    E_SIMUCOND = _gstlearn.ESPDECalcMode_E_SIMUCOND
    E_SIMUNONCOND = _gstlearn.ESPDECalcMode_E_SIMUNONCOND

    def toEnum(self) -> "ESPDECalcMode::EESPDECalcMode":
        return _gstlearn.ESPDECalcMode_toEnum(self)

# Register ESPDECalcMode in _gstlearn:
_gstlearn.ESPDECalcMode_swigregister(ESPDECalcMode)

def ESPDECalcMode_getSize() -> "size_t":
    return _gstlearn.ESPDECalcMode_getSize()

def ESPDECalcMode_getIterator() -> "ESPDECalcModeIterator":
    return _gstlearn.ESPDECalcMode_getIterator()

def ESPDECalcMode_existsKey(key: "String const &") -> "bool":
    return _gstlearn.ESPDECalcMode_existsKey(key)

def ESPDECalcMode_existsValue(value: "int") -> "bool":
    return _gstlearn.ESPDECalcMode_existsValue(value)

def ESPDECalcMode_fromKey(key: "String const &") -> "ESPDECalcMode const &":
    return _gstlearn.ESPDECalcMode_fromKey(key)

def ESPDECalcMode_fromValue(value: "int") -> "ESPDECalcMode const &":
    return _gstlearn.ESPDECalcMode_fromValue(value)
ESPDECalcMode.KRIGING = _gstlearn.cvar.ESPDECalcMode_KRIGING
ESPDECalcMode.SIMUCOND = _gstlearn.cvar.ESPDECalcMode_SIMUCOND
ESPDECalcMode.SIMUNONCOND = _gstlearn.cvar.ESPDECalcMode_SIMUNONCOND

class Db(AStringable, ASerializable, IClonable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Db_swiginit(self, _gstlearn.new_Db(*args))
    __swig_destroy__ = _gstlearn.delete_Db

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.Db_toString(self, strfmt)

    def clone(self) -> "IClonable *":
        return _gstlearn.Db_clone(self)

    def isGrid(self) -> "bool":
        return _gstlearn.Db_isGrid(self)

    def getCoordinate(self, iech: "int", idim: "int", flag_rotate: "bool"=True) -> "double":
        return _gstlearn.Db_getCoordinate(self, iech, idim, flag_rotate)

    def getUnit(self, idim: "int"=0) -> "double":
        return _gstlearn.Db_getUnit(self, idim)

    def getNDim(self) -> "int":
        return _gstlearn.Db_getNDim(self)

    def mayChangeSampleNumber(self) -> "bool":
        return _gstlearn.Db_mayChangeSampleNumber(self)

    def dumpToNF(self, neutralFilename: "String const &", verbose: "bool"=False) -> "int":
        return _gstlearn.Db_dumpToNF(self, neutralFilename, verbose)

    @staticmethod
    def createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "Db *":
        return _gstlearn.Db_createFromNF(neutralFilename, verbose)

    def resetFromSamples(self, *args, **kwargs) -> "int":
        return _gstlearn.Db_resetFromSamples(self, *args, **kwargs)

    def resetFromCSV(self, filename: "String const &", verbose: "bool", csvfmt: "CSVformat", ncol_max: "int"=-1, nrow_max: "int"=-1, flag_add_rank: "int"=1) -> "int":
        return _gstlearn.Db_resetFromCSV(self, filename, verbose, csvfmt, ncol_max, nrow_max, flag_add_rank)

    def resetFromBox(self, nech: "int", coormin: "VectorDouble", coormax: "VectorDouble", ndim: "int"=2, seed: "int"=321415, flag_add_rank: "int"=1) -> "int":
        return _gstlearn.Db_resetFromBox(self, nech, coormin, coormax, ndim, seed, flag_add_rank)

    def resetFromOnePoint(self, tab: "VectorDouble", flag_add_rank: "int"=1) -> "int":
        return _gstlearn.Db_resetFromOnePoint(self, tab, flag_add_rank)

    def resetSamplingDb(self, *args, **kwargs) -> "int":
        return _gstlearn.Db_resetSamplingDb(self, *args, **kwargs)

    @staticmethod
    def create() -> "Db *":
        return _gstlearn.Db_create()

    @staticmethod
    def createFromSamples(*args, **kwargs) -> "Db *":
        return _gstlearn.Db_createFromSamples(*args, **kwargs)

    @staticmethod
    def createFromCSV(filename: "String const &", csv: "CSVformat", verbose: "bool"=False, ncol_max: "int"=-1, nrow_max: "int"=-1, flag_add_rank: "int"=1) -> "Db *":
        return _gstlearn.Db_createFromCSV(filename, csv, verbose, ncol_max, nrow_max, flag_add_rank)

    @staticmethod
    def createFromBox(nech: "int", coormin: "VectorDouble", coormax: "VectorDouble", ndim: "int"=2, seed: "int"=321415, flag_add_rank: "int"=1) -> "Db *":
        return _gstlearn.Db_createFromBox(nech, coormin, coormax, ndim, seed, flag_add_rank)

    @staticmethod
    def createFromOnePoint(tab: "VectorDouble", flag_add_rank: "int"=1) -> "Db *":
        return _gstlearn.Db_createFromOnePoint(tab, flag_add_rank)

    @staticmethod
    def createSamplingDb(*args, **kwargs) -> "Db *":
        return _gstlearn.Db_createSamplingDb(*args, **kwargs)

    def getArrays(self) -> "VectorDouble const &":
        return _gstlearn.Db_getArrays(self)

    def getNameByLocator(self, locatorType: "ELoc", locatorIndex: "int"=0) -> "String":
        return _gstlearn.Db_getNameByLocator(self, locatorType, locatorIndex)

    def getNameByColIdx(self, icol: "int") -> "String":
        return _gstlearn.Db_getNameByColIdx(self, icol)

    def getNameByUID(self, iuid: "int") -> "String":
        return _gstlearn.Db_getNameByUID(self, iuid)

    def getNames(self, *args) -> "VectorString":
        return _gstlearn.Db_getNames(self, *args)

    def getNamesByLocator(self, locatorType: "ELoc") -> "VectorString":
        return _gstlearn.Db_getNamesByLocator(self, locatorType)

    def getNamesByColIdx(self, icols: "VectorInt") -> "VectorString":
        return _gstlearn.Db_getNamesByColIdx(self, icols)

    def getNamesByUID(self, iuids: "VectorInt") -> "VectorString":
        return _gstlearn.Db_getNamesByUID(self, iuids)

    def getAllNames(self) -> "VectorString":
        return _gstlearn.Db_getAllNames(self)

    def setName(self, *args) -> "void":
        return _gstlearn.Db_setName(self, *args)

    def setNameByUID(self, iuid: "int", name: "String const &") -> "void":
        return _gstlearn.Db_setNameByUID(self, iuid, name)

    def setNameByColIdx(self, icol: "int", name: "String const &") -> "void":
        return _gstlearn.Db_setNameByColIdx(self, icol, name)

    def setNameByLocator(self, locatorType: "ELoc", name: "String const &") -> "void":
        return _gstlearn.Db_setNameByLocator(self, locatorType, name)

    def getUIDMaxNumber(self) -> "int":
        return _gstlearn.Db_getUIDMaxNumber(self)

    def getColumnNumber(self) -> "int":
        return _gstlearn.Db_getColumnNumber(self)

    def getColumnSize(self, useSel: "bool"=False) -> "double":
        return _gstlearn.Db_getColumnSize(self, useSel)

    def getSampleNumber(self, useSel: "bool"=False) -> "int":
        return _gstlearn.Db_getSampleNumber(self, useSel)

    def getActiveSampleNumber(self) -> "int":
        return _gstlearn.Db_getActiveSampleNumber(self)

    def expandNameList(self, *args) -> "VectorString":
        return _gstlearn.Db_expandNameList(self, *args)

    def resetDims(self, ncol: "int", nech: "int") -> "void":
        return _gstlearn.Db_resetDims(self, ncol, nech)

    def clearLocators(self, locatorType: "ELoc") -> "void":
        return _gstlearn.Db_clearLocators(self, locatorType)

    def setLocatorByUID(self, *args, **kwargs) -> "void":
        return _gstlearn.Db_setLocatorByUID(self, *args, **kwargs)

    def setLocatorByColIdx(self, *args, **kwargs) -> "void":
        return _gstlearn.Db_setLocatorByColIdx(self, *args, **kwargs)

    def setLocator(self, *args, **kwargs) -> "void":
        return _gstlearn.Db_setLocator(self, *args, **kwargs)

    def setLocators(self, *args, **kwargs) -> "void":
        return _gstlearn.Db_setLocators(self, *args, **kwargs)

    def setLocatorsByUID(self, *args, **kwargs) -> "void":
        return _gstlearn.Db_setLocatorsByUID(self, *args, **kwargs)

    def setLocatorsByColIdx(self, *args, **kwargs) -> "void":
        return _gstlearn.Db_setLocatorsByColIdx(self, *args, **kwargs)

    def addColumns(self, *args, **kwargs) -> "int":
        return _gstlearn.Db_addColumns(self, *args, **kwargs)

    def addColumnsByConstant(self, *args, **kwargs) -> "int":
        return _gstlearn.Db_addColumnsByConstant(self, *args, **kwargs)

    def addSelection(self, *args, **kwargs) -> "int":
        return _gstlearn.Db_addSelection(self, *args, **kwargs)

    def addSelectionByLimit(self, *args, **kwargs) -> "int":
        return _gstlearn.Db_addSelectionByLimit(self, *args, **kwargs)

    def addSamples(self, nadd: "int", valinit: "double") -> "int":
        return _gstlearn.Db_addSamples(self, nadd, valinit)

    def deleteSample(self, e_del: "int") -> "int":
        return _gstlearn.Db_deleteSample(self, e_del)

    def switchLocator(self, locatorTypein: "ELoc", locatorTypeout: "ELoc") -> "void":
        return _gstlearn.Db_switchLocator(self, locatorTypein, locatorTypeout)

    def getLastUID(self, number: "int"=0) -> "int":
        return _gstlearn.Db_getLastUID(self, number)

    def getLastName(self, number: "int"=0) -> "String":
        return _gstlearn.Db_getLastName(self, number)

    def getColIdx(self, name: "String const &") -> "int":
        return _gstlearn.Db_getColIdx(self, name)

    def getColIdxByUID(self, iuid: "int") -> "int":
        return _gstlearn.Db_getColIdxByUID(self, iuid)

    def getColIdxByLocator(self, locatorType: "ELoc", locatorIndex: "int"=0) -> "int":
        return _gstlearn.Db_getColIdxByLocator(self, locatorType, locatorIndex)

    def getColIdxs(self, *args) -> "VectorInt":
        return _gstlearn.Db_getColIdxs(self, *args)

    def getColIdxsByUID(self, iuids: "VectorInt") -> "VectorInt":
        return _gstlearn.Db_getColIdxsByUID(self, iuids)

    def getColIdxsByLocator(self, locatorType: "ELoc") -> "VectorInt":
        return _gstlearn.Db_getColIdxsByLocator(self, locatorType)

    def setColumn(self, tab: "VectorDouble", name: "String const &", useSel: "bool"=False) -> "void":
        return _gstlearn.Db_setColumn(self, tab, name, useSel)

    def setColumnByUIDOldStyle(self, tab: "double const *", iuid: "int", useSel: "bool"=False) -> "void":
        return _gstlearn.Db_setColumnByUIDOldStyle(self, tab, iuid, useSel)

    def setColumnByUID(self, tab: "VectorDouble", iuid: "int", useSel: "bool"=False) -> "void":
        return _gstlearn.Db_setColumnByUID(self, tab, iuid, useSel)

    def setColumnByColIdx(self, tab: "VectorDouble", icol: "int", useSel: "bool"=False) -> "void":
        return _gstlearn.Db_setColumnByColIdx(self, tab, icol, useSel)

    def setColumnByColIdxOldStyle(self, tab: "double const *", icol: "int", useSel: "bool"=False) -> "void":
        return _gstlearn.Db_setColumnByColIdxOldStyle(self, tab, icol, useSel)

    def duplicateColumnByUID(self, iuid_in: "int", iuid_out: "int") -> "void":
        return _gstlearn.Db_duplicateColumnByUID(self, iuid_in, iuid_out)

    def getColumnsByColIdx(self, *args, **kwargs) -> "VectorDouble":
        return _gstlearn.Db_getColumnsByColIdx(self, *args, **kwargs)

    def getColumnsByColIdxInterval(self, icol_beg: "int", icol_end: "int", useSel: "bool"=False) -> "VectorDouble":
        return _gstlearn.Db_getColumnsByColIdxInterval(self, icol_beg, icol_end, useSel)

    def getLocator(self, name: "String const &", ret_locatorType: "ELoc", ret_locatorIndex: "int *") -> "bool":
        return _gstlearn.Db_getLocator(self, name, ret_locatorType, ret_locatorIndex)

    def getLocatorByColIdx(self, icol: "int", ret_locatorType: "ELoc", ret_locatorIndex: "int *") -> "bool":
        return _gstlearn.Db_getLocatorByColIdx(self, icol, ret_locatorType, ret_locatorIndex)

    def getLocatorByUID(self, iuid: "int", ret_locatorType: "ELoc", ret_locatorIndex: "int *") -> "bool":
        return _gstlearn.Db_getLocatorByUID(self, iuid, ret_locatorType, ret_locatorIndex)

    def getLocators(self, *args, **kwargs) -> "VectorString":
        return _gstlearn.Db_getLocators(self, *args, **kwargs)

    def getLocatorNumber(self, locatorType: "ELoc") -> "int":
        return _gstlearn.Db_getLocatorNumber(self, locatorType)

    def isUIDDefined(self, iuid: "int") -> "bool":
        return _gstlearn.Db_isUIDDefined(self, iuid)

    def getUID(self, name: "String const &") -> "int":
        return _gstlearn.Db_getUID(self, name)

    def getUIDByLocator(self, locatorType: "ELoc", locatorIndex: "int"=0) -> "int":
        return _gstlearn.Db_getUIDByLocator(self, locatorType, locatorIndex)

    def getUIDs(self, names: "VectorString") -> "VectorInt":
        return _gstlearn.Db_getUIDs(self, names)

    def getUIDsByLocator(self, locatorType: "ELoc") -> "VectorInt":
        return _gstlearn.Db_getUIDsByLocator(self, locatorType)

    def getAllUIDs(self) -> "VectorInt":
        return _gstlearn.Db_getAllUIDs(self)

    def getFaciesNumber(self) -> "int":
        return _gstlearn.Db_getFaciesNumber(self)

    def hasLocatorDefined(self, name: "String const &", locatorType: "ELoc", locatorIndex: "int"=0) -> "bool":
        return _gstlearn.Db_hasLocatorDefined(self, name, locatorType, locatorIndex)

    def getSampleCoordinates(self, *args) -> "void":
        return _gstlearn.Db_getSampleCoordinates(self, *args)

    def getSampleLocators(self, locatorType: "ELoc", iech: "int") -> "VectorDouble":
        return _gstlearn.Db_getSampleLocators(self, locatorType, iech)

    def getCoordinatesInPlace(self, iech: "int", coor: "VectorDouble", flag_rotate: "bool"=True) -> "void":
        return _gstlearn.Db_getCoordinatesInPlace(self, iech, coor, flag_rotate)

    def getCoordinates(self, idim: "int", useSel: "bool"=False, flag_rotate: "bool"=True) -> "VectorDouble":
        return _gstlearn.Db_getCoordinates(self, idim, useSel, flag_rotate)

    def getAllCoordinates(self, useSel: "bool"=False) -> "VectorVectorDouble":
        return _gstlearn.Db_getAllCoordinates(self, useSel)

    def setCoordinate(self, iech: "int", idim: "int", value: "double") -> "void":
        return _gstlearn.Db_setCoordinate(self, iech, idim, value)

    def getDistance1D(self, iech: "int", jech: "int", idim: "int", flagAbs: "bool"=False) -> "double":
        return _gstlearn.Db_getDistance1D(self, iech, jech, idim, flagAbs)

    def getDistance(self, iech: "int", jech: "int") -> "double":
        return _gstlearn.Db_getDistance(self, iech, jech)

    def getValue(self, name: "String const &", iech: "int") -> "double":
        return _gstlearn.Db_getValue(self, name, iech)

    def setValue(self, name: "String const &", iech: "int", value: "double") -> "void":
        return _gstlearn.Db_setValue(self, name, iech, value)

    def setArray(self, iech: "int", iuid: "int", value: "double") -> "void":
        return _gstlearn.Db_setArray(self, iech, iuid, value)

    def updArray(self, iech: "int", iuid: "int", oper: "int", value: "double") -> "void":
        return _gstlearn.Db_updArray(self, iech, iuid, oper, value)

    def getArray(self, *args) -> "VectorDouble":
        return _gstlearn.Db_getArray(self, *args)

    def getFromLocatorNumber(self, locatorType: "ELoc") -> "int":
        return _gstlearn.Db_getFromLocatorNumber(self, locatorType)

    def getFromLocator(self, locatorType: "ELoc", iech: "int", locatorIndex: "int"=0) -> "double":
        return _gstlearn.Db_getFromLocator(self, locatorType, iech, locatorIndex)

    def setFromLocator(self, locatorType: "ELoc", iech: "int", locatorIndex: "int", value: "double") -> "void":
        return _gstlearn.Db_setFromLocator(self, locatorType, iech, locatorIndex, value)

    def getByColIdx(self, iech: "int", icol: "int") -> "double":
        return _gstlearn.Db_getByColIdx(self, iech, icol)

    def setByColIdx(self, iech: "int", icol: "int", value: "double") -> "void":
        return _gstlearn.Db_setByColIdx(self, iech, icol, value)

    def getVariableNumber(self) -> "int":
        return _gstlearn.Db_getVariableNumber(self)

    def hasVariable(self) -> "bool":
        return _gstlearn.Db_hasVariable(self)

    def getVariable(self, iech: "int", item: "int") -> "double":
        return _gstlearn.Db_getVariable(self, iech, item)

    def setVariable(self, iech: "int", item: "int", value: "double") -> "void":
        return _gstlearn.Db_setVariable(self, iech, item, value)

    def updVariable(self, iech: "int", item: "int", oper: "int", value: "double") -> "void":
        return _gstlearn.Db_updVariable(self, iech, item, oper, value)

    def isVariableNumberComparedTo(self, nvar: "int", compare: "int"=0) -> "bool":
        return _gstlearn.Db_isVariableNumberComparedTo(self, nvar, compare)

    def isIsotopic(self, iech: "int", nvar_max: "int"=-1) -> "bool":
        return _gstlearn.Db_isIsotopic(self, iech, nvar_max)

    def isAllUndefined(self, iech: "int") -> "bool":
        return _gstlearn.Db_isAllUndefined(self, iech)

    def getLowerIntervalNumber(self) -> "int":
        return _gstlearn.Db_getLowerIntervalNumber(self)

    def hasLowerInterval(self) -> "bool":
        return _gstlearn.Db_hasLowerInterval(self)

    def getLowerInterval(self, iech: "int", item: "int") -> "double":
        return _gstlearn.Db_getLowerInterval(self, iech, item)

    def setLowerInterval(self, iech: "int", item: "int", rklow: "double") -> "void":
        return _gstlearn.Db_setLowerInterval(self, iech, item, rklow)

    def getUpperIntervalNumber(self) -> "int":
        return _gstlearn.Db_getUpperIntervalNumber(self)

    def hasUpperInterval(self) -> "bool":
        return _gstlearn.Db_hasUpperInterval(self)

    def getUpperInterval(self, iech: "int", item: "int") -> "double":
        return _gstlearn.Db_getUpperInterval(self, iech, item)

    def setUpperInterval(self, iech: "int", item: "int", rkup: "double") -> "void":
        return _gstlearn.Db_setUpperInterval(self, iech, item, rkup)

    def setIntervals(self, iech: "int", item: "int", rklow: "double", rkup: "double") -> "void":
        return _gstlearn.Db_setIntervals(self, iech, item, rklow, rkup)

    def getIntervalNumber(self) -> "int":
        return _gstlearn.Db_getIntervalNumber(self)

    def getLowerBoundNumber(self) -> "int":
        return _gstlearn.Db_getLowerBoundNumber(self)

    def hasLowerBound(self) -> "bool":
        return _gstlearn.Db_hasLowerBound(self)

    def getLowerBound(self, iech: "int", item: "int") -> "double":
        return _gstlearn.Db_getLowerBound(self, iech, item)

    def setLowerBound(self, iech: "int", item: "int", lower: "double") -> "void":
        return _gstlearn.Db_setLowerBound(self, iech, item, lower)

    def getUpperBoundNumber(self) -> "int":
        return _gstlearn.Db_getUpperBoundNumber(self)

    def hasUpperBound(self) -> "bool":
        return _gstlearn.Db_hasUpperBound(self)

    def getUpperBound(self, iech: "int", item: "int") -> "double":
        return _gstlearn.Db_getUpperBound(self, iech, item)

    def setUpperBound(self, iech: "int", item: "int", upper: "double") -> "void":
        return _gstlearn.Db_setUpperBound(self, iech, item, upper)

    def setBounds(self, iech: "int", item: "int", lower: "double", upper: "double") -> "void":
        return _gstlearn.Db_setBounds(self, iech, item, lower, upper)

    def getWithinBounds(self, item: "int", useSel: "bool"=False) -> "VectorDouble":
        return _gstlearn.Db_getWithinBounds(self, item, useSel)

    def getGradientNumber(self) -> "int":
        return _gstlearn.Db_getGradientNumber(self)

    def hasGradient(self) -> "bool":
        return _gstlearn.Db_hasGradient(self)

    def getGradient(self, iech: "int", item: "int") -> "double":
        return _gstlearn.Db_getGradient(self, iech, item)

    def setGradient(self, iech: "int", item: "int", value: "double") -> "void":
        return _gstlearn.Db_setGradient(self, iech, item, value)

    def getTangentNumber(self) -> "int":
        return _gstlearn.Db_getTangentNumber(self)

    def hasTangent(self) -> "bool":
        return _gstlearn.Db_hasTangent(self)

    def getTangent(self, iech: "int", item: "int") -> "double":
        return _gstlearn.Db_getTangent(self, iech, item)

    def setTangent(self, iech: "int", item: "int", value: "double") -> "void":
        return _gstlearn.Db_setTangent(self, iech, item, value)

    def getProportionNumber(self) -> "int":
        return _gstlearn.Db_getProportionNumber(self)

    def hasProportion(self) -> "bool":
        return _gstlearn.Db_hasProportion(self)

    def getProportion(self, iech: "int", item: "int") -> "double":
        return _gstlearn.Db_getProportion(self, iech, item)

    def setProportion(self, iech: "int", item: "int", value: "double") -> "void":
        return _gstlearn.Db_setProportion(self, iech, item, value)

    def hasSelection(self) -> "bool":
        return _gstlearn.Db_hasSelection(self)

    def setSelection(self, iech: "int", value: "int") -> "void":
        return _gstlearn.Db_setSelection(self, iech, value)

    def getSelection(self, *args) -> "VectorDouble":
        return _gstlearn.Db_getSelection(self, *args)

    def hasWeight(self) -> "bool":
        return _gstlearn.Db_hasWeight(self)

    def setWeight(self, iech: "int", value: "double") -> "void":
        return _gstlearn.Db_setWeight(self, iech, value)

    def getWeight(self, *args) -> "VectorDouble":
        return _gstlearn.Db_getWeight(self, *args)

    def getExternalDriftNumber(self) -> "int":
        return _gstlearn.Db_getExternalDriftNumber(self)

    def hasExternalDrift(self) -> "bool":
        return _gstlearn.Db_hasExternalDrift(self)

    def getExternalDrift(self, iech: "int", item: "int") -> "double":
        return _gstlearn.Db_getExternalDrift(self, iech, item)

    def setExternalDrift(self, iech: "int", item: "int", value: "double") -> "void":
        return _gstlearn.Db_setExternalDrift(self, iech, item, value)

    def getBlockExtensionNumber(self) -> "int":
        return _gstlearn.Db_getBlockExtensionNumber(self)

    def hasBlockExtension(self) -> "bool":
        return _gstlearn.Db_hasBlockExtension(self)

    def getBlockExtension(self, iech: "int", item: "int") -> "double":
        return _gstlearn.Db_getBlockExtension(self, iech, item)

    def setBlockExtension(self, iech: "int", item: "int", value: "double") -> "void":
        return _gstlearn.Db_setBlockExtension(self, iech, item, value)

    def getCodeNumber(self) -> "int":
        return _gstlearn.Db_getCodeNumber(self)

    def hasCode(self) -> "bool":
        return _gstlearn.Db_hasCode(self)

    def getCode(self, iech: "int") -> "double":
        return _gstlearn.Db_getCode(self, iech)

    def setCode(self, iech: "int", value: "double") -> "void":
        return _gstlearn.Db_setCode(self, iech, value)

    def getCodeList(self) -> "VectorDouble":
        return _gstlearn.Db_getCodeList(self)

    def getVarianceErrorNumber(self) -> "int":
        return _gstlearn.Db_getVarianceErrorNumber(self)

    def hasVarianceError(self) -> "bool":
        return _gstlearn.Db_hasVarianceError(self)

    def getVarianceError(self, iech: "int", item: "int") -> "double":
        return _gstlearn.Db_getVarianceError(self, iech, item)

    def setVarianceError(self, iech: "int", item: "int", value: "double") -> "void":
        return _gstlearn.Db_setVarianceError(self, iech, item, value)

    def hasDomain(self) -> "bool":
        return _gstlearn.Db_hasDomain(self)

    def getDomain(self, iech: "int") -> "int":
        return _gstlearn.Db_getDomain(self, iech)

    def setDomain(self, iech: "int", value: "int") -> "void":
        return _gstlearn.Db_setDomain(self, iech, value)

    def getDipDirectionNumber(self) -> "int":
        return _gstlearn.Db_getDipDirectionNumber(self)

    def hasDipDirection(self) -> "bool":
        return _gstlearn.Db_hasDipDirection(self)

    def getDipDirection(self, iech: "int") -> "double":
        return _gstlearn.Db_getDipDirection(self, iech)

    def setDipDirection(self, iech: "int", value: "double") -> "void":
        return _gstlearn.Db_setDipDirection(self, iech, value)

    def getDipAngleNumber(self) -> "int":
        return _gstlearn.Db_getDipAngleNumber(self)

    def hasDipAngle(self) -> "bool":
        return _gstlearn.Db_hasDipAngle(self)

    def getDipAngle(self, iech: "int") -> "double":
        return _gstlearn.Db_getDipAngle(self, iech)

    def setDipAngle(self, iech: "int", value: "double") -> "void":
        return _gstlearn.Db_setDipAngle(self, iech, value)

    def getObjectSizeNumber(self) -> "int":
        return _gstlearn.Db_getObjectSizeNumber(self)

    def hasObjectSize(self) -> "bool":
        return _gstlearn.Db_hasObjectSize(self)

    def getObjectSize(self, iech: "int") -> "double":
        return _gstlearn.Db_getObjectSize(self, iech)

    def setObjectSize(self, iech: "int", value: "double") -> "void":
        return _gstlearn.Db_setObjectSize(self, iech, value)

    def getBorderUpNumber(self) -> "int":
        return _gstlearn.Db_getBorderUpNumber(self)

    def hasBorderUp(self) -> "bool":
        return _gstlearn.Db_hasBorderUp(self)

    def getBorderUp(self, iech: "int") -> "double":
        return _gstlearn.Db_getBorderUp(self, iech)

    def setBorderUp(self, iech: "int", value: "double") -> "void":
        return _gstlearn.Db_setBorderUp(self, iech, value)

    def getBorderDownNumber(self) -> "int":
        return _gstlearn.Db_getBorderDownNumber(self)

    def hasBorderDown(self) -> "bool":
        return _gstlearn.Db_hasBorderDown(self)

    def getBorderDown(self, iech: "int") -> "double":
        return _gstlearn.Db_getBorderDown(self, iech)

    def setBorderDown(self, iech: "int", value: "double") -> "void":
        return _gstlearn.Db_setBorderDown(self, iech, value)

    def getDateNumber(self) -> "int":
        return _gstlearn.Db_getDateNumber(self)

    def hasDate(self) -> "bool":
        return _gstlearn.Db_hasDate(self)

    def getDate(self, iech: "int") -> "double":
        return _gstlearn.Db_getDate(self, iech)

    def setDate(self, iech: "int", value: "double") -> "void":
        return _gstlearn.Db_setDate(self, iech, value)

    def getSimvarRank(self, isimu: "int", ivar: "int", icase: "int", nbsimu: "int", nvar: "int") -> "int":
        return _gstlearn.Db_getSimvarRank(self, isimu, ivar, icase, nbsimu, nvar)

    def getSimvar(self, locatorType: "ELoc", iech: "int", isimu: "int", ivar: "int", icase: "int", nbsimu: "int", nvar: "int") -> "double":
        return _gstlearn.Db_getSimvar(self, locatorType, iech, isimu, ivar, icase, nbsimu, nvar)

    def setSimvar(self, locatorType: "ELoc", iech: "int", isimu: "int", ivar: "int", icase: "int", nbsimu: "int", nvar: "int", value: "double") -> "void":
        return _gstlearn.Db_setSimvar(self, locatorType, iech, isimu, ivar, icase, nbsimu, nvar, value)

    def updSimvar(self, locatorType: "ELoc", iech: "int", isimu: "int", ivar: "int", icase: "int", nbsimu: "int", nvar: "int", oper: "int", value: "double") -> "void":
        return _gstlearn.Db_updSimvar(self, locatorType, iech, isimu, ivar, icase, nbsimu, nvar, oper, value)

    def isActive(self, iech: "int") -> "bool":
        return _gstlearn.Db_isActive(self, iech)

    def isActiveAndDefined(self, iech: "int", item: "int") -> "bool":
        return _gstlearn.Db_isActiveAndDefined(self, iech, item)

    def getActiveAndDefinedNumber(self, *args) -> "int":
        return _gstlearn.Db_getActiveAndDefinedNumber(self, *args)

    def getSortArray(self) -> "VectorInt":
        return _gstlearn.Db_getSortArray(self)

    def getCosineToDirection(self, iech1: "int", iech2: "int", codir: "VectorDouble") -> "double":
        return _gstlearn.Db_getCosineToDirection(self, iech1, iech2, codir)

    def getColumn(self, name: "String const &", useSel: "bool"=False) -> "VectorDouble":
        return _gstlearn.Db_getColumn(self, name, useSel)

    def getColumnByUID(self, iuid: "int", useSel: "bool"=False) -> "VectorDouble":
        return _gstlearn.Db_getColumnByUID(self, iuid, useSel)

    def getColumnByLocator(self, locatorType: "ELoc", locatorIndex: "int"=0, useSel: "bool"=False) -> "VectorDouble":
        return _gstlearn.Db_getColumnByLocator(self, locatorType, locatorIndex, useSel)

    def getColumnByColIdx(self, icol: "int", useSel: "bool"=False) -> "VectorDouble":
        return _gstlearn.Db_getColumnByColIdx(self, icol, useSel)

    def getAllColumns(self, useSel: "bool"=False) -> "VectorDouble":
        return _gstlearn.Db_getAllColumns(self, useSel)

    def getColumns(self, *args, **kwargs) -> "VectorDouble":
        return _gstlearn.Db_getColumns(self, *args, **kwargs)

    def getColumnsByLocator(self, locatorType: "ELoc", useSel: "bool"=False) -> "VectorDouble":
        return _gstlearn.Db_getColumnsByLocator(self, locatorType, useSel)

    def getColumnsByUID(self, iuids: "VectorInt", useSel: "bool"=False) -> "VectorDouble":
        return _gstlearn.Db_getColumnsByUID(self, iuids, useSel)

    def getColumnsByUIDRange(self, iuid_beg: "int", iuid_end: "int", useSel: "bool"=False) -> "VectorDouble":
        return _gstlearn.Db_getColumnsByUIDRange(self, iuid_beg, iuid_end, useSel)

    def deleteColumn(self, name: "String const &") -> "void":
        return _gstlearn.Db_deleteColumn(self, name)

    def deleteColumnByUID(self, iuid_del: "int") -> "void":
        return _gstlearn.Db_deleteColumnByUID(self, iuid_del)

    def deleteColumnByColIdx(self, icol_del: "int") -> "void":
        return _gstlearn.Db_deleteColumnByColIdx(self, icol_del)

    def deleteColumns(self, names: "VectorString") -> "void":
        return _gstlearn.Db_deleteColumns(self, names)

    def deleteColumnsByLocator(self, locatorType: "ELoc") -> "void":
        return _gstlearn.Db_deleteColumnsByLocator(self, locatorType)

    def deleteColumnsByUID(self, iuids: "VectorInt") -> "void":
        return _gstlearn.Db_deleteColumnsByUID(self, iuids)

    def deleteColumnsByColIdx(self, icols: "VectorInt") -> "void":
        return _gstlearn.Db_deleteColumnsByColIdx(self, icols)

    def getExtrema(self, idim: "int", useSel: "bool"=False) -> "VectorDouble":
        return _gstlearn.Db_getExtrema(self, idim, useSel)

    def getExtension(self, idim: "int", useSel: "bool"=False) -> "double":
        return _gstlearn.Db_getExtension(self, idim, useSel)

    def getMinimum(self, name: "String const &", useSel: "bool"=False) -> "double":
        return _gstlearn.Db_getMinimum(self, name, useSel)

    def getMaximum(self, name: "String const &", useSel: "bool"=False) -> "double":
        return _gstlearn.Db_getMaximum(self, name, useSel)

    def getMean(self, name: "String const &", useSel: "bool"=False) -> "double":
        return _gstlearn.Db_getMean(self, name, useSel)

    def getVariance(self, name: "String const &", useSel: "bool"=False) -> "double":
        return _gstlearn.Db_getVariance(self, name, useSel)

    def getStdv(self, name: "String const &", useSel: "bool"=False) -> "double":
        return _gstlearn.Db_getStdv(self, name, useSel)

    def hasSameDimension(self, dbaux: "Db") -> "bool":
        return _gstlearn.Db_hasSameDimension(self, dbaux)

    def hasLargerDimension(self, dbaux: "Db") -> "bool":
        return _gstlearn.Db_hasLargerDimension(self, dbaux)

    def isColIdxValid(self, icol: "int") -> "bool":
        return _gstlearn.Db_isColIdxValid(self, icol)

    def isUIDValid(self, iuid: "int") -> "bool":
        return _gstlearn.Db_isUIDValid(self, iuid)

    def isSampleIndexValid(self, iech: "int") -> "bool":
        return _gstlearn.Db_isSampleIndexValid(self, iech)

    def isLocatorIndexValid(self, locatorType: "ELoc", locatorIndex: "int") -> "bool":
        return _gstlearn.Db_isLocatorIndexValid(self, locatorType, locatorIndex)

    def isDimensionIndexValid(self, idim: "int") -> "bool":
        return _gstlearn.Db_isDimensionIndexValid(self, idim)

    def combineSelection(self, *args, **kwargs) -> "void":
        return _gstlearn.Db_combineSelection(self, *args, **kwargs)

    def generateRank(self, *args, **kwargs) -> "void":
        return _gstlearn.Db_generateRank(self, *args, **kwargs)

    def statistics(self, *args) -> "VectorDouble":
        return _gstlearn.Db_statistics(self, *args)

    def statisticsMulti(self, *args) -> "VectorDouble":
        return _gstlearn.Db_statisticsMulti(self, *args)

    def __repr__(self) -> "std::string":
        return _gstlearn.Db___repr__(self)

# Register Db in _gstlearn:
_gstlearn.Db_swigregister(Db)

def Db_createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "Db *":
    return _gstlearn.Db_createFromNF(neutralFilename, verbose)

def Db_create() -> "Db *":
    return _gstlearn.Db_create()

def Db_createFromSamples(*args, **kwargs) -> "Db *":
    return _gstlearn.Db_createFromSamples(*args, **kwargs)

def Db_createFromCSV(filename: "String const &", csv: "CSVformat", verbose: "bool"=False, ncol_max: "int"=-1, nrow_max: "int"=-1, flag_add_rank: "int"=1) -> "Db *":
    return _gstlearn.Db_createFromCSV(filename, csv, verbose, ncol_max, nrow_max, flag_add_rank)

def Db_createFromBox(nech: "int", coormin: "VectorDouble", coormax: "VectorDouble", ndim: "int"=2, seed: "int"=321415, flag_add_rank: "int"=1) -> "Db *":
    return _gstlearn.Db_createFromBox(nech, coormin, coormax, ndim, seed, flag_add_rank)

def Db_createFromOnePoint(tab: "VectorDouble", flag_add_rank: "int"=1) -> "Db *":
    return _gstlearn.Db_createFromOnePoint(tab, flag_add_rank)

def Db_createSamplingDb(*args, **kwargs) -> "Db *":
    return _gstlearn.Db_createSamplingDb(*args, **kwargs)

class DbGrid(Db):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.DbGrid_swiginit(self, _gstlearn.new_DbGrid(*args))
    __swig_destroy__ = _gstlearn.delete_DbGrid

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.DbGrid_toString(self, strfmt)

    def clone(self) -> "IClonable *":
        return _gstlearn.DbGrid_clone(self)

    def isGrid(self) -> "bool":
        return _gstlearn.DbGrid_isGrid(self)

    def getCoordinate(self, iech: "int", idim: "int", flag_rotate: "bool"=True) -> "double":
        return _gstlearn.DbGrid_getCoordinate(self, iech, idim, flag_rotate)

    def getUnit(self, idim: "int"=0) -> "double":
        return _gstlearn.DbGrid_getUnit(self, idim)

    def getNDim(self) -> "int":
        return _gstlearn.DbGrid_getNDim(self)

    def mayChangeSampleNumber(self) -> "bool":
        return _gstlearn.DbGrid_mayChangeSampleNumber(self)

    def dumpToNF(self, neutralFilename: "String const &", verbose: "bool"=False) -> "int":
        return _gstlearn.DbGrid_dumpToNF(self, neutralFilename, verbose)

    @staticmethod
    def createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "DbGrid *":
        return _gstlearn.DbGrid_createFromNF(neutralFilename, verbose)

    def reset(self, *args, **kwargs) -> "int":
        return _gstlearn.DbGrid_reset(self, *args, **kwargs)

    def resetCoveringDb(self, *args, **kwargs) -> "int":
        return _gstlearn.DbGrid_resetCoveringDb(self, *args, **kwargs)

    def resetFromPolygon(self, polygon: "Polygons", nodes: "VectorInt", dcell: "VectorDouble", flag_add_rank: "int") -> "int":
        return _gstlearn.DbGrid_resetFromPolygon(self, polygon, nodes, dcell, flag_add_rank)

    @staticmethod
    def create(*args, **kwargs) -> "DbGrid *":
        return _gstlearn.DbGrid_create(*args, **kwargs)

    @staticmethod
    def createCoveringDb(*args, **kwargs) -> "DbGrid *":
        return _gstlearn.DbGrid_createCoveringDb(*args, **kwargs)

    @staticmethod
    def createFromPolygon(polygon: "Polygons", nodes: "VectorInt", dcell: "VectorDouble", flag_add_rank: "int"=1) -> "DbGrid *":
        return _gstlearn.DbGrid_createFromPolygon(polygon, nodes, dcell, flag_add_rank)

    def getGrid(self) -> "Grid const &":
        return _gstlearn.DbGrid_getGrid(self)

    def generateCoordinates(self, *args, **kwargs) -> "void":
        return _gstlearn.DbGrid_generateCoordinates(self, *args, **kwargs)

    def getColumnSubGrid(self, name: "String const &", idim0: "int", rank: "int", useSel: "bool"=False) -> "VectorDouble":
        return _gstlearn.DbGrid_getColumnSubGrid(self, name, idim0, rank, useSel)

    def gridDefine(self, *args, **kwargs) -> "int":
        return _gstlearn.DbGrid_gridDefine(self, *args, **kwargs)

    def gridCopyParams(self, mode: "int", gridaux: "Grid") -> "void":
        return _gstlearn.DbGrid_gridCopyParams(self, mode, gridaux)

    def isSameGrid(self, grid: "Grid") -> "bool":
        return _gstlearn.DbGrid_isSameGrid(self, grid)

    def isSameGridMesh(self, dbaux: "DbGrid") -> "bool":
        return _gstlearn.DbGrid_isSameGridMesh(self, dbaux)

    def isSameGridMeshOldStyle(self, dbaux: "DbGrid") -> "bool":
        return _gstlearn.DbGrid_isSameGridMeshOldStyle(self, dbaux)

    def isSameGridRotation(self, dbaux: "DbGrid") -> "bool":
        return _gstlearn.DbGrid_isSameGridRotation(self, dbaux)

    def isSameGridRotationOldStyle(self, dbaux: "DbGrid") -> "bool":
        return _gstlearn.DbGrid_isSameGridRotationOldStyle(self, dbaux)

    def isGridRotated(self) -> "bool":
        return _gstlearn.DbGrid_isGridRotated(self)

    def getNTotal(self) -> "int":
        return _gstlearn.DbGrid_getNTotal(self)

    def getCellSize(self) -> "double":
        return _gstlearn.DbGrid_getCellSize(self)

    def getNX(self, idim: "int") -> "int":
        return _gstlearn.DbGrid_getNX(self, idim)

    def getNXs(self) -> "VectorInt":
        return _gstlearn.DbGrid_getNXs(self)

    def getDX(self, idim: "int") -> "double":
        return _gstlearn.DbGrid_getDX(self, idim)

    def getDXs(self) -> "VectorDouble":
        return _gstlearn.DbGrid_getDXs(self)

    def getX0(self, idim: "int") -> "double":
        return _gstlearn.DbGrid_getX0(self, idim)

    def getX0s(self) -> "VectorDouble":
        return _gstlearn.DbGrid_getX0s(self)

    def getAngle(self, idim: "int") -> "double":
        return _gstlearn.DbGrid_getAngle(self, idim)

    def getAngles(self) -> "VectorDouble":
        return _gstlearn.DbGrid_getAngles(self)

    def getRotMat(self) -> "VectorDouble":
        return _gstlearn.DbGrid_getRotMat(self)

    def setNX(self, idim: "int", value: "int") -> "void":
        return _gstlearn.DbGrid_setNX(self, idim, value)

    def setX0(self, idim: "int", value: "double") -> "void":
        return _gstlearn.DbGrid_setX0(self, idim, value)

    def setDX(self, idim: "int", value: "double") -> "void":
        return _gstlearn.DbGrid_setDX(self, idim, value)

    def getGridAxis(self, idim: "int") -> "VectorDouble":
        return _gstlearn.DbGrid_getGridAxis(self, idim)

    def getCoordinateFromCorner(self, icorner: "VectorInt") -> "VectorDouble":
        return _gstlearn.DbGrid_getCoordinateFromCorner(self, icorner)

    def coordinateToRank(self, coor: "VectorDouble", eps: "double"=1.e-6) -> "int":
        return _gstlearn.DbGrid_coordinateToRank(self, coor, eps)

    def indiceToRank(self, indice: "VectorInt") -> "int":
        return _gstlearn.DbGrid_indiceToRank(self, indice)

    def rankToCoordinate(self, *args, **kwargs) -> "void":
        return _gstlearn.DbGrid_rankToCoordinate(self, *args, **kwargs)

    def __repr__(self) -> "std::string":
        return _gstlearn.DbGrid___repr__(self)

# Register DbGrid in _gstlearn:
_gstlearn.DbGrid_swigregister(DbGrid)

def DbGrid_createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "DbGrid *":
    return _gstlearn.DbGrid_createFromNF(neutralFilename, verbose)

def DbGrid_create(*args, **kwargs) -> "DbGrid *":
    return _gstlearn.DbGrid_create(*args, **kwargs)

def DbGrid_createCoveringDb(*args, **kwargs) -> "DbGrid *":
    return _gstlearn.DbGrid_createCoveringDb(*args, **kwargs)

def DbGrid_createFromPolygon(polygon: "Polygons", nodes: "VectorInt", dcell: "VectorDouble", flag_add_rank: "int"=1) -> "DbGrid *":
    return _gstlearn.DbGrid_createFromPolygon(polygon, nodes, dcell, flag_add_rank)

FLAG_RESUME = _gstlearn.FLAG_RESUME
FLAG_VARS = _gstlearn.FLAG_VARS
FLAG_EXTEND = _gstlearn.FLAG_EXTEND
FLAG_STATS = _gstlearn.FLAG_STATS
FLAG_ARRAY = _gstlearn.FLAG_ARRAY
FLAG_LOCATOR = _gstlearn.FLAG_LOCATOR
class DbStringFormat(AStringFormat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DbStringFormat_swiginit(self, _gstlearn.new_DbStringFormat(*args))
    __swig_destroy__ = _gstlearn.delete_DbStringFormat

    def create(self, params: "unsigned char", names: "VectorString", cols: "VectorInt", useSel: "bool") -> "DbStringFormat *":
        return _gstlearn.DbStringFormat_create(self, params, names, cols, useSel)

    def getCols(self) -> "VectorInt const &":
        return _gstlearn.DbStringFormat_getCols(self)

    def getUseSel(self) -> "bool":
        return _gstlearn.DbStringFormat_getUseSel(self)

    def getMode(self) -> "int":
        return _gstlearn.DbStringFormat_getMode(self)

    def getParams(self) -> "unsigned char":
        return _gstlearn.DbStringFormat_getParams(self)

    def getNames(self) -> "VectorString const &":
        return _gstlearn.DbStringFormat_getNames(self)

    def setCols(self, cols: "VectorInt") -> "void":
        return _gstlearn.DbStringFormat_setCols(self, cols)

    def setUseSel(self, useSel: "bool") -> "void":
        return _gstlearn.DbStringFormat_setUseSel(self, useSel)

    def setMode(self, mode: "int") -> "void":
        return _gstlearn.DbStringFormat_setMode(self, mode)

    def setNames(self, names: "VectorString") -> "void":
        return _gstlearn.DbStringFormat_setNames(self, names)

    def setParams(self, params: "unsigned char") -> "void":
        return _gstlearn.DbStringFormat_setParams(self, params)

    def matchResume(self) -> "bool":
        return _gstlearn.DbStringFormat_matchResume(self)

    def matchVars(self) -> "bool":
        return _gstlearn.DbStringFormat_matchVars(self)

    def matchExtend(self) -> "bool":
        return _gstlearn.DbStringFormat_matchExtend(self)

    def matchStats(self) -> "bool":
        return _gstlearn.DbStringFormat_matchStats(self)

    def matchArray(self) -> "bool":
        return _gstlearn.DbStringFormat_matchArray(self)

    def matchLocator(self) -> "bool":
        return _gstlearn.DbStringFormat_matchLocator(self)

# Register DbStringFormat in _gstlearn:
_gstlearn.DbStringFormat_swigregister(DbStringFormat)

class ELoadByIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ELoadByIterator

    def __init__(self, arg2: "ELoadByIterator"):
        _gstlearn.ELoadByIterator_swiginit(self, _gstlearn.new_ELoadByIterator(arg2))

    def __ref__(self) -> "ELoadBy const &":
        return _gstlearn.ELoadByIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.ELoadByIterator_hasNext(self)

    def toNext(self) -> "ELoadBy const &":
        return _gstlearn.ELoadByIterator_toNext(self)

    def toFront(self) -> "ELoadBy const &":
        return _gstlearn.ELoadByIterator_toFront(self)

    def getEnum(self) -> "ELoadBy const &":
        return _gstlearn.ELoadByIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.ELoadByIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.ELoadByIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.ELoadByIterator_getDescr(self)

# Register ELoadByIterator in _gstlearn:
_gstlearn.ELoadByIterator_swigregister(ELoadByIterator)

class ELoadBy(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ELoadBy

    def __init__(self, *args):
        _gstlearn.ELoadBy_swiginit(self, _gstlearn.new_ELoadBy(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.ELoadBy_getSize()

    @staticmethod
    def getIterator() -> "ELoadByIterator":
        return _gstlearn.ELoadBy_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.ELoadBy_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.ELoadBy_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "ELoadBy const &":
        return _gstlearn.ELoadBy_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "ELoadBy const &":
        return _gstlearn.ELoadBy_fromValue(value)
    E_COLUMN = _gstlearn.ELoadBy_E_COLUMN
    E_SAMPLE = _gstlearn.ELoadBy_E_SAMPLE

    def toEnum(self) -> "ELoadBy::EELoadBy":
        return _gstlearn.ELoadBy_toEnum(self)

# Register ELoadBy in _gstlearn:
_gstlearn.ELoadBy_swigregister(ELoadBy)

def ELoadBy_getSize() -> "size_t":
    return _gstlearn.ELoadBy_getSize()

def ELoadBy_getIterator() -> "ELoadByIterator":
    return _gstlearn.ELoadBy_getIterator()

def ELoadBy_existsKey(key: "String const &") -> "bool":
    return _gstlearn.ELoadBy_existsKey(key)

def ELoadBy_existsValue(value: "int") -> "bool":
    return _gstlearn.ELoadBy_existsValue(value)

def ELoadBy_fromKey(key: "String const &") -> "ELoadBy const &":
    return _gstlearn.ELoadBy_fromKey(key)

def ELoadBy_fromValue(value: "int") -> "ELoadBy const &":
    return _gstlearn.ELoadBy_fromValue(value)
ELoadBy.COLUMN = _gstlearn.cvar.ELoadBy_COLUMN
ELoadBy.SAMPLE = _gstlearn.cvar.ELoadBy_SAMPLE

class ELocIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ELocIterator

    def __init__(self, arg2: "ELocIterator"):
        _gstlearn.ELocIterator_swiginit(self, _gstlearn.new_ELocIterator(arg2))

    def __ref__(self) -> "ELoc const &":
        return _gstlearn.ELocIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.ELocIterator_hasNext(self)

    def toNext(self) -> "ELoc const &":
        return _gstlearn.ELocIterator_toNext(self)

    def toFront(self) -> "ELoc const &":
        return _gstlearn.ELocIterator_toFront(self)

    def getEnum(self) -> "ELoc const &":
        return _gstlearn.ELocIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.ELocIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.ELocIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.ELocIterator_getDescr(self)

# Register ELocIterator in _gstlearn:
_gstlearn.ELocIterator_swigregister(ELocIterator)

class ELoc(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ELoc

    def __init__(self, *args):
        _gstlearn.ELoc_swiginit(self, _gstlearn.new_ELoc(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.ELoc_getSize()

    @staticmethod
    def getIterator() -> "ELocIterator":
        return _gstlearn.ELoc_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.ELoc_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.ELoc_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "ELoc const &":
        return _gstlearn.ELoc_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "ELoc const &":
        return _gstlearn.ELoc_fromValue(value)
    E_UNKNOWN = _gstlearn.ELoc_E_UNKNOWN
    E_X = _gstlearn.ELoc_E_X
    E_Z = _gstlearn.ELoc_E_Z
    E_V = _gstlearn.ELoc_E_V
    E_F = _gstlearn.ELoc_E_F
    E_G = _gstlearn.ELoc_E_G
    E_L = _gstlearn.ELoc_E_L
    E_U = _gstlearn.ELoc_E_U
    E_P = _gstlearn.ELoc_E_P
    E_W = _gstlearn.ELoc_E_W
    E_C = _gstlearn.ELoc_E_C
    E_SEL = _gstlearn.ELoc_E_SEL
    E_DOM = _gstlearn.ELoc_E_DOM
    E_BLEX = _gstlearn.ELoc_E_BLEX
    E_ADIR = _gstlearn.ELoc_E_ADIR
    E_ADIP = _gstlearn.ELoc_E_ADIP
    E_SIZE = _gstlearn.ELoc_E_SIZE
    E_BU = _gstlearn.ELoc_E_BU
    E_BD = _gstlearn.ELoc_E_BD
    E_TIME = _gstlearn.ELoc_E_TIME
    E_LAYER = _gstlearn.ELoc_E_LAYER
    E_NOSTAT = _gstlearn.ELoc_E_NOSTAT
    E_TGTE = _gstlearn.ELoc_E_TGTE
    E_SIMU = _gstlearn.ELoc_E_SIMU
    E_FACIES = _gstlearn.ELoc_E_FACIES
    E_GAUSFAC = _gstlearn.ELoc_E_GAUSFAC
    E_DATE = _gstlearn.ELoc_E_DATE
    E_RKLOW = _gstlearn.ELoc_E_RKLOW
    E_RKUP = _gstlearn.ELoc_E_RKUP

    def toEnum(self) -> "ELoc::EELoc":
        return _gstlearn.ELoc_toEnum(self)

# Register ELoc in _gstlearn:
_gstlearn.ELoc_swigregister(ELoc)

def ELoc_getSize() -> "size_t":
    return _gstlearn.ELoc_getSize()

def ELoc_getIterator() -> "ELocIterator":
    return _gstlearn.ELoc_getIterator()

def ELoc_existsKey(key: "String const &") -> "bool":
    return _gstlearn.ELoc_existsKey(key)

def ELoc_existsValue(value: "int") -> "bool":
    return _gstlearn.ELoc_existsValue(value)

def ELoc_fromKey(key: "String const &") -> "ELoc const &":
    return _gstlearn.ELoc_fromKey(key)

def ELoc_fromValue(value: "int") -> "ELoc const &":
    return _gstlearn.ELoc_fromValue(value)
ELoc.UNKNOWN = _gstlearn.cvar.ELoc_UNKNOWN
ELoc.X = _gstlearn.cvar.ELoc_X
ELoc.Z = _gstlearn.cvar.ELoc_Z
ELoc.V = _gstlearn.cvar.ELoc_V
ELoc.F = _gstlearn.cvar.ELoc_F
ELoc.G = _gstlearn.cvar.ELoc_G
ELoc.L = _gstlearn.cvar.ELoc_L
ELoc.U = _gstlearn.cvar.ELoc_U
ELoc.P = _gstlearn.cvar.ELoc_P
ELoc.W = _gstlearn.cvar.ELoc_W
ELoc.C = _gstlearn.cvar.ELoc_C
ELoc.SEL = _gstlearn.cvar.ELoc_SEL
ELoc.DOM = _gstlearn.cvar.ELoc_DOM
ELoc.BLEX = _gstlearn.cvar.ELoc_BLEX
ELoc.ADIR = _gstlearn.cvar.ELoc_ADIR
ELoc.ADIP = _gstlearn.cvar.ELoc_ADIP
ELoc.SIZE = _gstlearn.cvar.ELoc_SIZE
ELoc.BU = _gstlearn.cvar.ELoc_BU
ELoc.BD = _gstlearn.cvar.ELoc_BD
ELoc.TIME = _gstlearn.cvar.ELoc_TIME
ELoc.LAYER = _gstlearn.cvar.ELoc_LAYER
ELoc.NOSTAT = _gstlearn.cvar.ELoc_NOSTAT
ELoc.TGTE = _gstlearn.cvar.ELoc_TGTE
ELoc.SIMU = _gstlearn.cvar.ELoc_SIMU
ELoc.FACIES = _gstlearn.cvar.ELoc_FACIES
ELoc.GAUSFAC = _gstlearn.cvar.ELoc_GAUSFAC
ELoc.DATE = _gstlearn.cvar.ELoc_DATE
ELoc.RKLOW = _gstlearn.cvar.ELoc_RKLOW
ELoc.RKUP = _gstlearn.cvar.ELoc_RKUP

class AAnam(AStringable, ASerializable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_AAnam

    def getType(self) -> "EAnam const &":
        return _gstlearn.AAnam_getType(self)

# Register AAnam in _gstlearn:
_gstlearn.AAnam_swigregister(AAnam)

class AnamContinuousFit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    y = property(_gstlearn.AnamContinuousFit_y_get, _gstlearn.AnamContinuousFit_y_set)
    z = property(_gstlearn.AnamContinuousFit_z_get, _gstlearn.AnamContinuousFit_z_set)
    aylim = property(_gstlearn.AnamContinuousFit_aylim_get, _gstlearn.AnamContinuousFit_aylim_set)
    azlim = property(_gstlearn.AnamContinuousFit_azlim_get, _gstlearn.AnamContinuousFit_azlim_set)
    pylim = property(_gstlearn.AnamContinuousFit_pylim_get, _gstlearn.AnamContinuousFit_pylim_set)
    pzlim = property(_gstlearn.AnamContinuousFit_pzlim_get, _gstlearn.AnamContinuousFit_pzlim_set)

    def __init__(self):
        _gstlearn.AnamContinuousFit_swiginit(self, _gstlearn.new_AnamContinuousFit())
    __swig_destroy__ = _gstlearn.delete_AnamContinuousFit

# Register AnamContinuousFit in _gstlearn:
_gstlearn.AnamContinuousFit_swigregister(AnamContinuousFit)

class AnamContinuous(AAnam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_AnamContinuous

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.AnamContinuous_toString(self, strfmt)

    def calculateMeanAndVariance(self) -> "void":
        return _gstlearn.AnamContinuous_calculateMeanAndVariance(self)

    def RawToGaussianValue(self, z: "double") -> "double":
        return _gstlearn.AnamContinuous_RawToGaussianValue(self, z)

    def GaussianToRawValue(self, y: "double") -> "double":
        return _gstlearn.AnamContinuous_GaussianToRawValue(self, y)

    def setABounds(self, azmin: "double"=1.234e30, azmax: "double"=1.234e30, aymin: "double"=1.234e30, aymax: "double"=1.234e30) -> "void":
        return _gstlearn.AnamContinuous_setABounds(self, azmin, azmax, aymin, aymax)

    def setPBounds(self, pzmin: "double"=1.234e30, pzmax: "double"=1.234e30, pymin: "double"=1.234e30, pymax: "double"=1.234e30) -> "void":
        return _gstlearn.AnamContinuous_setPBounds(self, pzmin, pzmax, pymin, pymax)

    def RawToGaussianVector(self, z: "VectorDouble") -> "VectorDouble":
        return _gstlearn.AnamContinuous_RawToGaussianVector(self, z)

    def GaussianToRawVector(self, y: "VectorDouble") -> "VectorDouble":
        return _gstlearn.AnamContinuous_GaussianToRawVector(self, y)

    def RawToGaussian(self, *args) -> "int":
        return _gstlearn.AnamContinuous_RawToGaussian(self, *args)

    def GaussianToRaw(self, *args) -> "int":
        return _gstlearn.AnamContinuous_GaussianToRaw(self, *args)

    def sample(self, ndisc: "int"=100, aymin: "double"=-10, aymax: "double"=+10) -> "AnamContinuousFit":
        return _gstlearn.AnamContinuous_sample(self, ndisc, aymin, aymax)

    def getMean(self) -> "double":
        return _gstlearn.AnamContinuous_getMean(self)

    def getVariance(self) -> "double":
        return _gstlearn.AnamContinuous_getVariance(self)

    def getAymax(self) -> "double":
        return _gstlearn.AnamContinuous_getAymax(self)

    def getAymin(self) -> "double":
        return _gstlearn.AnamContinuous_getAymin(self)

    def getAzmax(self) -> "double":
        return _gstlearn.AnamContinuous_getAzmax(self)

    def getAzmin(self) -> "double":
        return _gstlearn.AnamContinuous_getAzmin(self)

    def getPymax(self) -> "double":
        return _gstlearn.AnamContinuous_getPymax(self)

    def getPymin(self) -> "double":
        return _gstlearn.AnamContinuous_getPymin(self)

    def getPzmax(self) -> "double":
        return _gstlearn.AnamContinuous_getPzmax(self)

    def getPzmin(self) -> "double":
        return _gstlearn.AnamContinuous_getPzmin(self)

    def setAzmin(self, azmin: "double") -> "void":
        return _gstlearn.AnamContinuous_setAzmin(self, azmin)

    def setAzmax(self, azmax: "double") -> "void":
        return _gstlearn.AnamContinuous_setAzmax(self, azmax)

    def setAymin(self, aymin: "double") -> "void":
        return _gstlearn.AnamContinuous_setAymin(self, aymin)

    def setAymax(self, aymax: "double") -> "void":
        return _gstlearn.AnamContinuous_setAymax(self, aymax)

    def setPzmin(self, pzmin: "double") -> "void":
        return _gstlearn.AnamContinuous_setPzmin(self, pzmin)

    def setPzmax(self, pzmax: "double") -> "void":
        return _gstlearn.AnamContinuous_setPzmax(self, pzmax)

    def setPymin(self, pymin: "double") -> "void":
        return _gstlearn.AnamContinuous_setPymin(self, pymin)

    def setPymax(self, pymax: "double") -> "void":
        return _gstlearn.AnamContinuous_setPymax(self, pymax)

    def setMean(self, mean: "double") -> "void":
        return _gstlearn.AnamContinuous_setMean(self, mean)

    def setVariance(self, variance: "double") -> "void":
        return _gstlearn.AnamContinuous_setVariance(self, variance)

# Register AnamContinuous in _gstlearn:
_gstlearn.AnamContinuous_swigregister(AnamContinuous)

class AnamDiscrete(AAnam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_AnamDiscrete

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.AnamDiscrete_toString(self, strfmt)

    def z2f(self, nfact: "int", ifacs: "VectorInt", z: "double") -> "VectorDouble":
        return _gstlearn.AnamDiscrete_z2f(self, nfact, ifacs, z)

    def calculateMeanAndVariance(self) -> "void":
        return _gstlearn.AnamDiscrete_calculateMeanAndVariance(self)

    def getNCut(self) -> "int":
        return _gstlearn.AnamDiscrete_getNCut(self)

    def getNClass(self) -> "int":
        return _gstlearn.AnamDiscrete_getNClass(self)

    def getNElem(self) -> "int":
        return _gstlearn.AnamDiscrete_getNElem(self)

    def getZCut(self, *args) -> "double":
        return _gstlearn.AnamDiscrete_getZCut(self, *args)

    def getMean(self) -> "double":
        return _gstlearn.AnamDiscrete_getMean(self)

    def getVariance(self) -> "double":
        return _gstlearn.AnamDiscrete_getVariance(self)

    def setMean(self, mean: "double") -> "void":
        return _gstlearn.AnamDiscrete_setMean(self, mean)

    def setVariance(self, variance: "double") -> "void":
        return _gstlearn.AnamDiscrete_setVariance(self, variance)

    def setNCut(self, ncut: "int") -> "void":
        return _gstlearn.AnamDiscrete_setNCut(self, ncut)

    def setZCut(self, zcut: "VectorDouble") -> "void":
        return _gstlearn.AnamDiscrete_setZCut(self, zcut)

    def setNElem(self, nelem: "int") -> "void":
        return _gstlearn.AnamDiscrete_setNElem(self, nelem)

    def setStats(self, stats: "VectorDouble") -> "void":
        return _gstlearn.AnamDiscrete_setStats(self, stats)

    def getDDStatProp(self, iclass: "int") -> "double":
        return _gstlearn.AnamDiscrete_getDDStatProp(self, iclass)

    def getDDStatZmoy(self, iclass: "int") -> "double":
        return _gstlearn.AnamDiscrete_getDDStatZmoy(self, iclass)

    def getDDStatCnorm(self, iclass: "int") -> "double":
        return _gstlearn.AnamDiscrete_getDDStatCnorm(self, iclass)

    def getDDStatLambda(self, iclass: "int") -> "double":
        return _gstlearn.AnamDiscrete_getDDStatLambda(self, iclass)

    def getDDStatU(self, iclass: "int") -> "double":
        return _gstlearn.AnamDiscrete_getDDStatU(self, iclass)

    def getDDStatMul(self, iclass: "int") -> "double":
        return _gstlearn.AnamDiscrete_getDDStatMul(self, iclass)

    def setDDStatProp(self, iclass: "int", value: "double") -> "void":
        return _gstlearn.AnamDiscrete_setDDStatProp(self, iclass, value)

    def setDDStatZmoy(self, iclass: "int", value: "double") -> "void":
        return _gstlearn.AnamDiscrete_setDDStatZmoy(self, iclass, value)

    def setDDStatCnorm(self, iclass: "int", value: "double") -> "void":
        return _gstlearn.AnamDiscrete_setDDStatCnorm(self, iclass, value)

    def setDDStatLambda(self, iclass: "int", value: "double") -> "void":
        return _gstlearn.AnamDiscrete_setDDStatLambda(self, iclass, value)

    def setDDStatU(self, iclass: "int", value: "double") -> "void":
        return _gstlearn.AnamDiscrete_setDDStatU(self, iclass, value)

    def setDDStatMul(self, iclass: "int", value: "double") -> "void":
        return _gstlearn.AnamDiscrete_setDDStatMul(self, iclass, value)

    def getIRStatT(self, iclass: "int") -> "double":
        return _gstlearn.AnamDiscrete_getIRStatT(self, iclass)

    def getIRStatQ(self, iclass: "int") -> "double":
        return _gstlearn.AnamDiscrete_getIRStatQ(self, iclass)

    def getIRStatZ(self, iclass: "int") -> "double":
        return _gstlearn.AnamDiscrete_getIRStatZ(self, iclass)

    def getIRStatB(self, iclass: "int") -> "double":
        return _gstlearn.AnamDiscrete_getIRStatB(self, iclass)

    def getIRStatR(self, iclass: "int") -> "double":
        return _gstlearn.AnamDiscrete_getIRStatR(self, iclass)

    def getIRStatRV(self, iclass: "int") -> "double":
        return _gstlearn.AnamDiscrete_getIRStatRV(self, iclass)

    def setIRStatT(self, iclass: "int", value: "double") -> "void":
        return _gstlearn.AnamDiscrete_setIRStatT(self, iclass, value)

    def setIRStatQ(self, iclass: "int", value: "double") -> "void":
        return _gstlearn.AnamDiscrete_setIRStatQ(self, iclass, value)

    def setIRStatZ(self, iclass: "int", value: "double") -> "void":
        return _gstlearn.AnamDiscrete_setIRStatZ(self, iclass, value)

    def setIRStatB(self, iclass: "int", value: "double") -> "void":
        return _gstlearn.AnamDiscrete_setIRStatB(self, iclass, value)

    def setIRStatR(self, iclass: "int", value: "double") -> "void":
        return _gstlearn.AnamDiscrete_setIRStatR(self, iclass, value)

    def setIRStatRV(self, iclass: "int", value: "double") -> "void":
        return _gstlearn.AnamDiscrete_setIRStatRV(self, iclass, value)

    def getStats(self) -> "MatrixRectangular const &":
        return _gstlearn.AnamDiscrete_getStats(self)

# Register AnamDiscrete in _gstlearn:
_gstlearn.AnamDiscrete_swigregister(AnamDiscrete)

class AnamUser(AnamContinuous):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.AnamUser_swiginit(self, _gstlearn.new_AnamUser(*args))
    __swig_destroy__ = _gstlearn.delete_AnamUser

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.AnamUser_toString(self, strfmt)

    def getType(self) -> "EAnam const &":
        return _gstlearn.AnamUser_getType(self)

    def calculateMeanAndVariance(self) -> "void":
        return _gstlearn.AnamUser_calculateMeanAndVariance(self)

    def GaussianToRawValue(self, h: "double") -> "double":
        return _gstlearn.AnamUser_GaussianToRawValue(self, h)

    def RawToGaussianValue(self, h: "double") -> "double":
        return _gstlearn.AnamUser_RawToGaussianValue(self, h)

    def setY2zFunction(self, y2z_function: "double (*)(double)") -> "void":
        return _gstlearn.AnamUser_setY2zFunction(self, y2z_function)

    def setZ2yFunction(self, z2y_function: "double (*)(double)") -> "void":
        return _gstlearn.AnamUser_setZ2yFunction(self, z2y_function)

# Register AnamUser in _gstlearn:
_gstlearn.AnamUser_swigregister(AnamUser)

class AnamHermite(AnamContinuous):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.AnamHermite_swiginit(self, _gstlearn.new_AnamHermite(*args))
    __swig_destroy__ = _gstlearn.delete_AnamHermite

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.AnamHermite_toString(self, strfmt)

    def getType(self) -> "EAnam const &":
        return _gstlearn.AnamHermite_getType(self)

    def dumpToNF(self, neutralFilename: "String const &", verbose: "bool"=False) -> "int":
        return _gstlearn.AnamHermite_dumpToNF(self, neutralFilename, verbose)

    @staticmethod
    def createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "AnamHermite *":
        return _gstlearn.AnamHermite_createFromNF(neutralFilename, verbose)

    def RawToGaussianValue(self, z: "double") -> "double":
        return _gstlearn.AnamHermite_RawToGaussianValue(self, z)

    def GaussianToRawValue(self, y: "double") -> "double":
        return _gstlearn.AnamHermite_GaussianToRawValue(self, y)

    def calculateMeanAndVariance(self) -> "void":
        return _gstlearn.AnamHermite_calculateMeanAndVariance(self)

    def create(self, nbpoly: "int"=0, flagBound: "bool"=True, rCoef: "double"=1.) -> "AnamHermite *":
        return _gstlearn.AnamHermite_create(self, nbpoly, flagBound, rCoef)

    def getNbPoly(self) -> "int":
        return _gstlearn.AnamHermite_getNbPoly(self)

    def getPsiHn(self, *args) -> "double":
        return _gstlearn.AnamHermite_getPsiHn(self, *args)

    def getRCoef(self) -> "double":
        return _gstlearn.AnamHermite_getRCoef(self)

    def getFlagBound(self) -> "bool":
        return _gstlearn.AnamHermite_getFlagBound(self)

    def setNbPoly(self, nbPoly: "int") -> "void":
        return _gstlearn.AnamHermite_setNbPoly(self, nbPoly)

    def setFlagBound(self, flagBound: "bool") -> "void":
        return _gstlearn.AnamHermite_setFlagBound(self, flagBound)

    def setPsiHn(self, *args) -> "void":
        return _gstlearn.AnamHermite_setPsiHn(self, *args)

    def setRCoef(self, r_coef: "double") -> "void":
        return _gstlearn.AnamHermite_setRCoef(self, r_coef)

    def calculateVarianceFromPsi(self, chh: "double") -> "double":
        return _gstlearn.AnamHermite_calculateVarianceFromPsi(self, chh)

    def fit(self, *args) -> "int":
        return _gstlearn.AnamHermite_fit(self, *args)

    def __repr__(self) -> "std::string":
        return _gstlearn.AnamHermite___repr__(self)

# Register AnamHermite in _gstlearn:
_gstlearn.AnamHermite_swigregister(AnamHermite)

def AnamHermite_createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "AnamHermite *":
    return _gstlearn.AnamHermite_createFromNF(neutralFilename, verbose)

class AnamEmpirical(AnamContinuous):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.AnamEmpirical_swiginit(self, _gstlearn.new_AnamEmpirical(*args))
    __swig_destroy__ = _gstlearn.delete_AnamEmpirical

    def dumpToNF(self, neutralFilename: "String const &", verbose: "bool"=False) -> "int":
        return _gstlearn.AnamEmpirical_dumpToNF(self, neutralFilename, verbose)

    @staticmethod
    def createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "AnamEmpirical *":
        return _gstlearn.AnamEmpirical_createFromNF(neutralFilename, verbose)

    def getType(self) -> "EAnam const &":
        return _gstlearn.AnamEmpirical_getType(self)

    def calculateMeanAndVariance(self) -> "void":
        return _gstlearn.AnamEmpirical_calculateMeanAndVariance(self)

    def RawToGaussianValue(self, zz: "double") -> "double":
        return _gstlearn.AnamEmpirical_RawToGaussianValue(self, zz)

    def GaussianToRawValue(self, yy: "double") -> "double":
        return _gstlearn.AnamEmpirical_GaussianToRawValue(self, yy)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.AnamEmpirical_toString(self, strfmt)

    def create(self, ndisc: "int"=100, sigma2e: "double"=1.234e30) -> "AnamEmpirical *":
        return _gstlearn.AnamEmpirical_create(self, ndisc, sigma2e)

    def getNDisc(self) -> "int":
        return _gstlearn.AnamEmpirical_getNDisc(self)

    def getSigma2e(self) -> "double":
        return _gstlearn.AnamEmpirical_getSigma2e(self)

    def getTDisc(self) -> "VectorDouble const &":
        return _gstlearn.AnamEmpirical_getTDisc(self)

    def setSigma2e(self, sigma2e: "double") -> "void":
        return _gstlearn.AnamEmpirical_setSigma2e(self, sigma2e)

    def setNDisc(self, ndisc: "int") -> "void":
        return _gstlearn.AnamEmpirical_setNDisc(self, ndisc)

    def setTDisc(self, tdisc: "VectorDouble") -> "void":
        return _gstlearn.AnamEmpirical_setTDisc(self, tdisc)

    def fit(self, tab: "VectorDouble") -> "int":
        return _gstlearn.AnamEmpirical_fit(self, tab)

    def isTDiscIndexValid(self, i: "int") -> "bool":
        return _gstlearn.AnamEmpirical_isTDiscIndexValid(self, i)

# Register AnamEmpirical in _gstlearn:
_gstlearn.AnamEmpirical_swigregister(AnamEmpirical)

def AnamEmpirical_createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "AnamEmpirical *":
    return _gstlearn.AnamEmpirical_createFromNF(neutralFilename, verbose)

class AnamDiscreteDD(AnamDiscrete):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.AnamDiscreteDD_swiginit(self, _gstlearn.new_AnamDiscreteDD(*args))
    __swig_destroy__ = _gstlearn.delete_AnamDiscreteDD

    def dumpToNF(self, neutralFilename: "String const &", verbose: "bool"=False) -> "int":
        return _gstlearn.AnamDiscreteDD_dumpToNF(self, neutralFilename, verbose)

    @staticmethod
    def createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "AnamDiscreteDD *":
        return _gstlearn.AnamDiscreteDD_createFromNF(neutralFilename, verbose)

    def getType(self) -> "EAnam const &":
        return _gstlearn.AnamDiscreteDD_getType(self)

    def calculateMeanAndVariance(self) -> "void":
        return _gstlearn.AnamDiscreteDD_calculateMeanAndVariance(self)

    def z2f(self, nfact: "int", ifacs: "VectorInt", z: "double") -> "VectorDouble":
        return _gstlearn.AnamDiscreteDD_z2f(self, nfact, ifacs, z)

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.AnamDiscreteDD_toString(self, strfmt)

    def factors_exp(self, verbose: "int") -> "VectorDouble":
        return _gstlearn.AnamDiscreteDD_factors_exp(self, verbose)

    def factors_maf(self, verbose: "int") -> "VectorDouble":
        return _gstlearn.AnamDiscreteDD_factors_maf(self, verbose)

    def factors_mod(self) -> "VectorDouble":
        return _gstlearn.AnamDiscreteDD_factors_mod(self)

    def chi2I(self, chi: "VectorDouble", mode: "int") -> "VectorDouble":
        return _gstlearn.AnamDiscreteDD_chi2I(self, chi, mode)

    def create(self, mu: "double"=1., scoef: "double"=0.) -> "AnamDiscreteDD *":
        return _gstlearn.AnamDiscreteDD_create(self, mu, scoef)

    def fit(self, tab: "VectorDouble", verbose: "int"=0) -> "int":
        return _gstlearn.AnamDiscreteDD_fit(self, tab, verbose)

    def getMAF(self) -> "PCA &":
        return _gstlearn.AnamDiscreteDD_getMAF(self)

    def getMu(self) -> "double":
        return _gstlearn.AnamDiscreteDD_getMu(self)

    def getSCoef(self) -> "double":
        return _gstlearn.AnamDiscreteDD_getSCoef(self)

    def getI2Chi(self) -> "VectorDouble const &":
        return _gstlearn.AnamDiscreteDD_getI2Chi(self)

    def getPcaZ2F(self) -> "VectorDouble":
        return _gstlearn.AnamDiscreteDD_getPcaZ2F(self)

    def getPcaF2Z(self) -> "VectorDouble":
        return _gstlearn.AnamDiscreteDD_getPcaF2Z(self)

    def setMu(self, mu: "double") -> "void":
        return _gstlearn.AnamDiscreteDD_setMu(self, mu)

    def setSCoef(self, scoef: "double") -> "void":
        return _gstlearn.AnamDiscreteDD_setSCoef(self, scoef)

    def setPcaZ2F(self, pcaz2f: "VectorDouble") -> "void":
        return _gstlearn.AnamDiscreteDD_setPcaZ2F(self, pcaz2f)

    def setPcaF2Z(self, pcaf2z: "VectorDouble") -> "void":
        return _gstlearn.AnamDiscreteDD_setPcaF2Z(self, pcaf2z)

    def setI2Chi(self, i2Chi: "VectorDouble") -> "void":
        return _gstlearn.AnamDiscreteDD_setI2Chi(self, i2Chi)

# Register AnamDiscreteDD in _gstlearn:
_gstlearn.AnamDiscreteDD_swigregister(AnamDiscreteDD)

def AnamDiscreteDD_createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "AnamDiscreteDD *":
    return _gstlearn.AnamDiscreteDD_createFromNF(neutralFilename, verbose)

class AnamDiscreteIR(AnamDiscrete):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.AnamDiscreteIR_swiginit(self, _gstlearn.new_AnamDiscreteIR(*args))
    __swig_destroy__ = _gstlearn.delete_AnamDiscreteIR

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.AnamDiscreteIR_toString(self, strfmt)

    def dumpToNF(self, neutralFilename: "String const &", verbose: "bool"=False) -> "int":
        return _gstlearn.AnamDiscreteIR_dumpToNF(self, neutralFilename, verbose)

    @staticmethod
    def createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "AnamDiscreteIR *":
        return _gstlearn.AnamDiscreteIR_createFromNF(neutralFilename, verbose)

    def getType(self) -> "EAnam const &":
        return _gstlearn.AnamDiscreteIR_getType(self)

    def calculateMeanAndVariance(self) -> "void":
        return _gstlearn.AnamDiscreteIR_calculateMeanAndVariance(self)

    def z2f(self, nfact: "int", ifacs: "VectorInt", z: "double") -> "VectorDouble":
        return _gstlearn.AnamDiscreteIR_z2f(self, nfact, ifacs, z)

    def create(self, rcoef: "double"=0.) -> "AnamDiscreteIR *":
        return _gstlearn.AnamDiscreteIR_create(self, rcoef)

    def fit(self, tab: "VectorDouble", verbose: "int"=0) -> "int":
        return _gstlearn.AnamDiscreteIR_fit(self, tab, verbose)

    def getRCoef(self) -> "double":
        return _gstlearn.AnamDiscreteIR_getRCoef(self)

    def setRCoef(self, rcoef: "double") -> "void":
        return _gstlearn.AnamDiscreteIR_setRCoef(self, rcoef)

# Register AnamDiscreteIR in _gstlearn:
_gstlearn.AnamDiscreteIR_swigregister(AnamDiscreteIR)

def AnamDiscreteIR_createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "AnamDiscreteIR *":
    return _gstlearn.AnamDiscreteIR_createFromNF(neutralFilename, verbose)

class EAnamIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EAnamIterator

    def __init__(self, arg2: "EAnamIterator"):
        _gstlearn.EAnamIterator_swiginit(self, _gstlearn.new_EAnamIterator(arg2))

    def __ref__(self) -> "EAnam const &":
        return _gstlearn.EAnamIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.EAnamIterator_hasNext(self)

    def toNext(self) -> "EAnam const &":
        return _gstlearn.EAnamIterator_toNext(self)

    def toFront(self) -> "EAnam const &":
        return _gstlearn.EAnamIterator_toFront(self)

    def getEnum(self) -> "EAnam const &":
        return _gstlearn.EAnamIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.EAnamIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.EAnamIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.EAnamIterator_getDescr(self)

# Register EAnamIterator in _gstlearn:
_gstlearn.EAnamIterator_swigregister(EAnamIterator)

class EAnam(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EAnam

    def __init__(self, *args):
        _gstlearn.EAnam_swiginit(self, _gstlearn.new_EAnam(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.EAnam_getSize()

    @staticmethod
    def getIterator() -> "EAnamIterator":
        return _gstlearn.EAnam_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.EAnam_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.EAnam_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "EAnam const &":
        return _gstlearn.EAnam_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "EAnam const &":
        return _gstlearn.EAnam_fromValue(value)
    E_EXTERNAL = _gstlearn.EAnam_E_EXTERNAL
    E_HERMITIAN = _gstlearn.EAnam_E_HERMITIAN
    E_EMPIRICAL = _gstlearn.EAnam_E_EMPIRICAL
    E_DISCRETE_DD = _gstlearn.EAnam_E_DISCRETE_DD
    E_DISCRETE_IR = _gstlearn.EAnam_E_DISCRETE_IR

    def toEnum(self) -> "EAnam::EEAnam":
        return _gstlearn.EAnam_toEnum(self)

# Register EAnam in _gstlearn:
_gstlearn.EAnam_swigregister(EAnam)

def EAnam_getSize() -> "size_t":
    return _gstlearn.EAnam_getSize()

def EAnam_getIterator() -> "EAnamIterator":
    return _gstlearn.EAnam_getIterator()

def EAnam_existsKey(key: "String const &") -> "bool":
    return _gstlearn.EAnam_existsKey(key)

def EAnam_existsValue(value: "int") -> "bool":
    return _gstlearn.EAnam_existsValue(value)

def EAnam_fromKey(key: "String const &") -> "EAnam const &":
    return _gstlearn.EAnam_fromKey(key)

def EAnam_fromValue(value: "int") -> "EAnam const &":
    return _gstlearn.EAnam_fromValue(value)
EAnam.EXTERNAL = _gstlearn.cvar.EAnam_EXTERNAL
EAnam.HERMITIAN = _gstlearn.cvar.EAnam_HERMITIAN
EAnam.EMPIRICAL = _gstlearn.cvar.EAnam_EMPIRICAL
EAnam.DISCRETE_DD = _gstlearn.cvar.EAnam_DISCRETE_DD
EAnam.DISCRETE_IR = _gstlearn.cvar.EAnam_DISCRETE_IR

class AGibbs(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_AGibbs

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.AGibbs_toString(self, strfmt)

    def calculInitialize(self, y: "VectorVectorDouble", isimu: "int", ipgs: "int") -> "int":
        return _gstlearn.AGibbs_calculInitialize(self, y, isimu, ipgs)

    def update(self, y: "VectorVectorDouble", isimu: "int", ipgs: "int", iter: "int") -> "void":
        return _gstlearn.AGibbs_update(self, y, isimu, ipgs, iter)

    def covmatAlloc(self, verbose: "bool", verboseTimer: "bool"=False) -> "int":
        return _gstlearn.AGibbs_covmatAlloc(self, verbose, verboseTimer)

    def getSimulate(self, y: "VectorVectorDouble", yk: "double", sk: "double", ipgs: "int", ivar: "int", iact: "int", iter: "int") -> "double":
        return _gstlearn.AGibbs_getSimulate(self, y, yk, sk, ipgs, ivar, iact, iter)

    def checkGibbs(self, y: "VectorVectorDouble", isimu: "int", ipgs: "int") -> "int":
        return _gstlearn.AGibbs_checkGibbs(self, y, isimu, ipgs)

    def run(self, y: "VectorVectorDouble", ipgs: "int"=0, isimu: "int"=0, verbose: "bool"=False, flagCheck: "bool"=False) -> "int":
        return _gstlearn.AGibbs_run(self, y, ipgs, isimu, verbose, flagCheck)

    def cleanup(self) -> "void":
        return _gstlearn.AGibbs_cleanup(self)

    def init(self, npgs: "int", nvar: "int", nburn: "int", niter: "int", flag_order: "int", flag_decay: "bool") -> "void":
        return _gstlearn.AGibbs_init(self, npgs, nvar, nburn, niter, flag_order, flag_decay)

    def getBoundsDecay(self, iter: "int", vmin: "double *", vmax: "double *") -> "void":
        return _gstlearn.AGibbs_getBoundsDecay(self, iter, vmin, vmax)

    def getNvar(self) -> "int":
        return _gstlearn.AGibbs_getNvar(self)

    def setNvar(self, nvar: "int") -> "void":
        return _gstlearn.AGibbs_setNvar(self, nvar)

    def getNpgs(self) -> "int":
        return _gstlearn.AGibbs_getNpgs(self)

    def setNpgs(self, npgs: "int") -> "void":
        return _gstlearn.AGibbs_setNpgs(self, npgs)

    def getNburn(self) -> "int":
        return _gstlearn.AGibbs_getNburn(self)

    def setNburn(self, nburn: "int") -> "void":
        return _gstlearn.AGibbs_setNburn(self, nburn)

    def getNiter(self) -> "int":
        return _gstlearn.AGibbs_getNiter(self)

    def setNiter(self, niter: "int") -> "void":
        return _gstlearn.AGibbs_setNiter(self, niter)

    def getFlagOrder(self) -> "int":
        return _gstlearn.AGibbs_getFlagOrder(self)

    def setFlagOrder(self, flagOrder: "int") -> "void":
        return _gstlearn.AGibbs_setFlagOrder(self, flagOrder)

    def getOptionStats(self) -> "bool":
        return _gstlearn.AGibbs_getOptionStats(self)

    def setOptionStats(self, option_stats: "int") -> "void":
        return _gstlearn.AGibbs_setOptionStats(self, option_stats)

    def getDb(self) -> "Db *":
        return _gstlearn.AGibbs_getDb(self)

    def getDimension(self) -> "int":
        return _gstlearn.AGibbs_getDimension(self)

    def getRank(self, ipgs: "int", ivar: "int") -> "int":
        return _gstlearn.AGibbs_getRank(self, ipgs, ivar)

    def allocY(self) -> "VectorVectorDouble":
        return _gstlearn.AGibbs_allocY(self)

    def storeResult(self, y: "VectorVectorDouble", isimu: "int", ipgs: "int") -> "void":
        return _gstlearn.AGibbs_storeResult(self, y, isimu, ipgs)

    def getSampleNumber(self) -> "int":
        return _gstlearn.AGibbs_getSampleNumber(self)

    def getSampleRankNumber(self) -> "int":
        return _gstlearn.AGibbs_getSampleRankNumber(self)

    def getSampleRank(self, i: "int") -> "int":
        return _gstlearn.AGibbs_getSampleRank(self, i)

    def calculateSampleRanks(self) -> "VectorInt":
        return _gstlearn.AGibbs_calculateSampleRanks(self)

    def updateStats(self, y: "VectorVectorDouble", ipgs: "int", iter: "int", amort: "double"=0.9) -> "void":
        return _gstlearn.AGibbs_updateStats(self, y, ipgs, iter, amort)

    def isConstraintTight(self, ipgs: "int", ivar: "int", iact: "int", value: "double *") -> "bool":
        return _gstlearn.AGibbs_isConstraintTight(self, ipgs, ivar, iact, value)

    def statsInit(self) -> "void":
        return _gstlearn.AGibbs_statsInit(self)

    def getFlagDecay(self) -> "bool":
        return _gstlearn.AGibbs_getFlagDecay(self)

    def getRelativeRank(self, iech: "int") -> "int":
        return _gstlearn.AGibbs_getRelativeRank(self, iech)

# Register AGibbs in _gstlearn:
_gstlearn.AGibbs_swigregister(AGibbs)

class GibbsMulti(AGibbs):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_GibbsMulti

    def calculInitialize(self, y: "VectorVectorDouble", isimu: "int", ipgs: "int") -> "int":
        return _gstlearn.GibbsMulti_calculInitialize(self, y, isimu, ipgs)

    def getSimulate(self, y: "VectorVectorDouble", yk: "double", sk: "double", ipgs: "int", ivar: "int", iact: "int", iter: "int") -> "double":
        return _gstlearn.GibbsMulti_getSimulate(self, y, yk, sk, ipgs, ivar, iact, iter)

    def checkGibbs(self, y: "VectorVectorDouble", isimu: "int", ipgs: "int") -> "int":
        return _gstlearn.GibbsMulti_checkGibbs(self, y, isimu, ipgs)

    def getModel(self) -> "Model *":
        return _gstlearn.GibbsMulti_getModel(self)

# Register GibbsMulti in _gstlearn:
_gstlearn.GibbsMulti_swigregister(GibbsMulti)

class GibbsMMulti(GibbsMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GibbsMMulti_swiginit(self, _gstlearn.new_GibbsMMulti(*args))
    __swig_destroy__ = _gstlearn.delete_GibbsMMulti

    def update(self, y: "VectorVectorDouble", isimu: "int", ipgs: "int", iter: "int") -> "void":
        return _gstlearn.GibbsMMulti_update(self, y, isimu, ipgs, iter)

    def covmatAlloc(self, verbose: "bool", verboseTimer: "bool"=False) -> "int":
        return _gstlearn.GibbsMMulti_covmatAlloc(self, verbose, verboseTimer)

    def setEps(self, eps: "double") -> "void":
        return _gstlearn.GibbsMMulti_setEps(self, eps)

    def setStoreTables(self, storeTables: "bool") -> "void":
        return _gstlearn.GibbsMMulti_setStoreTables(self, storeTables)

    def cleanup(self) -> "void":
        return _gstlearn.GibbsMMulti_cleanup(self)

    def getFlagStoreInternal(self) -> "bool":
        return _gstlearn.GibbsMMulti_getFlagStoreInternal(self)

    def setFlagStoreInternal(self, flagStoreInternal: "bool") -> "void":
        return _gstlearn.GibbsMMulti_setFlagStoreInternal(self, flagStoreInternal)

# Register GibbsMMulti in _gstlearn:
_gstlearn.GibbsMMulti_swigregister(GibbsMMulti)

class GibbsUMulti(GibbsMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GibbsUMulti_swiginit(self, _gstlearn.new_GibbsUMulti(*args))
    __swig_destroy__ = _gstlearn.delete_GibbsUMulti

    def update(self, y: "VectorVectorDouble", isimu: "int", ipgs: "int", iter: "int") -> "void":
        return _gstlearn.GibbsUMulti_update(self, y, isimu, ipgs, iter)

    def covmatAlloc(self, verbose: "bool", verboseTimer: "bool"=False) -> "int":
        return _gstlearn.GibbsUMulti_covmatAlloc(self, verbose, verboseTimer)

# Register GibbsUMulti in _gstlearn:
_gstlearn.GibbsUMulti_swigregister(GibbsUMulti)


def morpho_image_size(nx: "VectorInt") -> "int":
    return _gstlearn.morpho_image_size(nx)

def morpho_count(nx: "VectorInt", imagin: "VectorUChar") -> "int":
    return _gstlearn.morpho_count(nx, imagin)

def morpho_image_manage(nx: "VectorInt") -> "VectorUChar":
    return _gstlearn.morpho_image_manage(nx)

def morpho_duplicate(nx: "VectorInt", imagin: "VectorUChar", imagout: "VectorUChar") -> "void":
    return _gstlearn.morpho_duplicate(nx, imagin, imagout)

def morpho_labelling(*args) -> "VectorDouble":
    return _gstlearn.morpho_labelling(*args)

def morpho_labelsize(nx: "VectorInt", option: "int", imagin: "VectorUChar") -> "VectorInt":
    return _gstlearn.morpho_labelsize(nx, option, imagin)

def morpho_erosion(nx: "VectorInt", option: "int", radius: "VectorInt", imagin: "VectorUChar", imagout: "VectorUChar", verbose: "bool"=False) -> "void":
    return _gstlearn.morpho_erosion(nx, option, radius, imagin, imagout, verbose)

def morpho_dilation(nx: "VectorInt", option: "int", radius: "VectorInt", imagin: "VectorUChar", imagout: "VectorUChar", verbose: "bool"=False) -> "void":
    return _gstlearn.morpho_dilation(nx, option, radius, imagin, imagout, verbose)

def morpho_intersection(nx: "VectorInt", image1: "VectorUChar", image2: "VectorUChar", imagout: "VectorUChar", verbose: "bool"=False) -> "void":
    return _gstlearn.morpho_intersection(nx, image1, image2, imagout, verbose)

def morpho_union(nx: "VectorInt", image1: "VectorUChar", image2: "VectorUChar", imagout: "VectorUChar", verbose: "bool"=False) -> "void":
    return _gstlearn.morpho_union(nx, image1, image2, imagout, verbose)

def morpho_opening(nx: "VectorInt", option: "int", radius: "VectorInt", imagin: "VectorUChar", imagout: "VectorUChar") -> "void":
    return _gstlearn.morpho_opening(nx, option, radius, imagin, imagout)

def morpho_closing(nx: "VectorInt", option: "int", radius: "VectorInt", imagin: "VectorUChar", imagout: "VectorUChar") -> "void":
    return _gstlearn.morpho_closing(nx, option, radius, imagin, imagout)

def morpho_negation(nx: "VectorInt", imagin: "VectorUChar", imagout: "VectorUChar", verbse: "bool"=False) -> "void":
    return _gstlearn.morpho_negation(nx, imagin, imagout, verbse)

def morpho_double2image(*args) -> "VectorUChar":
    return _gstlearn.morpho_double2image(*args)

def morpho_image2double(nx: "VectorInt", imagin: "VectorUChar", mode: "int", grain: "double", pore: "double", tab: "VectorDouble", verbose: "bool"=False) -> "void":
    return _gstlearn.morpho_image2double(nx, imagin, mode, grain, pore, tab, verbose)

def morpho_distance(nx: "VectorInt", option: "int", radius: "VectorInt", flag_erode: "int", imagin: "VectorUChar", dist: "VectorDouble") -> "void":
    return _gstlearn.morpho_distance(nx, option, radius, flag_erode, imagin, dist)

def morpho_angle(nx: "VectorInt", radius: "int", tab: "double *", tabout: "double *") -> "void":
    return _gstlearn.morpho_angle(nx, radius, tab, tabout)

def bitmap_print(nx: "VectorInt", imagin: "VectorUChar") -> "void":
    return _gstlearn.bitmap_print(nx, imagin)

def bitmap_size(nx: "VectorInt") -> "int":
    return _gstlearn.bitmap_size(nx)

def bitmap_get_value(nx: "VectorInt", imagin: "VectorUChar", ix: "int", iy: "int", iz: "int") -> "int":
    return _gstlearn.bitmap_get_value(nx, imagin, ix, iy, iz)

def bitmap_set_value(nx: "VectorInt", imagout: "VectorUChar", ix: "int", iy: "int", iz: "int", bitval: "int") -> "void":
    return _gstlearn.bitmap_set_value(nx, imagout, ix, iy, iz, bitval)

def gridcell_neigh(ndim: "int", option: "int", radius: "int", flag_center: "int", verbose: "int", nvois: "int *") -> "VectorInt":
    return _gstlearn.gridcell_neigh(ndim, option, radius, flag_center, verbose, nvois)
class Polygons(AStringable, ASerializable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Polygons_swiginit(self, _gstlearn.new_Polygons(*args))
    __swig_destroy__ = _gstlearn.delete_Polygons

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.Polygons_toString(self, strfmt)

    def resetFromDb(self, db: "Db") -> "int":
        return _gstlearn.Polygons_resetFromDb(self, db)

    def resetFromCSV(self, filename: "String const &", csv: "CSVformat", verbose: "int"=False, ncol_max: "int"=-1, nrow_max: "int"=-1) -> "int":
        return _gstlearn.Polygons_resetFromCSV(self, filename, csv, verbose, ncol_max, nrow_max)

    def dumpToNF(self, neutralFilename: "String const &", verbose: "bool"=False) -> "int":
        return _gstlearn.Polygons_dumpToNF(self, neutralFilename, verbose)

    @staticmethod
    def create() -> "Polygons *":
        return _gstlearn.Polygons_create()

    @staticmethod
    def createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "Polygons *":
        return _gstlearn.Polygons_createFromNF(neutralFilename, verbose)

    @staticmethod
    def createFromCSV(filename: "String const &", csv: "CSVformat", verbose: "int"=False, ncol_max: "int"=-1, nrow_max: "int"=-1) -> "Polygons *":
        return _gstlearn.Polygons_createFromCSV(filename, csv, verbose, ncol_max, nrow_max)

    @staticmethod
    def createFromDb(db: "Db") -> "Polygons *":
        return _gstlearn.Polygons_createFromDb(db)

    def getPolySetNumber(self) -> "int":
        return _gstlearn.Polygons_getPolySetNumber(self)

    def addPolySet(self, polyset: "PolySet") -> "void":
        return _gstlearn.Polygons_addPolySet(self, polyset)

    def getPolySets(self) -> "std::vector< PolySet,std::allocator< PolySet > > const &":
        return _gstlearn.Polygons_getPolySets(self)

    def getPolySet(self, ipol: "int") -> "PolySet const &":
        return _gstlearn.Polygons_getPolySet(self, ipol)

    def getX(self, ipol: "int") -> "VectorDouble const &":
        return _gstlearn.Polygons_getX(self, ipol)

    def getY(self, ipol: "int") -> "VectorDouble const &":
        return _gstlearn.Polygons_getY(self, ipol)

    def setX(self, ipol: "int", x: "VectorDouble") -> "void":
        return _gstlearn.Polygons_setX(self, ipol, x)

    def setY(self, ipol: "int", y: "VectorDouble") -> "void":
        return _gstlearn.Polygons_setY(self, ipol, y)

    def getExtension(self, xmin: "double *", xmax: "double *", ymin: "double *", ymax: "double *") -> "void":
        return _gstlearn.Polygons_getExtension(self, xmin, xmax, ymin, ymax)

    def getSurface(self) -> "double":
        return _gstlearn.Polygons_getSurface(self)

    def __repr__(self) -> "std::string":
        return _gstlearn.Polygons___repr__(self)

# Register Polygons in _gstlearn:
_gstlearn.Polygons_swigregister(Polygons)

def Polygons_create() -> "Polygons *":
    return _gstlearn.Polygons_create()

def Polygons_createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "Polygons *":
    return _gstlearn.Polygons_createFromNF(neutralFilename, verbose)

def Polygons_createFromCSV(filename: "String const &", csv: "CSVformat", verbose: "int"=False, ncol_max: "int"=-1, nrow_max: "int"=-1) -> "Polygons *":
    return _gstlearn.Polygons_createFromCSV(filename, csv, verbose, ncol_max, nrow_max)

def Polygons_createFromDb(db: "Db") -> "Polygons *":
    return _gstlearn.Polygons_createFromDb(db)

class PolySet(AStringable, ASerializable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.PolySet_swiginit(self, _gstlearn.new_PolySet(*args))
    __swig_destroy__ = _gstlearn.delete_PolySet

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.PolySet_toString(self, strfmt)

    def dumpToNF(self, neutralFilename: "String const &", verbose: "bool"=False) -> "int":
        return _gstlearn.PolySet_dumpToNF(self, neutralFilename, verbose)

    @staticmethod
    def create() -> "PolySet *":
        return _gstlearn.PolySet_create()

    @staticmethod
    def createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "PolySet *":
        return _gstlearn.PolySet_createFromNF(neutralFilename, verbose)

    def getNVertices(self) -> "int":
        return _gstlearn.PolySet_getNVertices(self)

    def getX(self, *args) -> "double":
        return _gstlearn.PolySet_getX(self, *args)

    def getY(self, *args) -> "double":
        return _gstlearn.PolySet_getY(self, *args)

    def getZmax(self) -> "double":
        return _gstlearn.PolySet_getZmax(self)

    def getZmin(self) -> "double":
        return _gstlearn.PolySet_getZmin(self)

    def init(self, x: "VectorDouble", y: "VectorDouble", zmin: "double"=1.234e30, zmax: "double"=1.234e30) -> "void":
        return _gstlearn.PolySet_init(self, x, y, zmin, zmax)

    def getExtension(self, xmin: "double *", xmax: "double *", ymin: "double *", ymax: "double *") -> "void":
        return _gstlearn.PolySet_getExtension(self, xmin, xmax, ymin, ymax)

    def getSurface(self) -> "double":
        return _gstlearn.PolySet_getSurface(self)

    def setX(self, x: "VectorDouble") -> "void":
        return _gstlearn.PolySet_setX(self, x)

    def setY(self, y: "VectorDouble") -> "void":
        return _gstlearn.PolySet_setY(self, y)

# Register PolySet in _gstlearn:
_gstlearn.PolySet_swigregister(PolySet)

def PolySet_create() -> "PolySet *":
    return _gstlearn.PolySet_create()

def PolySet_createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "PolySet *":
    return _gstlearn.PolySet_createFromNF(neutralFilename, verbose)

STAT_UNKNOWN = _gstlearn.STAT_UNKNOWN
STAT_NUM = _gstlearn.STAT_NUM
STAT_MEAN = _gstlearn.STAT_MEAN
STAT_VAR = _gstlearn.STAT_VAR
STAT_STDV = _gstlearn.STAT_STDV
STAT_MINI = _gstlearn.STAT_MINI
STAT_MAXI = _gstlearn.STAT_MAXI
STAT_SUM = _gstlearn.STAT_SUM
STAT_PROP = _gstlearn.STAT_PROP
STAT_QUANT = _gstlearn.STAT_QUANT
STAT_T = _gstlearn.STAT_T
STAT_Q = _gstlearn.STAT_Q
STAT_M = _gstlearn.STAT_M
STAT_B = _gstlearn.STAT_B

def statsName(ioper: "int") -> "String":
    return _gstlearn.statsName(ioper)

def statsList(opers: "VectorString") -> "VectorInt":
    return _gstlearn.statsList(opers)

def statsNames(iopers: "VectorInt") -> "VectorString":
    return _gstlearn.statsNames(iopers)

def dbStatisticsVariables(db: "Db", iatts: "VectorInt", iopers: "VectorInt", iattn: "int", vmin: "double"=1.234e30, vmax: "double"=1.234e30, proba: "double"=1.234e30) -> "void":
    return _gstlearn.dbStatisticsVariables(db, iatts, iopers, iattn, vmin, vmax, proba)

def dbStatisticsMono(*args, **kwargs) -> "VectorDouble":
    return _gstlearn.dbStatisticsMono(*args, **kwargs)

def dbStatisticsMulti(db: "Db", iatts: "VectorInt", flagIso: "bool"=True) -> "VectorDouble":
    return _gstlearn.dbStatisticsMulti(db, iatts, flagIso)

def dbStatisticsFacies(db: "Db") -> "VectorDouble":
    return _gstlearn.dbStatisticsFacies(db)

def dbStatisticsIndicator(db: "Db") -> "double":
    return _gstlearn.dbStatisticsIndicator(db)

def statisticsMonoPrint(*args, **kwargs) -> "String":
    return _gstlearn.statisticsMonoPrint(*args, **kwargs)

def statisticsMultiPrint(*args, **kwargs) -> "String":
    return _gstlearn.statisticsMultiPrint(*args, **kwargs)
class PCA(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.PCA_swiginit(self, _gstlearn.new_PCA(*args))
    __swig_destroy__ = _gstlearn.delete_PCA

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.PCA_toString(self, strfmt)

    def init(self, nvar: "int") -> "void":
        return _gstlearn.PCA_init(self, nvar)

    def clean(self) -> "void":
        return _gstlearn.PCA_clean(self)

    def calculateEigen(self, nvar: "int", c0: "VectorDouble") -> "int":
        return _gstlearn.PCA_calculateEigen(self, nvar, c0)

    def getEigen(self, *args) -> "double":
        return _gstlearn.PCA_getEigen(self, *args)

    def getMean(self, *args) -> "double":
        return _gstlearn.PCA_getMean(self, *args)

    def getNVar(self) -> "int":
        return _gstlearn.PCA_getNVar(self)

    def getF2Z(self, *args) -> "double":
        return _gstlearn.PCA_getF2Z(self, *args)

    def getZ2F(self, *args) -> "double":
        return _gstlearn.PCA_getZ2F(self, *args)

    def getSigma(self, *args) -> "double":
        return _gstlearn.PCA_getSigma(self, *args)

    def setPcaZ2F(self, *args) -> "void":
        return _gstlearn.PCA_setPcaZ2F(self, *args)

    def setPcaF2Z(self, pcaf2z: "VectorDouble") -> "void":
        return _gstlearn.PCA_setPcaF2Z(self, pcaf2z)

    def setEigen(self, *args) -> "void":
        return _gstlearn.PCA_setEigen(self, *args)

    def setMean(self, mean: "VectorDouble") -> "void":
        return _gstlearn.PCA_setMean(self, mean)

    def setSigma(self, sigma: "VectorDouble") -> "void":
        return _gstlearn.PCA_setSigma(self, sigma)

    def compute(self, db: "Db", verbose: "bool"=False) -> "int":
        return _gstlearn.PCA_compute(self, db, verbose)

    def dbZ2F(self, *args, **kwargs) -> "int":
        return _gstlearn.PCA_dbZ2F(self, *args, **kwargs)

    def dbF2Z(self, *args, **kwargs) -> "int":
        return _gstlearn.PCA_dbF2Z(self, *args, **kwargs)

# Register PCA in _gstlearn:
_gstlearn.PCA_swigregister(PCA)

class PCAStringFormat(AStringFormat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.PCAStringFormat_swiginit(self, _gstlearn.new_PCAStringFormat(*args))
    __swig_destroy__ = _gstlearn.delete_PCAStringFormat

    def getflagCenter(self) -> "bool":
        return _gstlearn.PCAStringFormat_getflagCenter(self)

    def getflagStats(self) -> "bool":
        return _gstlearn.PCAStringFormat_getflagStats(self)

    def setflagCenter(self, flagCenter: "bool") -> "void":
        return _gstlearn.PCAStringFormat_setflagCenter(self, flagCenter)

    def setflagStats(self, flagStats: "bool") -> "void":
        return _gstlearn.PCAStringFormat_setflagStats(self, flagStats)

# Register PCAStringFormat in _gstlearn:
_gstlearn.PCAStringFormat_swigregister(PCAStringFormat)

class Rule(AStringable, ASerializable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Rule_swiginit(self, _gstlearn.new_Rule(*args))
    __swig_destroy__ = _gstlearn.delete_Rule

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.Rule_toString(self, strfmt)

    def resetFromNames(self, nodnames: "VectorString", rho: "double"=0.) -> "int":
        return _gstlearn.Rule_resetFromNames(self, nodnames, rho)

    def resetFromCodes(self, nodes: "VectorInt", rho: "double"=0.) -> "int":
        return _gstlearn.Rule_resetFromCodes(self, nodes, rho)

    def resetFromNumericalCoding(self, n_type: "VectorInt", n_facs: "VectorInt", rho: "double"=0.) -> "int":
        return _gstlearn.Rule_resetFromNumericalCoding(self, n_type, n_facs, rho)

    def resetFromFaciesCount(self, nfacies: "int", rho: "double"=0.) -> "int":
        return _gstlearn.Rule_resetFromFaciesCount(self, nfacies, rho)

    def dumpToNF(self, neutralFilename: "String const &", verbose: "bool"=False) -> "int":
        return _gstlearn.Rule_dumpToNF(self, neutralFilename, verbose)

    @staticmethod
    def create(rho: "double"=0.) -> "Rule *":
        return _gstlearn.Rule_create(rho)

    @staticmethod
    def createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "Rule *":
        return _gstlearn.Rule_createFromNF(neutralFilename, verbose)

    @staticmethod
    def createFromNames(nodnames: "VectorString", rho: "double"=0.) -> "Rule *":
        return _gstlearn.Rule_createFromNames(nodnames, rho)

    @staticmethod
    def createFromCodes(nodes: "VectorInt", rho: "double"=0.) -> "Rule *":
        return _gstlearn.Rule_createFromCodes(nodes, rho)

    @staticmethod
    def createFromNumericalCoding(n_type: "VectorInt", n_facs: "VectorInt", rho: "double"=0.) -> "Rule *":
        return _gstlearn.Rule_createFromNumericalCoding(n_type, n_facs, rho)

    @staticmethod
    def createFromFaciesCount(nfacies: "int", rho: "double"=0.) -> "Rule *":
        return _gstlearn.Rule_createFromFaciesCount(nfacies, rho)

    def displaySpecific(self) -> "String":
        return _gstlearn.Rule_displaySpecific(self)

    def particularities(self, db: "Db", dbprop: "Db", model: "Model", flag_grid_check: "int", flag_stat: "int") -> "int":
        return _gstlearn.Rule_particularities(self, db, dbprop, model, flag_grid_check, flag_stat)

    def checkModel(self, model: "Model", nvar: "int"=0) -> "bool":
        return _gstlearn.Rule_checkModel(self, model, nvar)

    def gaus2facData(self, propdef: "PropDef *", dbin: "Db", dbout: "Db", flag_used: "int *", ipgs: "int", isimu: "int", nbsimu: "int") -> "int":
        return _gstlearn.Rule_gaus2facData(self, propdef, dbin, dbout, flag_used, ipgs, isimu, nbsimu)

    def gaus2facResult(self, propdef: "PropDef *", dbout: "Db", flag_used: "int *", ipgs: "int", isimu: "int", nbsimu: "int") -> "int":
        return _gstlearn.Rule_gaus2facResult(self, propdef, dbout, flag_used, ipgs, isimu, nbsimu)

    def evaluateBounds(self, propdef: "PropDef *", dbin: "Db", dbout: "Db", isimu: "int", igrf: "int", ipgs: "int", nbsimu: "int") -> "int":
        return _gstlearn.Rule_evaluateBounds(self, propdef, dbin, dbout, isimu, igrf, ipgs, nbsimu)

    def getFlagProp(self) -> "int":
        return _gstlearn.Rule_getFlagProp(self)

    def getModeRule(self) -> "ERule const &":
        return _gstlearn.Rule_getModeRule(self)

    def getRho(self) -> "double":
        return _gstlearn.Rule_getRho(self)

    def getMainNode(self) -> "Node const *":
        return _gstlearn.Rule_getMainNode(self)

    def setFlagProp(self, flagProp: "int") -> "void":
        return _gstlearn.Rule_setFlagProp(self, flagProp)

    def setRho(self, rho: "double") -> "void":
        return _gstlearn.Rule_setRho(self, rho)

    def setModeRule(self, modeRule: "ERule") -> "void":
        return _gstlearn.Rule_setModeRule(self, modeRule)

    def setProportions(self, *args, **kwargs) -> "int":
        return _gstlearn.Rule_setProportions(self, *args, **kwargs)

    def statistics(self, verbose: "int", node_tot: "int *", nfac_tot: "int *", nmax_tot: "int *", ny1_tot: "int *", ny2_tot: "int *", prop_tot: "double *") -> "int":
        return _gstlearn.Rule_statistics(self, verbose, node_tot, nfac_tot, nmax_tot, ny1_tot, ny2_tot, prop_tot)

    def getFaciesNumber(self) -> "int":
        return _gstlearn.Rule_getFaciesNumber(self)

    def getGRFNumber(self) -> "int":
        return _gstlearn.Rule_getGRFNumber(self)

    def getY1Number(self) -> "int":
        return _gstlearn.Rule_getY1Number(self)

    def getY2Number(self) -> "int":
        return _gstlearn.Rule_getY2Number(self)

    def isYUsed(self, igrf: "int") -> "bool":
        return _gstlearn.Rule_isYUsed(self, igrf)

    def whichGRFUsed(self) -> "VectorInt":
        return _gstlearn.Rule_whichGRFUsed(self)

    def getProportion(self, facies: "int") -> "double":
        return _gstlearn.Rule_getProportion(self, facies)

    def getThresh(self, facies: "int") -> "VectorDouble":
        return _gstlearn.Rule_getThresh(self, facies)

    def getThreshFromRectangle(self, rect: "int", facies: "int *") -> "VectorDouble":
        return _gstlearn.Rule_getThreshFromRectangle(self, rect, facies)

    def getFaciesFromGaussian(self, y1: "double", y2: "double") -> "int":
        return _gstlearn.Rule_getFaciesFromGaussian(self, y1, y2)

    def updateShift(self) -> "void":
        return _gstlearn.Rule_updateShift(self)

    def __repr__(self) -> "std::string":
        return _gstlearn.Rule___repr__(self)

# Register Rule in _gstlearn:
_gstlearn.Rule_swigregister(Rule)

def Rule_create(rho: "double"=0.) -> "Rule *":
    return _gstlearn.Rule_create(rho)

def Rule_createFromNF(neutralFilename: "String const &", verbose: "bool"=False) -> "Rule *":
    return _gstlearn.Rule_createFromNF(neutralFilename, verbose)

def Rule_createFromNames(nodnames: "VectorString", rho: "double"=0.) -> "Rule *":
    return _gstlearn.Rule_createFromNames(nodnames, rho)

def Rule_createFromCodes(nodes: "VectorInt", rho: "double"=0.) -> "Rule *":
    return _gstlearn.Rule_createFromCodes(nodes, rho)

def Rule_createFromNumericalCoding(n_type: "VectorInt", n_facs: "VectorInt", rho: "double"=0.) -> "Rule *":
    return _gstlearn.Rule_createFromNumericalCoding(n_type, n_facs, rho)

def Rule_createFromFaciesCount(nfacies: "int", rho: "double"=0.) -> "Rule *":
    return _gstlearn.Rule_createFromFaciesCount(nfacies, rho)


def set_rule_mode(rule_mode: "int") -> "void":
    return _gstlearn.set_rule_mode(rule_mode)

def get_rule_mode() -> "int":
    return _gstlearn.get_rule_mode()

def get_rule_extreme(mode: "int") -> "double":
    return _gstlearn.get_rule_extreme(mode)
class RuleStringFormat(AStringFormat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.RuleStringFormat_swiginit(self, _gstlearn.new_RuleStringFormat(*args))
    __swig_destroy__ = _gstlearn.delete_RuleStringFormat

    def getFlagProp(self) -> "bool":
        return _gstlearn.RuleStringFormat_getFlagProp(self)

    def getFlagThresh(self) -> "bool":
        return _gstlearn.RuleStringFormat_getFlagThresh(self)

    def setFlagProp(self, flagProp: "bool") -> "void":
        return _gstlearn.RuleStringFormat_setFlagProp(self, flagProp)

    def setFlagThresh(self, flagThresh: "bool") -> "void":
        return _gstlearn.RuleStringFormat_setFlagThresh(self, flagThresh)

# Register RuleStringFormat in _gstlearn:
_gstlearn.RuleStringFormat_swigregister(RuleStringFormat)

class RuleProp(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.RuleProp_swiginit(self, _gstlearn.new_RuleProp(*args))
    __swig_destroy__ = _gstlearn.delete_RuleProp

    def toString(self, strfmt: "AStringFormat"=None) -> "String":
        return _gstlearn.RuleProp_toString(self, strfmt)

    def resetFromDb(self, *args, **kwargs) -> "int":
        return _gstlearn.RuleProp_resetFromDb(self, *args, **kwargs)

    def resetFromRule(self, *args, **kwargs) -> "int":
        return _gstlearn.RuleProp_resetFromRule(self, *args, **kwargs)

    def resetFromRuleAndDb(self, rule: "Rule", dbprop: "Db") -> "int":
        return _gstlearn.RuleProp_resetFromRuleAndDb(self, rule, dbprop)

    def resetFromRules(self, *args, **kwargs) -> "int":
        return _gstlearn.RuleProp_resetFromRules(self, *args, **kwargs)

    def resetFromRulesAndDb(self, rule1: "Rule", rule2: "Rule", dbprop: "Db") -> "int":
        return _gstlearn.RuleProp_resetFromRulesAndDb(self, rule1, rule2, dbprop)

    @staticmethod
    def createFromDb(*args, **kwargs) -> "RuleProp *":
        return _gstlearn.RuleProp_createFromDb(*args, **kwargs)

    @staticmethod
    def createFromRule(*args, **kwargs) -> "RuleProp *":
        return _gstlearn.RuleProp_createFromRule(*args, **kwargs)

    @staticmethod
    def createFromRuleAndDb(rule: "Rule", dbprop: "Db") -> "RuleProp *":
        return _gstlearn.RuleProp_createFromRuleAndDb(rule, dbprop)

    @staticmethod
    def createFromRules(*args, **kwargs) -> "RuleProp *":
        return _gstlearn.RuleProp_createFromRules(*args, **kwargs)

    @staticmethod
    def createFromRulesAndDb(rule1: "Rule", rule2: "Rule", dbprop: "Db") -> "RuleProp *":
        return _gstlearn.RuleProp_createFromRulesAndDb(rule1, rule2, dbprop)

    def getDbprop(self) -> "Db const *":
        return _gstlearn.RuleProp_getDbprop(self)

    def setDbprop(self, dbprop: "Db") -> "void":
        return _gstlearn.RuleProp_setDbprop(self, dbprop)

    def isFlagStat(self) -> "bool":
        return _gstlearn.RuleProp_isFlagStat(self)

    def setFlagStat(self, flagStat: "bool") -> "void":
        return _gstlearn.RuleProp_setFlagStat(self, flagStat)

    def getPropCst(self) -> "VectorDouble const &":
        return _gstlearn.RuleProp_getPropCst(self)

    def setPropCst(self, propcst: "VectorDouble") -> "void":
        return _gstlearn.RuleProp_setPropCst(self, propcst)

    def getRule(self, rank: "int"=0) -> "Rule const *":
        return _gstlearn.RuleProp_getRule(self, rank)

    def addRule(self, rule: "Rule") -> "void":
        return _gstlearn.RuleProp_addRule(self, rule)

    def clearRule(self) -> "void":
        return _gstlearn.RuleProp_clearRule(self)

    def getRuleNumber(self) -> "int":
        return _gstlearn.RuleProp_getRuleNumber(self)

    def fit(self, db: "Db", varioparam: "VarioParam", ngrfmax: "int"=1, verbose: "bool"=False) -> "int":
        return _gstlearn.RuleProp_fit(self, db, varioparam, ngrfmax, verbose)

    def gaussToCategory(self, *args, **kwargs) -> "int":
        return _gstlearn.RuleProp_gaussToCategory(self, *args, **kwargs)

    def categoryToThresh(self, *args, **kwargs) -> "int":
        return _gstlearn.RuleProp_categoryToThresh(self, *args, **kwargs)

    def computeAllThreshes(self, *args, **kwargs) -> "int":
        return _gstlearn.RuleProp_computeAllThreshes(self, *args, **kwargs)

# Register RuleProp in _gstlearn:
_gstlearn.RuleProp_swigregister(RuleProp)

def RuleProp_createFromDb(*args, **kwargs) -> "RuleProp *":
    return _gstlearn.RuleProp_createFromDb(*args, **kwargs)

def RuleProp_createFromRule(*args, **kwargs) -> "RuleProp *":
    return _gstlearn.RuleProp_createFromRule(*args, **kwargs)

def RuleProp_createFromRuleAndDb(rule: "Rule", dbprop: "Db") -> "RuleProp *":
    return _gstlearn.RuleProp_createFromRuleAndDb(rule, dbprop)

def RuleProp_createFromRules(*args, **kwargs) -> "RuleProp *":
    return _gstlearn.RuleProp_createFromRules(*args, **kwargs)

def RuleProp_createFromRulesAndDb(rule1: "Rule", rule2: "Rule", dbprop: "Db") -> "RuleProp *":
    return _gstlearn.RuleProp_createFromRulesAndDb(rule1, rule2, dbprop)

class ERuleIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ERuleIterator

    def __init__(self, arg2: "ERuleIterator"):
        _gstlearn.ERuleIterator_swiginit(self, _gstlearn.new_ERuleIterator(arg2))

    def __ref__(self) -> "ERule const &":
        return _gstlearn.ERuleIterator___ref__(self)

    def hasNext(self) -> "bool":
        return _gstlearn.ERuleIterator_hasNext(self)

    def toNext(self) -> "ERule const &":
        return _gstlearn.ERuleIterator_toNext(self)

    def toFront(self) -> "ERule const &":
        return _gstlearn.ERuleIterator_toFront(self)

    def getEnum(self) -> "ERule const &":
        return _gstlearn.ERuleIterator_getEnum(self)

    def getValue(self) -> "int":
        return _gstlearn.ERuleIterator_getValue(self)

    def getKey(self) -> "String const &":
        return _gstlearn.ERuleIterator_getKey(self)

    def getDescr(self) -> "String const &":
        return _gstlearn.ERuleIterator_getDescr(self)

# Register ERuleIterator in _gstlearn:
_gstlearn.ERuleIterator_swigregister(ERuleIterator)

class ERule(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ERule

    def __init__(self, *args):
        _gstlearn.ERule_swiginit(self, _gstlearn.new_ERule(*args))

    @staticmethod
    def getSize() -> "size_t":
        return _gstlearn.ERule_getSize()

    @staticmethod
    def getIterator() -> "ERuleIterator":
        return _gstlearn.ERule_getIterator()

    @staticmethod
    def existsKey(key: "String const &") -> "bool":
        return _gstlearn.ERule_existsKey(key)

    @staticmethod
    def existsValue(value: "int") -> "bool":
        return _gstlearn.ERule_existsValue(value)

    @staticmethod
    def fromKey(key: "String const &") -> "ERule const &":
        return _gstlearn.ERule_fromKey(key)

    @staticmethod
    def fromValue(value: "int") -> "ERule const &":
        return _gstlearn.ERule_fromValue(value)
    E_STD = _gstlearn.ERule_E_STD
    E_SHIFT = _gstlearn.ERule_E_SHIFT
    E_SHADOW = _gstlearn.ERule_E_SHADOW

    def toEnum(self) -> "ERule::EERule":
        return _gstlearn.ERule_toEnum(self)

# Register ERule in _gstlearn:
_gstlearn.ERule_swigregister(ERule)

def ERule_getSize() -> "size_t":
    return _gstlearn.ERule_getSize()

def ERule_getIterator() -> "ERuleIterator":
    return _gstlearn.ERule_getIterator()

def ERule_existsKey(key: "String const &") -> "bool":
    return _gstlearn.ERule_existsKey(key)

def ERule_existsValue(value: "int") -> "bool":
    return _gstlearn.ERule_existsValue(value)

def ERule_fromKey(key: "String const &") -> "ERule const &":
    return _gstlearn.ERule_fromKey(key)

def ERule_fromValue(value: "int") -> "ERule const &":
    return _gstlearn.ERule_fromValue(value)
ERule.STD = _gstlearn.cvar.ERule_STD
ERule.SHIFT = _gstlearn.cvar.ERule_SHIFT
ERule.SHADOW = _gstlearn.cvar.ERule_SHADOW

class KrigingSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dbin: "Db", dbout: "Db", model: "Model", neighParam: "ANeighParam"):
        _gstlearn.KrigingSystem_swiginit(self, _gstlearn.new_KrigingSystem(dbin, dbout, model, neighParam))
    __swig_destroy__ = _gstlearn.delete_KrigingSystem

    def setKrigOptEstim(self, iptrEst: "int", iptrStd: "int", iptrVarZ: "int") -> "int":
        return _gstlearn.KrigingSystem_setKrigOptEstim(self, iptrEst, iptrStd, iptrVarZ)

    def setKrigOptCalcul(self, calcul: "EKrigOpt", ndiscs: "VectorInt") -> "int":
        return _gstlearn.KrigingSystem_setKrigOptCalcul(self, calcul, ndiscs)

    def setKrigOptXValid(self, optionXValidEstim: "bool"=False, optionXValidStdev: "bool"=False) -> "int":
        return _gstlearn.KrigingSystem_setKrigOptXValid(self, optionXValidEstim, optionXValidStdev)

    def setKrigOptColCok(self, rank_colcok: "VectorInt") -> "int":
        return _gstlearn.KrigingSystem_setKrigOptColCok(self, rank_colcok)

    def setKrigOptBayes(self, flag_bayes: "bool") -> "int":
        return _gstlearn.KrigingSystem_setKrigOptBayes(self, flag_bayes)

    def setKrigOptMatCL(self, matCL: "VectorVectorDouble") -> "int":
        return _gstlearn.KrigingSystem_setKrigOptMatCL(self, matCL)

    def setKrigOptFlagSimu(self, flagSimu: "bool") -> "void":
        return _gstlearn.KrigingSystem_setKrigOptFlagSimu(self, flagSimu)

    def setKrigOptCheckAddress(self, flagCheckAddress: "bool") -> "void":
        return _gstlearn.KrigingSystem_setKrigOptCheckAddress(self, flagCheckAddress)

    def isReady(self) -> "bool":
        return _gstlearn.KrigingSystem_isReady(self)

    def estimate(self, iech_out: "int") -> "int":
        return _gstlearn.KrigingSystem_estimate(self, iech_out)

# Register KrigingSystem in _gstlearn:
_gstlearn.KrigingSystem_swigregister(KrigingSystem)

class AOF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.AOF_swiginit(self, _gstlearn.new_AOF(*args))
    __swig_destroy__ = _gstlearn.delete_AOF

    def mustBeGrid(self) -> "bool":
        return _gstlearn.AOF_mustBeGrid(self)

    def mustBeOneVariable(self) -> "bool":
        return _gstlearn.AOF_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim: "int") -> "bool":
        return _gstlearn.AOF_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode: "int") -> "bool":
        return _gstlearn.AOF_mustBeForRotation(self, mode)

    def isAuthorized(self) -> "bool":
        return _gstlearn.AOF_isAuthorized(self)

    def writeInFile(self) -> "int":
        return _gstlearn.AOF_writeInFile(self)

    def readFromFile(self) -> "Db *":
        return _gstlearn.AOF_readFromFile(self)

    def readGridFromFile(self) -> "DbGrid *":
        return _gstlearn.AOF_readGridFromFile(self)

    def isValidForGrid(self) -> "bool":
        return _gstlearn.AOF_isValidForGrid(self)

    def isValidForVariable(self) -> "bool":
        return _gstlearn.AOF_isValidForVariable(self)

    def isValidForNDim(self) -> "bool":
        return _gstlearn.AOF_isValidForNDim(self)

    def isValidForRotation(self) -> "bool":
        return _gstlearn.AOF_isValidForRotation(self)

    def setCols(self, *args) -> "void":
        return _gstlearn.AOF_setCols(self, *args)

    def setCol(self, icol: "int") -> "void":
        return _gstlearn.AOF_setCol(self, icol)

    def getFilename(self) -> "char const *":
        return _gstlearn.AOF_getFilename(self)

# Register AOF in _gstlearn:
_gstlearn.AOF_swigregister(AOF)

class FileLAS(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.FileLAS_swiginit(self, _gstlearn.new_FileLAS(*args))
    __swig_destroy__ = _gstlearn.delete_FileLAS

    def mustBeGrid(self) -> "bool":
        return _gstlearn.FileLAS_mustBeGrid(self)

    def mustBeOneVariable(self) -> "bool":
        return _gstlearn.FileLAS_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim: "int") -> "bool":
        return _gstlearn.FileLAS_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode: "int") -> "bool":
        return _gstlearn.FileLAS_mustBeForRotation(self, mode)

    def readFromFile(self) -> "Db *":
        return _gstlearn.FileLAS_readFromFile(self)

    def setCwell(self, cwell: "double") -> "void":
        return _gstlearn.FileLAS_setCwell(self, cwell)

    def setXwell(self, xwell: "double") -> "void":
        return _gstlearn.FileLAS_setXwell(self, xwell)

    def setYwell(self, ywell: "double") -> "void":
        return _gstlearn.FileLAS_setYwell(self, ywell)

# Register FileLAS in _gstlearn:
_gstlearn.FileLAS_swigregister(FileLAS)

class FileVTK(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.FileVTK_swiginit(self, _gstlearn.new_FileVTK(*args))
    __swig_destroy__ = _gstlearn.delete_FileVTK

    def mustBeGrid(self) -> "bool":
        return _gstlearn.FileVTK_mustBeGrid(self)

    def mustBeOneVariable(self) -> "bool":
        return _gstlearn.FileVTK_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim: "int") -> "bool":
        return _gstlearn.FileVTK_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode: "int") -> "bool":
        return _gstlearn.FileVTK_mustBeForRotation(self, mode)

    def writeInFile(self) -> "int":
        return _gstlearn.FileVTK_writeInFile(self)

    def setFactvar(self, factvar: "float") -> "void":
        return _gstlearn.FileVTK_setFactvar(self, factvar)

    def setFactx(self, factx: "int") -> "void":
        return _gstlearn.FileVTK_setFactx(self, factx)

    def setFacty(self, facty: "int") -> "void":
        return _gstlearn.FileVTK_setFacty(self, facty)

    def setFactz(self, factz: "int") -> "void":
        return _gstlearn.FileVTK_setFactz(self, factz)

    def setFlagBinary(self, flagBinary: "bool") -> "void":
        return _gstlearn.FileVTK_setFlagBinary(self, flagBinary)

# Register FileVTK in _gstlearn:
_gstlearn.FileVTK_swigregister(FileVTK)

class GridArcGis(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GridArcGis_swiginit(self, _gstlearn.new_GridArcGis(*args))
    __swig_destroy__ = _gstlearn.delete_GridArcGis

    def mustBeGrid(self) -> "bool":
        return _gstlearn.GridArcGis_mustBeGrid(self)

    def mustBeOneVariable(self) -> "bool":
        return _gstlearn.GridArcGis_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim: "int") -> "bool":
        return _gstlearn.GridArcGis_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode: "int") -> "bool":
        return _gstlearn.GridArcGis_mustBeForRotation(self, mode)

    def isAuthorized(self) -> "bool":
        return _gstlearn.GridArcGis_isAuthorized(self)

    def writeInFile(self) -> "int":
        return _gstlearn.GridArcGis_writeInFile(self)

# Register GridArcGis in _gstlearn:
_gstlearn.GridArcGis_swigregister(GridArcGis)

class GridBmp(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GridBmp_swiginit(self, _gstlearn.new_GridBmp(*args))
    __swig_destroy__ = _gstlearn.delete_GridBmp

    def mustBeGrid(self) -> "bool":
        return _gstlearn.GridBmp_mustBeGrid(self)

    def mustBeOneVariable(self) -> "bool":
        return _gstlearn.GridBmp_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim: "int") -> "bool":
        return _gstlearn.GridBmp_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode: "int") -> "bool":
        return _gstlearn.GridBmp_mustBeForRotation(self, mode)

    def writeInFile(self) -> "int":
        return _gstlearn.GridBmp_writeInFile(self)

    def readGridFromFile(self) -> "DbGrid *":
        return _gstlearn.GridBmp_readGridFromFile(self)

    def setColors(self, reds: "VectorInt", greens: "VectorInt", blues: "VectorInt") -> "void":
        return _gstlearn.GridBmp_setColors(self, reds, greens, blues)

    def setFFFF(self, red: "int", green: "int", blue: "int") -> "void":
        return _gstlearn.GridBmp_setFFFF(self, red, green, blue)

    def setHigh(self, red: "int", green: "int", blue: "int") -> "void":
        return _gstlearn.GridBmp_setHigh(self, red, green, blue)

    def setLow(self, red: "int", green: "int", blue: "int") -> "void":
        return _gstlearn.GridBmp_setLow(self, red, green, blue)

    def setMask(self, red: "int", green: "int", blue: "int") -> "void":
        return _gstlearn.GridBmp_setMask(self, red, green, blue)

    def setFlagHigh(self, flagHigh: "bool") -> "void":
        return _gstlearn.GridBmp_setFlagHigh(self, flagHigh)

    def setFlagLow(self, flagLow: "bool") -> "void":
        return _gstlearn.GridBmp_setFlagLow(self, flagLow)

    def setNcolor(self, ncolor: "int") -> "void":
        return _gstlearn.GridBmp_setNcolor(self, ncolor)

    def setNmult(self, nmult: "int") -> "void":
        return _gstlearn.GridBmp_setNmult(self, nmult)

    def setNsamplex(self, nsamplex: "int") -> "void":
        return _gstlearn.GridBmp_setNsamplex(self, nsamplex)

    def setNsampley(self, nsampley: "int") -> "void":
        return _gstlearn.GridBmp_setNsampley(self, nsampley)

    def setValmax(self, valmax: "double") -> "void":
        return _gstlearn.GridBmp_setValmax(self, valmax)

    def setValmin(self, valmin: "double") -> "void":
        return _gstlearn.GridBmp_setValmin(self, valmin)

# Register GridBmp in _gstlearn:
_gstlearn.GridBmp_swigregister(GridBmp)

class GridEclipse(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GridEclipse_swiginit(self, _gstlearn.new_GridEclipse(*args))
    __swig_destroy__ = _gstlearn.delete_GridEclipse

    def mustBeGrid(self) -> "bool":
        return _gstlearn.GridEclipse_mustBeGrid(self)

    def mustBeOneVariable(self) -> "bool":
        return _gstlearn.GridEclipse_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim: "int") -> "bool":
        return _gstlearn.GridEclipse_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode: "int") -> "bool":
        return _gstlearn.GridEclipse_mustBeForRotation(self, mode)

    def writeInFile(self) -> "int":
        return _gstlearn.GridEclipse_writeInFile(self)

# Register GridEclipse in _gstlearn:
_gstlearn.GridEclipse_swigregister(GridEclipse)

class GridF2G(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GridF2G_swiginit(self, _gstlearn.new_GridF2G(*args))
    __swig_destroy__ = _gstlearn.delete_GridF2G

    def mustBeGrid(self) -> "bool":
        return _gstlearn.GridF2G_mustBeGrid(self)

    def mustBeOneVariable(self) -> "bool":
        return _gstlearn.GridF2G_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim: "int") -> "bool":
        return _gstlearn.GridF2G_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode: "int") -> "bool":
        return _gstlearn.GridF2G_mustBeForRotation(self, mode)

    def readGridFromFile(self) -> "DbGrid *":
        return _gstlearn.GridF2G_readGridFromFile(self)

# Register GridF2G in _gstlearn:
_gstlearn.GridF2G_swigregister(GridF2G)

class GridIfpEn(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GridIfpEn_swiginit(self, _gstlearn.new_GridIfpEn(*args))
    __swig_destroy__ = _gstlearn.delete_GridIfpEn

    def mustBeGrid(self) -> "bool":
        return _gstlearn.GridIfpEn_mustBeGrid(self)

    def mustBeOneVariable(self) -> "bool":
        return _gstlearn.GridIfpEn_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim: "int") -> "bool":
        return _gstlearn.GridIfpEn_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode: "int") -> "bool":
        return _gstlearn.GridIfpEn_mustBeForRotation(self, mode)

    def writeInFile(self) -> "int":
        return _gstlearn.GridIfpEn_writeInFile(self)

    def readGridFromFile(self) -> "DbGrid *":
        return _gstlearn.GridIfpEn_readGridFromFile(self)

# Register GridIfpEn in _gstlearn:
_gstlearn.GridIfpEn_swigregister(GridIfpEn)

class GridIrap(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GridIrap_swiginit(self, _gstlearn.new_GridIrap(*args))
    __swig_destroy__ = _gstlearn.delete_GridIrap

    def mustBeGrid(self) -> "bool":
        return _gstlearn.GridIrap_mustBeGrid(self)

    def mustBeOneVariable(self) -> "bool":
        return _gstlearn.GridIrap_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim: "int") -> "bool":
        return _gstlearn.GridIrap_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode: "int") -> "bool":
        return _gstlearn.GridIrap_mustBeForRotation(self, mode)

    def writeInFile(self) -> "int":
        return _gstlearn.GridIrap_writeInFile(self)

    def getNsamplex(self) -> "int":
        return _gstlearn.GridIrap_getNsamplex(self)

    def setNsamplex(self, nsamplex: "int") -> "void":
        return _gstlearn.GridIrap_setNsamplex(self, nsamplex)

    def getNsampley(self) -> "int":
        return _gstlearn.GridIrap_getNsampley(self)

    def setNsampley(self, nsampley: "int") -> "void":
        return _gstlearn.GridIrap_setNsampley(self, nsampley)

# Register GridIrap in _gstlearn:
_gstlearn.GridIrap_swigregister(GridIrap)

class GridXYZ(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GridXYZ_swiginit(self, _gstlearn.new_GridXYZ(*args))
    __swig_destroy__ = _gstlearn.delete_GridXYZ

    def mustBeGrid(self) -> "bool":
        return _gstlearn.GridXYZ_mustBeGrid(self)

    def mustBeOneVariable(self) -> "bool":
        return _gstlearn.GridXYZ_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim: "int") -> "bool":
        return _gstlearn.GridXYZ_mustBeForNDim(self, ndim)

    def writeInFile(self) -> "int":
        return _gstlearn.GridXYZ_writeInFile(self)

# Register GridXYZ in _gstlearn:
_gstlearn.GridXYZ_swigregister(GridXYZ)

class GridZycor(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GridZycor_swiginit(self, _gstlearn.new_GridZycor(*args))
    __swig_destroy__ = _gstlearn.delete_GridZycor

    def mustBeGrid(self) -> "bool":
        return _gstlearn.GridZycor_mustBeGrid(self)

    def mustBeOneVariable(self) -> "bool":
        return _gstlearn.GridZycor_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim: "int") -> "bool":
        return _gstlearn.GridZycor_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode: "int") -> "bool":
        return _gstlearn.GridZycor_mustBeForRotation(self, mode)

    def writeInFile(self) -> "int":
        return _gstlearn.GridZycor_writeInFile(self)

    def readGridFromFile(self) -> "DbGrid *":
        return _gstlearn.GridZycor_readGridFromFile(self)

# Register GridZycor in _gstlearn:
_gstlearn.GridZycor_swigregister(GridZycor)

class binaryFileHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    JOB_ID = property(_gstlearn.binaryFileHeader_JOB_ID_get, _gstlearn.binaryFileHeader_JOB_ID_set)
    LINE_NUM = property(_gstlearn.binaryFileHeader_LINE_NUM_get, _gstlearn.binaryFileHeader_LINE_NUM_set)
    REEL_NUM = property(_gstlearn.binaryFileHeader_REEL_NUM_get, _gstlearn.binaryFileHeader_REEL_NUM_set)
    NUM_OF_TRACE = property(_gstlearn.binaryFileHeader_NUM_OF_TRACE_get, _gstlearn.binaryFileHeader_NUM_OF_TRACE_set)
    NUM_OF_AUX = property(_gstlearn.binaryFileHeader_NUM_OF_AUX_get, _gstlearn.binaryFileHeader_NUM_OF_AUX_set)
    INTERVAL_MS = property(_gstlearn.binaryFileHeader_INTERVAL_MS_get, _gstlearn.binaryFileHeader_INTERVAL_MS_set)
    INTERVAL_MS_ORI = property(_gstlearn.binaryFileHeader_INTERVAL_MS_ORI_get, _gstlearn.binaryFileHeader_INTERVAL_MS_ORI_set)
    NUM_OF_SAMPLES = property(_gstlearn.binaryFileHeader_NUM_OF_SAMPLES_get, _gstlearn.binaryFileHeader_NUM_OF_SAMPLES_set)
    NUM_OF_SAMPLES_ORI = property(_gstlearn.binaryFileHeader_NUM_OF_SAMPLES_ORI_get, _gstlearn.binaryFileHeader_NUM_OF_SAMPLES_ORI_set)
    SAMPLE_FORMAT = property(_gstlearn.binaryFileHeader_SAMPLE_FORMAT_get, _gstlearn.binaryFileHeader_SAMPLE_FORMAT_set)
    ENSEMBLE = property(_gstlearn.binaryFileHeader_ENSEMBLE_get, _gstlearn.binaryFileHeader_ENSEMBLE_set)
    TRACE_SORT = property(_gstlearn.binaryFileHeader_TRACE_SORT_get, _gstlearn.binaryFileHeader_TRACE_SORT_set)
    VERT_SUM = property(_gstlearn.binaryFileHeader_VERT_SUM_get, _gstlearn.binaryFileHeader_VERT_SUM_set)
    SWEEP_FREQ_START = property(_gstlearn.binaryFileHeader_SWEEP_FREQ_START_get, _gstlearn.binaryFileHeader_SWEEP_FREQ_START_set)
    SWEEP_FREQ_END = property(_gstlearn.binaryFileHeader_SWEEP_FREQ_END_get, _gstlearn.binaryFileHeader_SWEEP_FREQ_END_set)
    SWEEP_LENGTH = property(_gstlearn.binaryFileHeader_SWEEP_LENGTH_get, _gstlearn.binaryFileHeader_SWEEP_LENGTH_set)
    SWEEP_TYPE = property(_gstlearn.binaryFileHeader_SWEEP_TYPE_get, _gstlearn.binaryFileHeader_SWEEP_TYPE_set)
    SWEEP_NUM_CHANNEL = property(_gstlearn.binaryFileHeader_SWEEP_NUM_CHANNEL_get, _gstlearn.binaryFileHeader_SWEEP_NUM_CHANNEL_set)
    SWEEP_TAPER_LEN_START = property(_gstlearn.binaryFileHeader_SWEEP_TAPER_LEN_START_get, _gstlearn.binaryFileHeader_SWEEP_TAPER_LEN_START_set)
    SWEEP_TAPER_LEN_END = property(_gstlearn.binaryFileHeader_SWEEP_TAPER_LEN_END_get, _gstlearn.binaryFileHeader_SWEEP_TAPER_LEN_END_set)
    TAPER_TYPE = property(_gstlearn.binaryFileHeader_TAPER_TYPE_get, _gstlearn.binaryFileHeader_TAPER_TYPE_set)
    CORRELATED = property(_gstlearn.binaryFileHeader_CORRELATED_get, _gstlearn.binaryFileHeader_CORRELATED_set)
    BINARY_GAIN = property(_gstlearn.binaryFileHeader_BINARY_GAIN_get, _gstlearn.binaryFileHeader_BINARY_GAIN_set)
    AMP_RECOR = property(_gstlearn.binaryFileHeader_AMP_RECOR_get, _gstlearn.binaryFileHeader_AMP_RECOR_set)
    MEASURE_SYSTEM = property(_gstlearn.binaryFileHeader_MEASURE_SYSTEM_get, _gstlearn.binaryFileHeader_MEASURE_SYSTEM_set)
    IMPULSE_POLAR = property(_gstlearn.binaryFileHeader_IMPULSE_POLAR_get, _gstlearn.binaryFileHeader_IMPULSE_POLAR_set)
    POLAR_CODE = property(_gstlearn.binaryFileHeader_POLAR_CODE_get, _gstlearn.binaryFileHeader_POLAR_CODE_set)
    UNNASSIGNED1 = property(_gstlearn.binaryFileHeader_UNNASSIGNED1_get, _gstlearn.binaryFileHeader_UNNASSIGNED1_set)
    SEGY_REV_NUM = property(_gstlearn.binaryFileHeader_SEGY_REV_NUM_get, _gstlearn.binaryFileHeader_SEGY_REV_NUM_set)
    FIXED_LEN = property(_gstlearn.binaryFileHeader_FIXED_LEN_get, _gstlearn.binaryFileHeader_FIXED_LEN_set)
    NUM_EXT_HEAD = property(_gstlearn.binaryFileHeader_NUM_EXT_HEAD_get, _gstlearn.binaryFileHeader_NUM_EXT_HEAD_set)
    UNNASSIGNED2 = property(_gstlearn.binaryFileHeader_UNNASSIGNED2_get, _gstlearn.binaryFileHeader_UNNASSIGNED2_set)

    def __init__(self):
        _gstlearn.binaryFileHeader_swiginit(self, _gstlearn.new_binaryFileHeader())
    __swig_destroy__ = _gstlearn.delete_binaryFileHeader

# Register binaryFileHeader in _gstlearn:
_gstlearn.binaryFileHeader_swigregister(binaryFileHeader)

class traceHead(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TRACE_SEQ_GLOBAL = property(_gstlearn.traceHead_TRACE_SEQ_GLOBAL_get, _gstlearn.traceHead_TRACE_SEQ_GLOBAL_set)
    TRACE_SEQ_LOCAL = property(_gstlearn.traceHead_TRACE_SEQ_LOCAL_get, _gstlearn.traceHead_TRACE_SEQ_LOCAL_set)
    ORI_RECORD_NUM = property(_gstlearn.traceHead_ORI_RECORD_NUM_get, _gstlearn.traceHead_ORI_RECORD_NUM_set)
    TRACE_NUM_FIELD = property(_gstlearn.traceHead_TRACE_NUM_FIELD_get, _gstlearn.traceHead_TRACE_NUM_FIELD_set)
    SOURCE_POINT = property(_gstlearn.traceHead_SOURCE_POINT_get, _gstlearn.traceHead_SOURCE_POINT_set)
    ENSEMBLE_NUM = property(_gstlearn.traceHead_ENSEMBLE_NUM_get, _gstlearn.traceHead_ENSEMBLE_NUM_set)
    ENS_TRACE_NUM = property(_gstlearn.traceHead_ENS_TRACE_NUM_get, _gstlearn.traceHead_ENS_TRACE_NUM_set)
    TRACE_CODE = property(_gstlearn.traceHead_TRACE_CODE_get, _gstlearn.traceHead_TRACE_CODE_set)
    NUM_VERT_SUM = property(_gstlearn.traceHead_NUM_VERT_SUM_get, _gstlearn.traceHead_NUM_VERT_SUM_set)
    NUM_HORZ_SUM = property(_gstlearn.traceHead_NUM_HORZ_SUM_get, _gstlearn.traceHead_NUM_HORZ_SUM_set)
    DATA_USE = property(_gstlearn.traceHead_DATA_USE_get, _gstlearn.traceHead_DATA_USE_set)
    DIST_CENT_RECV = property(_gstlearn.traceHead_DIST_CENT_RECV_get, _gstlearn.traceHead_DIST_CENT_RECV_set)
    RECV_GRP_ELEV = property(_gstlearn.traceHead_RECV_GRP_ELEV_get, _gstlearn.traceHead_RECV_GRP_ELEV_set)
    SURF_ELEV_SRC = property(_gstlearn.traceHead_SURF_ELEV_SRC_get, _gstlearn.traceHead_SURF_ELEV_SRC_set)
    SOURCE_DEPTH = property(_gstlearn.traceHead_SOURCE_DEPTH_get, _gstlearn.traceHead_SOURCE_DEPTH_set)
    DATUM_ELEV_RECV = property(_gstlearn.traceHead_DATUM_ELEV_RECV_get, _gstlearn.traceHead_DATUM_ELEV_RECV_set)
    DATUM_ELAV_SRC = property(_gstlearn.traceHead_DATUM_ELAV_SRC_get, _gstlearn.traceHead_DATUM_ELAV_SRC_set)
    WATER_DEPTH_SRC = property(_gstlearn.traceHead_WATER_DEPTH_SRC_get, _gstlearn.traceHead_WATER_DEPTH_SRC_set)
    WATER_DEPTH_GRP = property(_gstlearn.traceHead_WATER_DEPTH_GRP_get, _gstlearn.traceHead_WATER_DEPTH_GRP_set)
    SCALE_DEPTH = property(_gstlearn.traceHead_SCALE_DEPTH_get, _gstlearn.traceHead_SCALE_DEPTH_set)
    SCALE_COOR = property(_gstlearn.traceHead_SCALE_COOR_get, _gstlearn.traceHead_SCALE_COOR_set)
    SRC_COOR_X = property(_gstlearn.traceHead_SRC_COOR_X_get, _gstlearn.traceHead_SRC_COOR_X_set)
    SRC_COOR_Y = property(_gstlearn.traceHead_SRC_COOR_Y_get, _gstlearn.traceHead_SRC_COOR_Y_set)
    GRP_COOR_X = property(_gstlearn.traceHead_GRP_COOR_X_get, _gstlearn.traceHead_GRP_COOR_X_set)
    GRP_COOR_Y = property(_gstlearn.traceHead_GRP_COOR_Y_get, _gstlearn.traceHead_GRP_COOR_Y_set)
    COOR_UNIT = property(_gstlearn.traceHead_COOR_UNIT_get, _gstlearn.traceHead_COOR_UNIT_set)
    WEATHER_VEL = property(_gstlearn.traceHead_WEATHER_VEL_get, _gstlearn.traceHead_WEATHER_VEL_set)
    SWEATHER_VEL = property(_gstlearn.traceHead_SWEATHER_VEL_get, _gstlearn.traceHead_SWEATHER_VEL_set)
    UPHOLE_T_SRC = property(_gstlearn.traceHead_UPHOLE_T_SRC_get, _gstlearn.traceHead_UPHOLE_T_SRC_set)
    UPHOLE_T_GRP = property(_gstlearn.traceHead_UPHOLE_T_GRP_get, _gstlearn.traceHead_UPHOLE_T_GRP_set)
    SRC_STA_CORRC = property(_gstlearn.traceHead_SRC_STA_CORRC_get, _gstlearn.traceHead_SRC_STA_CORRC_set)
    GRP_STA_CORRC = property(_gstlearn.traceHead_GRP_STA_CORRC_get, _gstlearn.traceHead_GRP_STA_CORRC_set)
    TOTAL_STA = property(_gstlearn.traceHead_TOTAL_STA_get, _gstlearn.traceHead_TOTAL_STA_set)
    LAG_TIME_A = property(_gstlearn.traceHead_LAG_TIME_A_get, _gstlearn.traceHead_LAG_TIME_A_set)
    LAG_TIME_B = property(_gstlearn.traceHead_LAG_TIME_B_get, _gstlearn.traceHead_LAG_TIME_B_set)
    DELAY_T = property(_gstlearn.traceHead_DELAY_T_get, _gstlearn.traceHead_DELAY_T_set)
    MUTE_T_STRT = property(_gstlearn.traceHead_MUTE_T_STRT_get, _gstlearn.traceHead_MUTE_T_STRT_set)
    MUTE_T_END = property(_gstlearn.traceHead_MUTE_T_END_get, _gstlearn.traceHead_MUTE_T_END_set)
    NUM_OF_SAMPL = property(_gstlearn.traceHead_NUM_OF_SAMPL_get, _gstlearn.traceHead_NUM_OF_SAMPL_set)
    SAMPLE_INTRVL = property(_gstlearn.traceHead_SAMPLE_INTRVL_get, _gstlearn.traceHead_SAMPLE_INTRVL_set)
    GAIN_TYPE = property(_gstlearn.traceHead_GAIN_TYPE_get, _gstlearn.traceHead_GAIN_TYPE_set)
    GAIN_CONST = property(_gstlearn.traceHead_GAIN_CONST_get, _gstlearn.traceHead_GAIN_CONST_set)
    GAIN_INIT = property(_gstlearn.traceHead_GAIN_INIT_get, _gstlearn.traceHead_GAIN_INIT_set)
    CORRLTD = property(_gstlearn.traceHead_CORRLTD_get, _gstlearn.traceHead_CORRLTD_set)
    SWEEP_FREQ_START = property(_gstlearn.traceHead_SWEEP_FREQ_START_get, _gstlearn.traceHead_SWEEP_FREQ_START_set)
    SWEEP_FREQ_END = property(_gstlearn.traceHead_SWEEP_FREQ_END_get, _gstlearn.traceHead_SWEEP_FREQ_END_set)
    SWEEP_LENGTH = property(_gstlearn.traceHead_SWEEP_LENGTH_get, _gstlearn.traceHead_SWEEP_LENGTH_set)
    SWEEP_TYPE = property(_gstlearn.traceHead_SWEEP_TYPE_get, _gstlearn.traceHead_SWEEP_TYPE_set)
    SWEEP_TAPER_LEN_START = property(_gstlearn.traceHead_SWEEP_TAPER_LEN_START_get, _gstlearn.traceHead_SWEEP_TAPER_LEN_START_set)
    SWEEP_TAPER_LEN_END = property(_gstlearn.traceHead_SWEEP_TAPER_LEN_END_get, _gstlearn.traceHead_SWEEP_TAPER_LEN_END_set)
    TAPER_TYPE = property(_gstlearn.traceHead_TAPER_TYPE_get, _gstlearn.traceHead_TAPER_TYPE_set)
    ALIAS_FREQ = property(_gstlearn.traceHead_ALIAS_FREQ_get, _gstlearn.traceHead_ALIAS_FREQ_set)
    ALIAS_SLOPE = property(_gstlearn.traceHead_ALIAS_SLOPE_get, _gstlearn.traceHead_ALIAS_SLOPE_set)
    NOTCH_FREQ = property(_gstlearn.traceHead_NOTCH_FREQ_get, _gstlearn.traceHead_NOTCH_FREQ_set)
    NOTCH_SLOPE = property(_gstlearn.traceHead_NOTCH_SLOPE_get, _gstlearn.traceHead_NOTCH_SLOPE_set)
    LOWCUT_FREQ = property(_gstlearn.traceHead_LOWCUT_FREQ_get, _gstlearn.traceHead_LOWCUT_FREQ_set)
    HIGHCUT_FREQ = property(_gstlearn.traceHead_HIGHCUT_FREQ_get, _gstlearn.traceHead_HIGHCUT_FREQ_set)
    LOWCUT_SLOPE = property(_gstlearn.traceHead_LOWCUT_SLOPE_get, _gstlearn.traceHead_LOWCUT_SLOPE_set)
    HIGHCUT_SLOPE = property(_gstlearn.traceHead_HIGHCUT_SLOPE_get, _gstlearn.traceHead_HIGHCUT_SLOPE_set)
    YEAR = property(_gstlearn.traceHead_YEAR_get, _gstlearn.traceHead_YEAR_set)
    DAY = property(_gstlearn.traceHead_DAY_get, _gstlearn.traceHead_DAY_set)
    HOUR = property(_gstlearn.traceHead_HOUR_get, _gstlearn.traceHead_HOUR_set)
    MINUTE = property(_gstlearn.traceHead_MINUTE_get, _gstlearn.traceHead_MINUTE_set)
    SECOND = property(_gstlearn.traceHead_SECOND_get, _gstlearn.traceHead_SECOND_set)
    TIME_CODE = property(_gstlearn.traceHead_TIME_CODE_get, _gstlearn.traceHead_TIME_CODE_set)
    WEIGHT_FACT = property(_gstlearn.traceHead_WEIGHT_FACT_get, _gstlearn.traceHead_WEIGHT_FACT_set)
    GEOPHNE_ROLL = property(_gstlearn.traceHead_GEOPHNE_ROLL_get, _gstlearn.traceHead_GEOPHNE_ROLL_set)
    GEOPHNE_TRACE = property(_gstlearn.traceHead_GEOPHNE_TRACE_get, _gstlearn.traceHead_GEOPHNE_TRACE_set)
    GEOPHNE_LAST = property(_gstlearn.traceHead_GEOPHNE_LAST_get, _gstlearn.traceHead_GEOPHNE_LAST_set)
    GAP_SIZE = property(_gstlearn.traceHead_GAP_SIZE_get, _gstlearn.traceHead_GAP_SIZE_set)
    OVER_TRAVEL = property(_gstlearn.traceHead_OVER_TRAVEL_get, _gstlearn.traceHead_OVER_TRAVEL_set)
    ENS_COOR_X = property(_gstlearn.traceHead_ENS_COOR_X_get, _gstlearn.traceHead_ENS_COOR_X_set)
    ENS_COOR_Y = property(_gstlearn.traceHead_ENS_COOR_Y_get, _gstlearn.traceHead_ENS_COOR_Y_set)
    INLINE = property(_gstlearn.traceHead_INLINE_get, _gstlearn.traceHead_INLINE_set)
    CROSS = property(_gstlearn.traceHead_CROSS_get, _gstlearn.traceHead_CROSS_set)
    SHOOTPOINT = property(_gstlearn.traceHead_SHOOTPOINT_get, _gstlearn.traceHead_SHOOTPOINT_set)
    SHOOTPOINT_SCALE = property(_gstlearn.traceHead_SHOOTPOINT_SCALE_get, _gstlearn.traceHead_SHOOTPOINT_SCALE_set)
    TRACE_UNIT = property(_gstlearn.traceHead_TRACE_UNIT_get, _gstlearn.traceHead_TRACE_UNIT_set)
    TRANSD_CONST = property(_gstlearn.traceHead_TRANSD_CONST_get, _gstlearn.traceHead_TRANSD_CONST_set)
    TRANSD_UNIT = property(_gstlearn.traceHead_TRANSD_UNIT_get, _gstlearn.traceHead_TRANSD_UNIT_set)
    TRACE_IDENT = property(_gstlearn.traceHead_TRACE_IDENT_get, _gstlearn.traceHead_TRACE_IDENT_set)
    SCALE_TIME = property(_gstlearn.traceHead_SCALE_TIME_get, _gstlearn.traceHead_SCALE_TIME_set)
    SRC_ORIENT = property(_gstlearn.traceHead_SRC_ORIENT_get, _gstlearn.traceHead_SRC_ORIENT_set)
    SRC_DIRECTION = property(_gstlearn.traceHead_SRC_DIRECTION_get, _gstlearn.traceHead_SRC_DIRECTION_set)
    SRC_MEASUREMT = property(_gstlearn.traceHead_SRC_MEASUREMT_get, _gstlearn.traceHead_SRC_MEASUREMT_set)
    SRC_UNIT = property(_gstlearn.traceHead_SRC_UNIT_get, _gstlearn.traceHead_SRC_UNIT_set)
    UNNASSIGNED1 = property(_gstlearn.traceHead_UNNASSIGNED1_get, _gstlearn.traceHead_UNNASSIGNED1_set)

    def __init__(self):
        _gstlearn.traceHead_swiginit(self, _gstlearn.new_traceHead())
    __swig_destroy__ = _gstlearn.delete_traceHead

# Register traceHead in _gstlearn:
_gstlearn.traceHead_swigregister(traceHead)

class SegYArg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ndescr = property(_gstlearn.SegYArg_ndescr_get, _gstlearn.SegYArg_ndescr_set)
    npertrace = property(_gstlearn.SegYArg_npertrace_get, _gstlearn.SegYArg_npertrace_set)
    ntraces = property(_gstlearn.SegYArg_ntraces_get, _gstlearn.SegYArg_ntraces_set)
    tab = property(_gstlearn.SegYArg_tab_get, _gstlearn.SegYArg_tab_set)
    descr = property(_gstlearn.SegYArg_descr_get, _gstlearn.SegYArg_descr_set)
    cotes = property(_gstlearn.SegYArg_cotes_get, _gstlearn.SegYArg_cotes_set)

    def __init__(self):
        _gstlearn.SegYArg_swiginit(self, _gstlearn.new_SegYArg())
    __swig_destroy__ = _gstlearn.delete_SegYArg

# Register SegYArg in _gstlearn:
_gstlearn.SegYArg_swigregister(SegYArg)


def segy_summary(*args, **kwargs) -> "Grid":
    return _gstlearn.segy_summary(*args, **kwargs)

def segy_array(*args, **kwargs) -> "SegYArg":
    return _gstlearn.segy_array(*args, **kwargs)

def db_segy(*args, **kwargs) -> "int":
    return _gstlearn.db_segy(*args, **kwargs)

# Override operator [] for the Db class
# Thanks to Nicolas Desassis:
import gstlearn as gl
import numpy as np

def is_list_type(mylist, types):
    """Check if an input is an iterable (tuple, list or numpy array) containing
       elements of only a given type"""
    all_type = True
    if not(isinstance(mylist,(tuple, list, np.ndarray))):
        all_type = False
    i = 0
    while all_type and i<len(mylist):
        if not(isinstance(mylist[i], types)):
               all_type = False
        i += 1
    return all_type

def check_nrows(db, nrows):
    """Check if a number of rows matches with the number of samples of a Db, and returns the flag
    for useSel (whether it matches the number of active samples or the total number of samples)"""
    if nrows == db.getActiveSampleNumber() :
        useSel = True
    elif nrows == db.getSampleNumber() or db.getSampleNumber()==0:
        useSel = False
    else:
        if db.getActiveSampleNumber() != db.getSampleNumber():
            raise ValueError("Error of dimension. Your number of lines has to be equal to " +
                str(db.getActiveSampleNumber()) + " or " + str(db.getSampleNumber()))
        else :
            raise ValueError("Error of dimension. Your number of lines has to be equal to " +
                  str(db.getActiveSampleNumber()))
    return useSel

def findColumnNames(self, columns):
    """Extract names of columns from Db, given different possible types of arguments: 
        names, indices, or locator"""
    if isinstance(columns, str) or is_list_type(columns, (str, np.str_)): #get variable(s) by name
        names = self.getNames(np.atleast_1d(columns))

    elif isinstance(columns, gl.ELoc): #get variable(s) by locator
        names = self.getNamesByLocator(columns)

    elif is_list_type(columns, gl.ELoc):
        if not(len(columns)) == 1:
            raise ValueError("The input for columns should not be a list of several Locators")
        names = self.getNamesByLocator(columns[0])

    elif isinstance(columns, (int, np.int_)):
        names = self.getNameByColIdx(columns)

    elif isinstance(columns, slice):
        Nmax = self.getColumnNumber()
        names = []
        for i in range(Nmax)[columns]:
            names.append(self.getNameByColIdx(i))

    elif is_list_type(columns, (int, np.int_)):
        names = []
        Nfields = self.getColumnNumber()
        for i in columns:
            if i >= Nfields:
                print(f"Warning: the index {i} is out of bounds with {Nfields}, this index is ignored")
            else:
                names.append(self.getNameByColIdx(int(i)))

    else:
        raise ValueError(f"Argument for columns of wrong type: {type(columns)}")

    return np.atleast_1d(names)

def has_row_selection(self, arg):
    """Check if the argument given contains a rows selection [rows,columns], 
    or only column selection [columns].
    If the argument is a tuple of length 2 and its first element is a valid argument
    for indexing rows, then the function returns True."""
    valid_row_indexing = False
    if isinstance(arg, tuple) and len(arg)==2:
        array_test = np.zeros(getNrows(self))
        try: # test if first element of tuple is a valid argument for indexing rows. If yes, then we assume it is the argument for rows.
            array_test[arg[0],]
            valid_row_indexing = True
        except IndexError:
            valid_row_indexing = False
    return valid_row_indexing

def getNrows(self, useSel=None):
    """ get number of rows of the Db when using or not a selection"""
    if useSel is None:
        useSel = self.useSel
    if useSel:
        nrows = self.getActiveSampleNumber()
    else:
        nrows = self.getSampleNumber()
    return nrows

def getitem(self,arg):
    """
    Extract data from a Db. Use Db[arg]

    Parameters
    ----------
    arg is (rows, columns) or columns
    rows : (optional) int, list of int, or slice. Which rows (samples) to extract.
    columns: str or list of str. Names of the variables to extract.
             int, list of int, or slice. Indices of the variables to extract.
             gstlearn.ELoc. Locator of the variables to extract.

    Returns
    -------
    numpy.ndarray
        2D array of shape (nrows, nvars) of the extracted data.

    Examples
    --------
    db["var"] or db[:,"var"] extracts the variable named "var"
    db[5:10,(2,3)] extracts the rows 5 to 9 of the variables of index 2 and 3 (array of shape (5,2))
    db[gl.ELoc.Z] extracts all the variables located with Z.
    """    
    nrows = getNrows(self)

    selec_rows = has_row_selection(self, arg)   
    if selec_rows:
        rows = arg[0]
        columns = arg[1]
    else:
        rows = slice(None,None,None) # extract all rows
        columns = arg

# extract columns
    ColNames = findColumnNames(self, columns)
    nbvar = len(ColNames)
    temp = np.array(self.getColumns(ColNames, self.useSel))        
    temp = temp.reshape([nbvar,nrows]).T

# extract rows
    temp = temp[rows,]
    temp[temp == gl.TEST] = np.nan
    return temp

# This function will add a set of vectors (as a numpy array) to a db. 
# If some of the names exist, the corresponding variables will be replaced 
# and not added.

def setitem(self,name,tab):

# analyze input arguments
    selec_rows = has_row_selection(self, name)   
    if selec_rows:
        rows = name[0]
        columns = name[1]
    else:
        columns = name

# find existing column names
    arr_columns = np.atleast_1d(columns)
    ColNames = findColumnNames(self, columns) #existing names

# analyze input table
    if isinstance(tab, (float, np.floating, int, np.integer, bool, np.bool_)):
        nrows = getNrows(self)
        nvars = len(ColNames) # this means we will only modify existing columns, not create ones
        tab = np.ones((nrows, nvars))*tab
        if selec_rows:
            tab = np.atleast_2d(tab[rows,:])
    else:
        tab = np.copy(np.float64(tab))
        if len(tab.shape) == 1 :
            tab = np.atleast_2d(tab).T
        nrows, nvars = tab.shape

# create list of column names to modify and/or create
    if len(ColNames) == nvars: # modify existing variables only
        new_names = ColNames

    elif len(arr_columns) == nvars and is_list_type(arr_columns, (str,np.str_)):
        new_names = arr_columns

    elif isinstance(columns, (str,np.str_)) and nvars > 1 and len(ColNames)==0: # create new variables from a unique name
        new_names = gl.generateMultipleNames(columns, nvars)

    else:
        raise ValueError(f"Wrong type or length of input ({columns}): the input should correspond"
                         f" either to a number of existing variables ({len(ColNames)}) equal to the"
                         f" number of columns of the table (nvar={nvars}), or should be a name or "
                         f"list of names of length nvar={nvars} in order to create new variables.")

# loop on the column names to modify/create each column
    for i,name in enumerate(new_names):
# check if existing name
        ExistingNames = findColumnNames(self, name)
        if len(ExistingNames) > 1:
            raise ValueError(f"There is more than one variable name corresponding to '{name}' "
                             f"in the Db: {ExistingNames}")

        if selec_rows:
            useSel = self.useSel
            if len(ExistingNames) == 0: # create new variable
                nrows_tot = getNrows(self, useSel)
                tab_i = np.ones(nrows_tot)*gl.TEST # NaNs outside of target rows
            elif len(ExistingNames) == 1: # modify existing variable
                tab_i = self[name]

            tab_i = np.squeeze(tab_i)
            tab_i[rows,] = tab[:,i]

        else:
            useSel = check_nrows(self,nrows)
            tab_i = np.empty(nrows)
            tab_i[:] = tab[:,i]

        tab_i[np.isnan(tab_i)] = gl.TEST    
        VectD = np.double(tab_i)
        self.setColumn(VectD, name, useSel)

    return

setattr(gl.Db,"useSel",False)    

setattr(gl.Db,"__getitem__",getitem)

setattr(gl.Db,"__setitem__",setitem)


# Add plot functions as methods of the class
import gstlearn.plot as gp

setattr(gl.Db,"plot", gp.point)
setattr(gl.Db,"plot_correlation", gp.correlation)
setattr(gl.Db,"plot_hist", gp.hist)

setattr(gl.DbGrid,"plot", gp.grid)
setattr(gl.DbGrid,"plot_grids", gp.grids)
setattr(gl.DbGrid,"plot_point", gp.point)
# plot_correlation and plot_hist are already inherited from the parent class Db

setattr(gl.Vario,"plot", gp.vario)
setattr(gl.Vario,"plot_varioElem", gp.varioElem)
setattr(gl.Vario,"plot_varioDir", gp.varioDir)
setattr(gl.Vario,"plot_varmod", gp.varmod)

setattr(gl.Model,"plot", gp.model)

setattr(gl.Rule,"plot", gp.rule)

setattr(gl.Table,"plot", gp.table)

setattr(gl.Polygons,"plot", gp.polygon)



