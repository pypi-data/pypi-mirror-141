import meshio
from numpy.typing import ArrayLike as ArrayLike
from typing import Any, Callable

class Mesh(meshio.Mesh):
    def __init__(self, *args, **kwargs) -> None: ...
    points: Any
    cells: Any
    def deduplicate_points(self, tol: float) -> int: ...
    @property
    def topological_dim(self) -> int: ...
    def prune_z_0(self, tol: float = ...) -> None: ...
    def remove_orphaned_points(self) -> None: ...
    point_data: Any
    def remove_points(self, mask: ArrayLike) -> None: ...
    cell_data: Any
    cell_sets: Any
    def remove_cells(self, mask: Union[list[Union[bool, ArrayLike]], Callable[[meshio.CellBlock], Union[bool, ArrayLike]]], invert_mask: bool = ...) -> None: ...
    def force_cell_order(self, order: int) -> None: ...
    def add_outer_normals(self) -> None: ...
    def add_boundary_cells(self) -> None: ...
    def show(self, *args, **kwargs) -> None: ...
    def savefig(self, filename: str, *args, **kwargs) -> None: ...
